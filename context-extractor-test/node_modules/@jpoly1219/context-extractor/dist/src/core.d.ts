/// <reference types="node" />
import { LspClient } from "../ts-lsp-client-dist/src/main.js";
import * as fs from "fs";
declare const getAnnotatedFunctionHoleContext: (sketchFileContent: string) => {
    functionName: string;
    functionTypeSpan: string;
    linePosition: number;
    characterPosition: number;
};
declare const getHoleContext: (c: LspClient, injectedSketchFilePath: string, injectedSketchFileContent: string) => Promise<{
    fullHoverResult: string;
    functionName: string;
    functionTypeSpan: string;
    linePosition: number;
    characterPosition: number;
}>;
declare const extractRelevantTypes: (c: LspClient, fullHoverResult: string, typeName: string, typeSpan: string, linePosition: number, characterPosition: number, foundSoFar: Map<string, string>, currentFile: string, outputFile: fs.WriteStream, depth: number) => Promise<Map<string, string>>;
declare const extractRelevantHeaders: (preludeContent: string, relevantTypes: Map<string, string>, holeType: string) => string[];
declare const normalize: (typeSpan: string, relevantTypes: Map<string, string>) => string;
export { getAnnotatedFunctionHoleContext, getHoleContext, extractRelevantTypes, extractRelevantHeaders, normalize };
