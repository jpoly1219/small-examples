import { relevantTypeObject, varsObject, typesObject, typesQueryResult, varsQueryResult, relevantTypeQueryResult, typesAndLocationsQueryResult, Language } from "./types";
declare const indexOfRegexGroup: (match: RegExpMatchArray, n: number) => number;
declare const formatTypeSpan: (typeSpan: string) => string;
declare const extractSnippet: (documentContent: string, start: {
    line: number;
    character: number;
}, end: {
    line: number;
    character: number;
}) => string;
declare const isTuple: (typeSpan: string) => boolean;
declare const isUnion: (typeSpan: string) => boolean;
declare const isArray: (typeSpan: string) => boolean;
declare const isObject: (typeSpan: string) => boolean;
declare const isFunction: (typeSpan: string) => boolean;
declare const isPrimitive: (typeSpan: string) => boolean;
declare const isTypeAlias: (typeSpan: string) => boolean;
declare const escapeQuotes: (typeSpan: string) => string;
declare const parseTypeArrayString: (typeStr: string) => string[];
declare const removeLines: (fileContent: string) => string[];
declare const parseCodeQLRelevantTypes: (table: relevantTypeQueryResult) => Map<string, relevantTypeObject>;
declare const parseCodeQLVars: (table: varsQueryResult) => Map<string, varsObject>;
declare const parseCodeQLTypes: (table: typesQueryResult) => typesObject[];
declare const parseCodeQLLocationsAndTypes: (table: typesAndLocationsQueryResult) => Map<string, string[]>;
declare const parseCodeQLTypesAndLocations: (table: typesAndLocationsQueryResult) => Map<string, string>;
declare const isQLFunction: (typeQLClass: string) => boolean;
declare const isQLTuple: (typeQLClass: string) => boolean;
declare const isQLUnion: (typeQLClass: string) => boolean;
declare const isQLArray: (typeQLClass: string) => boolean;
declare const isQLInterface: (typeQLClass: string) => boolean;
declare const isQLLocalTypeAccess: (typeQLClass: string) => boolean;
declare const isQLPredefined: (typeQLClass: string) => boolean;
declare const isQLLiteral: (typeQLClass: string) => boolean;
declare const isQLKeyword: (typeQLClass: string) => boolean;
declare const isQLLabel: (typeQLClass: string) => boolean;
declare const isQLIdentifier: (typeQLClass: string) => boolean;
declare const supportsHole: (lang: Language) => boolean;
declare const getAllTSFiles: (dirPath: string, arrayOfFiles?: string[]) => string[];
declare const getAllOCamlFiles: (dirPath: string, arrayOfFiles?: string[]) => string[];
export { indexOfRegexGroup, formatTypeSpan, extractSnippet, isTuple, isUnion, isArray, isObject, isFunction, isPrimitive, isTypeAlias, escapeQuotes, parseTypeArrayString, removeLines, parseCodeQLRelevantTypes, parseCodeQLVars, parseCodeQLTypes, parseCodeQLLocationsAndTypes, parseCodeQLTypesAndLocations, isQLFunction, isQLTuple, isQLUnion, isQLArray, isQLInterface, isQLLocalTypeAccess, isQLPredefined, isQLLiteral, isQLKeyword, isQLLabel, isQLIdentifier, supportsHole, getAllTSFiles, getAllOCamlFiles };
