import { LspClient, Range } from "../ts-lsp-client-dist/src/main";
import { LanguageDriver, TypeSpanAndSourceFile } from "./types";
import { TypeScriptTypeChecker } from "./typescript-type-checker";
export declare class TypeScriptDriver implements LanguageDriver {
    typeChecker: TypeScriptTypeChecker;
    init(lspClient: LspClient, sketchPath: string): Promise<void>;
    getHoleContext(lspClient: LspClient, sketchFilePath: string): Promise<{
        fullHoverResult: string;
        functionName: string;
        functionTypeSpan: string;
        linePosition: number;
        characterPosition: number;
        holeTypeDefLinePos: number;
        holeTypeDefCharPos: number;
        range: Range;
        source: string;
    }>;
    extractRelevantTypes(lspClient: LspClient, fullHoverResult: string, typeName: string, startLine: number, endLine: number, foundSoFar: Map<string, TypeSpanAndSourceFile>, // identifier -> [full hover result, source]
    currentFile: string): Promise<Map<string, TypeSpanAndSourceFile>>;
    extractRelevantHeaders(_: LspClient, sources: string[], relevantTypes: Map<string, TypeSpanAndSourceFile>, holeType: string): Promise<Set<TypeSpanAndSourceFile>>;
    generateTargetTypes(relevantTypes: Map<string, TypeSpanAndSourceFile>, holeType: string): Set<string>;
    generateTargetTypesHelper(relevantTypes: Map<string, TypeSpanAndSourceFile>, currType: string, targetTypes: Set<string>): void;
    extractRelevantHeadersHelper(typeSpan: string, targetTypes: Set<string>, relevantTypes: Map<string, TypeSpanAndSourceFile>, relevantContext: Set<TypeSpanAndSourceFile>, line: string, source: string): void;
    isTypeEquivalent(t1: string, t2: string, relevantTypes: Map<string, TypeSpanAndSourceFile>): boolean;
    normalize(typeSpan: string, relevantTypes: Map<string, TypeSpanAndSourceFile>): string;
    normalize2(typeSpan: string, relevantTypes: Map<string, TypeSpanAndSourceFile>): string;
}
