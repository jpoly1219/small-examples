// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.8.2+5.8.2

//# unitInfo: Provides: Dune__exe__Test_parser
//# unitInfo: Requires: Js_of_ocaml__Js, Parse, Stdlib, Stdlib__Array, Stdlib__Lexing, Stdlib__List, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = " ",
    cst_Failed_to_parse_type_span$1 = "Failed to parse type span",
    cst_Other_core_type = "Other core type",
    cst_Ptyp_constr$1 = "Ptyp_constr",
    caml_js_from_array = runtime.caml_js_from_array,
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = " -> ",
    cst$0 = " * ",
    cst$1 = ", ",
    cst$2 = cst$4,
    cst$3 = cst$4,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Parse = global_data.Parse,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    cst_unknown = "unknown",
    _a_ = [0, [11, cst_Other_core_type, 0], cst_Other_core_type],
    _b_ = [0, cst_Other_core_type, 0],
    cst_Ptyp_arrow = "Ptyp_arrow",
    cst_Ptyp_tuple = "Ptyp_tuple",
    cst_Ptyp_constr = cst_Ptyp_constr$1,
    cst_Ptyp_constr$0 = cst_Ptyp_constr$1,
    _c_ = [0, [11, cst_Other_core_type, 0], cst_Other_core_type],
    cst_type_tmp = "type tmp = ",
    cst_Failed_to_parse_type_span = cst_Failed_to_parse_type_span$1,
    cst_Failed_to_parse_type_span$0 = cst_Failed_to_parse_type_span$1;
   function string_of_type(typ){
    var match = typ[1];
    if(typeof match !== "number")
     switch(match[0]){
       case 1:
        var
         t2 = match[3],
         t1 = match[2],
         arg1 = string_of_type(t1),
         arg2 = string_of_type(t2),
         _r_ = caml_call2(Stdlib[28], cst, arg2);
        return caml_call2(Stdlib[28], arg1, _r_);
       case 2:
        var
         types = match[1],
         type_strings = caml_call2(Stdlib_List[20], string_of_type, types);
        return caml_call2(Stdlib_String[7], cst$0, type_strings);
       case 3:
        var _s_ = match[1][1];
        if(0 === _s_[0]){
         var s = _s_[1];
         if(! match[2]) return s;
         var
          ctyp_list = match[2],
          _t_ = caml_call2(Stdlib_List[20], string_of_type, ctyp_list),
          args_str = caml_call1(caml_call1(Stdlib_String[7], cst$1), _t_),
          _u_ = caml_call2(Stdlib[28], cst$2, s);
         return caml_call2(Stdlib[28], args_str, _u_);
        }
        break;
     }
    return cst_unknown;
   }
   function extract_core_type(ctyp, components_only){
    if(components_only){
     var match = ctyp[1];
     if(typeof match !== "number")
      switch(match[0]){
        case 1:
         var
          rettyp = match[3],
          argtyp = match[2],
          _i_ = [0, string_of_type(rettyp), 0];
         return [0, cst_Ptyp_arrow, [0, string_of_type(argtyp), _i_]];
        case 2:
         var types = match[1];
         return [0,
                 cst_Ptyp_tuple,
                 caml_call3
                  (Stdlib_List[27],
                   function(curr, acc){return [0, string_of_type(curr), acc];},
                   types,
                   0)];
        case 3:
         var _j_ = match[1][1];
         if(0 === _j_[0]){
          var _k_ = match[2], id = _j_[1];
          if(! _k_) return [0, cst_Ptyp_constr$0, [0, id, 0]];
          if(! _k_[2]){
           var ctyps = _k_[1];
           return [0, cst_Ptyp_constr, [0, string_of_type(ctyps), [0, id, 0]]];
          }
         }
         break;
      }
     caml_call1(Stdlib_Printf[2], _a_);
     return _b_;
    }
    var match$0 = ctyp[1];
    if(typeof match$0 !== "number")
     switch(match$0[0]){
       case 1:
        var
         rettyp$0 = match$0[3],
         _l_ = extract_core_type(rettyp$0, components_only);
        return [0, string_of_type(ctyp), _l_];
       case 2:
        var types$0 = match$0[1];
        return caml_call3
                (Stdlib_List[26],
                 function(acc, curr){
                  var _q_ = extract_core_type(curr, components_only);
                  return caml_call2(Stdlib_List[12], _q_, acc);
                 },
                 0,
                 types$0);
       case 3:
        var _m_ = match$0[1][1];
        if(0 === _m_[0]){
         var _n_ = match$0[2], id$0 = _m_[1];
         if(! _n_) return [0, id$0, 0];
         if(! _n_[2]){
          var
           ctyps$0 = _n_[1],
           _o_ = caml_call2(Stdlib[28], cst$3, id$0),
           _p_ = string_of_type(ctyps$0);
          return [0, caml_call2(Stdlib[28], _p_, _o_), 0];
         }
        }
        break;
     }
    caml_call1(Stdlib_Printf[2], _c_);
    return 0;
   }
   function parse_core_type_from_type_span(s){
    var lexbuf = caml_call2(Stdlib_Lexing[3], 0, s);
    try{var _g_ = [0, caml_call1(Parse[5], lexbuf)]; return _g_;}
    catch(_h_){return 0;}
   }
   function parse_implementation_from_type(s){
    var
     _d_ = caml_call2(Stdlib[28], cst_type_tmp, s),
     lexbuf = caml_call2(Stdlib_Lexing[3], 0, _d_);
    try{var _e_ = [0, caml_call1(Parse[1], lexbuf)]; return _e_;}
    catch(_f_){return 0;}
   }
   function js_extract_target_types(type_span){
    var parsed = parse_core_type_from_type_span(type_span);
    if(parsed)
     var ctyp = parsed[1], extracted = extract_core_type(ctyp, 0);
    else
     var
      parsed2 = parse_implementation_from_type(type_span),
      extracted =
        parsed2
         ? [0, type_span, 0]
         : caml_call1(Stdlib[2], cst_Failed_to_parse_type_span);
    return caml_js_from_array(caml_call1(Stdlib_Array[11], extracted));
   }
   function js_extract_component_types(type_span){
    var parsed = parse_core_type_from_type_span(type_span);
    if(parsed)
     var ctyp = parsed[1], extracted = extract_core_type(ctyp, 1);
    else
     var
      parsed2 = parse_implementation_from_type(type_span),
      extracted =
        parsed2
         ? [0, type_span, 0]
         : caml_call1(Stdlib[2], cst_Failed_to_parse_type_span$0);
    return caml_js_from_array(caml_call1(Stdlib_Array[11], extracted));
   }
   caml_call2
    (Js_of_ocaml_Js[50],
     "parse",
     caml_js_wrap_callback(js_extract_target_types));
   caml_call2
    (Js_of_ocaml_Js[50],
     "getComponents",
     caml_js_wrap_callback(js_extract_component_types));
   var Dune_exe_Test_parser = [0];
   runtime.caml_register_global
    (26, Dune_exe_Test_parser, "Dune__exe__Test_parser");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
