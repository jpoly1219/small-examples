// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.2+5.8.2

//# unitInfo: Provides: Js_of_ocaml__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Js_of_ocaml = [0],
    Js_of_ocaml$0 = [0, Js_of_ocaml];
   runtime.caml_register_global(0, Js_of_ocaml$0, "Js_of_ocaml__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Import
//# unitInfo: Requires: Stdlib__Char, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Poly = [0];
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Int_replace_polymorphic_compar = [0, max, min],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    blit = Stdlib_String[6],
    concat = Stdlib_String[7],
    cat = Stdlib_String[8],
    compare = Stdlib_String[10],
    starts_with = Stdlib_String[11],
    ends_with = Stdlib_String[12],
    contains_from = Stdlib_String[13],
    rcontains_from = Stdlib_String[14],
    contains = Stdlib_String[15],
    sub = Stdlib_String[16],
    split_on_char = Stdlib_String[17],
    map = Stdlib_String[18],
    mapi = Stdlib_String[19],
    fold_left = Stdlib_String[20],
    fold_right = Stdlib_String[21],
    for_all = Stdlib_String[22],
    exists = Stdlib_String[23],
    trim = Stdlib_String[24],
    escaped = Stdlib_String[25],
    uppercase_ascii = Stdlib_String[26],
    lowercase_ascii = Stdlib_String[27],
    capitalize_ascii = Stdlib_String[28],
    uncapitalize_ascii = Stdlib_String[29],
    iter = Stdlib_String[30],
    iteri = Stdlib_String[31],
    index_from = Stdlib_String[32],
    index_from_opt = Stdlib_String[33],
    rindex_from = Stdlib_String[34],
    rindex_from_opt = Stdlib_String[35],
    index = Stdlib_String[36],
    index_opt = Stdlib_String[37],
    rindex = Stdlib_String[38],
    rindex_opt = Stdlib_String[39],
    to_seq = Stdlib_String[40],
    to_seqi = Stdlib_String[41],
    of_seq = Stdlib_String[42],
    get_utf_8_uchar = Stdlib_String[43],
    is_valid_utf_8 = Stdlib_String[44],
    get_utf_16be_uchar = Stdlib_String[45],
    is_valid_utf_16be = Stdlib_String[46],
    get_utf_16le_uchar = Stdlib_String[47],
    is_valid_utf_16le = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64],
    equal = runtime.caml_string_equal,
    String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal],
    chr = Stdlib_Char[1],
    escaped$0 = Stdlib_Char[2],
    lowercase_ascii$0 = Stdlib_Char[3],
    uppercase_ascii$0 = Stdlib_Char[4],
    compare$0 = Stdlib_Char[5],
    seeded_hash$0 = Stdlib_Char[7],
    hash$0 = Stdlib_Char[8];
   function equal$0(x, y){return x === y ? 1 : 0;}
   var
    Char =
      [0,
       chr,
       escaped$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$0,
       seeded_hash$0,
       hash$0,
       equal$0],
    max$0 = Int_replace_polymorphic_compar[1],
    min$0 = Int_replace_polymorphic_compar[2],
    Js_of_ocaml_Import =
      [0, Poly, Int_replace_polymorphic_compar, String, Char, max$0, min$0];
   runtime.caml_register_global(2, Js_of_ocaml_Import, "Js_of_ocaml__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Js
//# unitInfo: Requires: Js_of_ocaml__Import, Jsoo_runtime, Stdlib, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var
    jsoo_exports = typeof module === "object" && module.exports || globalThis,
    runtime = globalThis.jsoo_runtime,
    cst_parseFloat$0 = "parseFloat",
    cst_parseInt$0 = "parseInt",
    caml_js_get = runtime.caml_js_get,
    caml_js_set = runtime.caml_js_set,
    caml_js_wrap_callback = runtime.caml_js_wrap_callback,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Import = global_data.Js_of_ocaml__Import,
    Stdlib = global_data.Stdlib,
    Jsoo_runtime = global_data.Jsoo_runtime,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    global = globalThis,
    Unsafe = [0, global],
    null$0 = null,
    undefined$0 = undefined;
   function return$0(_p_){return _p_;}
   function map(x, f){return x == null$0 ? null$0 : caml_call1(f, x);}
   function bind(x, f){return x == null$0 ? null$0 : caml_call1(f, x);}
   function test(x){return 1 - (x == null$0 ? 1 : 0);}
   function iter(x, f){
    var _o_ = 1 - (x == null$0 ? 1 : 0);
    return _o_ ? caml_call1(f, x) : _o_;
   }
   function case$0(x, f, g){
    return x == null$0 ? caml_call1(f, 0) : caml_call1(g, x);
   }
   function get(x, f){return x == null$0 ? caml_call1(f, 0) : x;}
   function option(x){if(! x) return null$0; var x$0 = x[1]; return x$0;}
   function to_option(x){return x == null$0 ? 0 : [0, x];}
   var
    Opt =
      [0,
       null$0,
       return$0,
       map,
       bind,
       test,
       iter,
       case$0,
       get,
       option,
       to_option];
   function return$1(_n_){return _n_;}
   function map$0(x, f){
    return x === undefined$0 ? undefined$0 : caml_call1(f, x);
   }
   function bind$0(x, f){
    return x === undefined$0 ? undefined$0 : caml_call1(f, x);
   }
   function test$0(x){return 1 - (x === undefined$0 ? 1 : 0);}
   function iter$0(x, f){
    var _m_ = 1 - (x === undefined$0 ? 1 : 0);
    return _m_ ? caml_call1(f, x) : _m_;
   }
   function case$1(x, f, g){
    return x === undefined$0 ? caml_call1(f, 0) : caml_call1(g, x);
   }
   function get$0(x, f){return x === undefined$0 ? caml_call1(f, 0) : x;}
   function option$0(x){
    if(! x) return undefined$0;
    var x$0 = x[1];
    return x$0;
   }
   function to_option$0(x){return x === undefined$0 ? 0 : [0, x];}
   var
    Optdef =
      [0,
       undefined$0,
       return$1,
       map$0,
       bind$0,
       test$0,
       iter$0,
       case$1,
       get$0,
       option$0,
       to_option$0];
   function coerce(x, f, g){
    var _l_ = caml_call1(f, x);
    return caml_call2(Opt[8], _l_, function(param){return caml_call1(g, x);});
   }
   function coerce_opt(x, f, g){
    var _k_ = caml_call2(Opt[4], x, f);
    return caml_call2(Opt[8], _k_, function(param){return caml_call1(g, x);});
   }
   var
    true$0 = true,
    false$0 = false,
    nfc = "NFC",
    nfd = "NFD",
    nfkc = "NFKC",
    nfkd = "NFKD",
    t0 = Unsafe[1],
    string_constr = t0.String,
    t1 = Unsafe[1],
    regExp = t1.RegExp,
    t2 = Unsafe[1],
    object_constructor = t2.Object;
   function object_keys(t3){return object_constructor.keys(t3);}
   var
    t5 = Unsafe[1],
    array_constructor = t5.Array,
    array_get = caml_js_get,
    array_set = caml_js_set;
   function array_map(f, t7){
    var
     cb =
       caml_js_wrap_callback
        (function(x, idx, param){return caml_call1(f, x);});
    return t7.map(cb);
   }
   function array_mapi(f, t7){
    var
     cb =
       caml_js_wrap_callback
        (function(x, idx, param){return caml_call2(f, idx, x);});
    return t7.map(cb);
   }
   function str_array(_j_){return _j_;}
   function match_result(_i_){return _i_;}
   var
    t8 = Unsafe[1],
    date_constr = t8.Date,
    t9 = Unsafe[1],
    math = t9.Math,
    t10 = Unsafe[1],
    error_constr = t10.Error,
    include = Jsoo_runtime[3],
    raise = include[1],
    exn_with_js_backtrace = include[2],
    of_exn = include[3],
    Error = include[4];
   function name(t11){return caml_string_of_jsstring(t11.name);}
   function message(t12){return caml_string_of_jsstring(t12.message);}
   function stack(t13){
    var _h_ = caml_call2(Opt[3], t13.stack, caml_string_of_jsstring);
    return caml_call1(Opt[10], _h_);
   }
   function to_string(t14){return caml_string_of_jsstring(t14.toString());}
   function raise_js_error(e){return caml_call1(raise, e);}
   function string_of_error(e){return to_string(e);}
   var
    t15 = Unsafe[1],
    JSON = t15.JSON,
    cst_parseInt = cst_parseInt$0,
    cst_parseFloat = cst_parseFloat$0;
   function decodeURI(s){var t16 = Unsafe[1]; return t16.decodeURI(s);}
   function decodeURIComponent(s){
    var t17 = Unsafe[1];
    return t17.decodeURIComponent(s);
   }
   function encodeURI(s){var t18 = Unsafe[1]; return t18.encodeURI(s);}
   function encodeURIComponent(s){
    var t19 = Unsafe[1];
    return t19.encodeURIComponent(s);
   }
   function escape(s){var t20 = Unsafe[1]; return t20.escape(s);}
   function unescape(s){var t21 = Unsafe[1]; return t21.unescape(s);}
   function isNaN(i){var t22 = Unsafe[1]; return t22.isNaN(i) | 0;}
   function parseInt(s){
    var t23 = Unsafe[1], s$0 = t23.parseInt(s);
    return isNaN(s$0) ? caml_call1(Stdlib[2], cst_parseInt) : s$0;
   }
   function parseFloat(s){
    var t24 = Unsafe[1], s$0 = t24.parseFloat(s);
    return isNaN(s$0) ? caml_call1(Stdlib[2], cst_parseFloat) : s$0;
   }
   caml_call1
    (Stdlib_Printexc[9],
     function(param){
      if(param[1] !== Error) return 0;
      var e = param[2];
      return [0, to_string(e)];
     });
   caml_call1
    (Stdlib_Printexc[9],
     function(t25){
      return t25 instanceof array_constructor
              ? 0
              : [0, caml_string_of_jsstring(t25.toString())];
     });
   var cst_function = "function";
   function export_js(field, x){
    var _f_ = caml_string_of_jsstring(typeof x);
    a:
    {
     if
      (caml_call2(Js_of_ocaml_Import[3][64], _f_, cst_function)
       && 0 < x.length){
      var _g_ = caml_js_wrap_callback(x);
      break a;
     }
     var _g_ = x;
    }
    return jsoo_exports[field] = _g_;
   }
   function export$0(field, x){
    return export_js(runtime.caml_jsstring_of_string(field), x);
   }
   function export_all(obj){
    var
     keys = object_constructor.keys(obj),
     t26 =
       caml_js_wrap_callback
        (function(key, _e_, param){return export_js(key, obj[key]);});
    return keys.forEach(t26);
   }
   var
    Js_of_ocaml_Js =
      [0,
       null$0,
       function(_d_){return _d_;},
       undefined$0,
       function(_c_){return _c_;},
       Opt,
       Optdef,
       true$0,
       false$0,
       nfd,
       nfc,
       nfkd,
       nfkc,
       string_constr,
       regExp,
       regExp,
       regExp,
       object_keys,
       array_constructor,
       array_constructor,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       math,
       error_constr,
       [0,
        to_string,
        name,
        message,
        stack,
        raise,
        exn_with_js_backtrace,
        of_exn,
        Error,
        function(_b_){return _b_;},
        function(_a_){return _a_;}],
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$0,
       export_all,
       Unsafe,
       string_of_error,
       raise_js_error,
       exn_with_js_backtrace,
       runtime.caml_js_error_of_exception,
       Error];
   runtime.caml_register_global(43, Js_of_ocaml_Js, "Js_of_ocaml__Js");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Dom
//# unitInfo: Requires: Js_of_ocaml__Js, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List;
   function list_of_nodeList(nodeList){
    var length = nodeList.length, acc = 0, t1 = 0;
    for(;;){
     if(t1 >= length) return caml_call1(Stdlib_List[10], acc);
     var
      _g_ = nodeList.item(t1),
      match = caml_call1(Js_of_ocaml_Js[5][10], _g_);
     if(match){
      var e = match[1], i = t1 + 1 | 0, acc$0 = [0, e, acc];
      acc = acc$0;
      t1 = i;
     }
     else{var i$0 = t1 + 1 | 0; t1 = i$0;}
    }
   }
   function has(t, mask){return (t & mask) === mask ? 1 : 0;}
   function add(x, y){return x | y;}
   var DocumentPosition = [0, 1, 2, 4, 8, 16, 32, has, add, add];
   function appendChild(t4, t3){t4.appendChild(t3); return 0;}
   function removeChild(t6, t5){t6.removeChild(t5); return 0;}
   function replaceChild(t9, t7, t8){t9.replaceChild(t7, t8); return 0;}
   function insertBefore(t12, t10, t11){t12.insertBefore(t10, t11); return 0;}
   function nodeType(t13){
    var match = t13.nodeType;
    if(match)
     switch(match - 1 | 0){
       case 0:
        return [0, t13];
       case 1:
        return [1, t13];
       case 2:
       case 3:
        return [2, t13];
     }
    return [3, t13];
   }
   function cast(t14, t){
    return t14.nodeType === t
            ? caml_call1(Js_of_ocaml_Js[2], t14)
            : Js_of_ocaml_Js[1];
   }
   function element(e){return cast(e, 1);}
   function text(t15){
    if(3 !== t15.nodeType && 4 !== t15.nodeType) return Js_of_ocaml_Js[1];
    return caml_call1(Js_of_ocaml_Js[2], t15);
   }
   function attr(e){return cast(e, 2);}
   var
    no_handler = Js_of_ocaml_Js[1],
    _a_ = [0, "lib/js_of_ocaml/dom.ml", 342, 67];
   function handler(f){
    return caml_call1
            (Js_of_ocaml_Js[2],
             runtime.caml_js_wrap_callback_unsafe
              (function(t19){
                var _f_ = caml_call1(Js_of_ocaml_Js[2], t19);
                if(caml_call1(Js_of_ocaml_Js[5][5], _f_)){
                 var res = caml_call1(f, t19);
                 if(1 - (res | 0)) t19.preventDefault();
                 return res;
                }
                var t18 = event, res$0 = caml_call1(f, t18);
                if(1 - (res$0 | 0)) t18.returnValue = res$0;
                return res$0;
               }));
   }
   function full_handler(f){
    return caml_call1
            (Js_of_ocaml_Js[2],
             runtime.caml_js_wrap_meth_callback_unsafe
              (function(this$0, t22){
                var _e_ = caml_call1(Js_of_ocaml_Js[2], t22);
                if(caml_call1(Js_of_ocaml_Js[5][5], _e_)){
                 var res = caml_call2(f, this$0, t22);
                 if(1 - (res | 0)) t22.preventDefault();
                 return res;
                }
                var t21 = event, res$0 = caml_call2(f, this$0, t21);
                if(1 - (res$0 | 0)) t21.returnValue = res$0;
                return res$0;
               }));
   }
   function invoke_handler(f, this$0, event){return f.call(this$0, event);}
   function eventTarget(t24){
    var
     target =
       caml_call2
        (Js_of_ocaml_Js[5][8],
         t24.target,
         function(param){
          return caml_call2
                  (Js_of_ocaml_Js[5][8],
                   t24.srcElement,
                   function(param){
                    throw caml_maybe_attach_backtrace(Stdlib[8], 1);
                   });
         }),
     t25 = Js_of_ocaml_Js[52][1];
    return target instanceof t25.Node
            ? 3
              === target.nodeType
              ? caml_call2
                (Js_of_ocaml_Js[5][8],
                 target.parentNode,
                 function(param){
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _a_], 1);
                 })
              : target
            : target;
   }
   var make = runtime.caml_jsstring_of_string, Event = [0, make];
   function addEventListenerWithOptions(t28, typ, capture, once, passive, t44){
    if(! caml_call1(Js_of_ocaml_Js[6][5], t28.addEventListener)){
     var
      t31 = "on".concat(typ),
      callback =
        function(e){
         var _b_ = [0, t44, e, [0]];
         return function(_c_, _d_){
          return runtime.caml_js_call(_b_, _c_, _d_);};
        };
     t28.attachEvent(t31, callback);
     return function(param){return t28.detachEvent(t31, callback);};
    }
    var opts = {};
    if(capture){var t37 = capture[1]; opts.capture = t37;}
    if(once){var t39 = once[1]; opts.once = t39;}
    if(passive){var t41 = passive[1]; opts.passive = t41;}
    t28.addEventListener(typ, t44, opts);
    return function(param){return t28.removeEventListener(typ, t44, opts);};
   }
   function addEventListener(e, typ, h, capt){
    return addEventListenerWithOptions(e, typ, [0, capt], 0, 0, h);
   }
   function removeEventListener(id){return caml_call1(id, 0);}
   function preventDefault(t51){
    if(caml_call1(Js_of_ocaml_Js[6][5], t51.preventDefault))
     return t51.preventDefault();
    var t53 = ! ! 0;
    return t51.returnValue = t53;
   }
   function createCustomEvent(bubbles, cancelable, detail, typ){
    var opts = {};
    if(bubbles){var x = bubbles[1], t55 = ! ! x; opts.bubbles = t55;}
    if(cancelable){
     var x$1 = cancelable[1], t57 = ! ! x$1;
     opts.cancelable = t57;
    }
    if(detail){
     var x$0 = detail[1], t59 = caml_call1(Js_of_ocaml_Js[2], x$0);
     opts.detail = t59;
    }
    var t61 = Js_of_ocaml_Js[52][1], constr = t61.CustomEvent;
    return new constr(typ, opts);
   }
   var
    Js_of_ocaml_Dom =
      [0,
       DocumentPosition,
       insertBefore,
       replaceChild,
       removeChild,
       appendChild,
       list_of_nodeList,
       nodeType,
       [0, element, text, attr],
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       Event,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       preventDefault,
       createCustomEvent];
   runtime.caml_register_global(42, Js_of_ocaml_Dom, "Js_of_ocaml__Dom");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Typed_array
//# unitInfo: Requires: Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_of_array = runtime.caml_bytes_of_array,
    caml_js_get = runtime.caml_js_get,
    caml_string_of_array = runtime.caml_string_of_array;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    t0 = Js_of_ocaml_Js[52][1],
    arrayBuffer = t0.ArrayBuffer,
    t1 = Js_of_ocaml_Js[52][1],
    int8Array = t1.Int8Array,
    t2 = Js_of_ocaml_Js[52][1],
    uint8Array = t2.Uint8Array,
    t3 = Js_of_ocaml_Js[52][1],
    int16Array = t3.Int16Array,
    t4 = Js_of_ocaml_Js[52][1],
    uint16Array = t4.Uint16Array,
    t5 = Js_of_ocaml_Js[52][1],
    int32Array = t5.Int32Array,
    t6 = Js_of_ocaml_Js[52][1],
    uint32Array = t6.Uint32Array,
    t7 = Js_of_ocaml_Js[52][1],
    float32Array = t7.Float32Array,
    t8 = Js_of_ocaml_Js[52][1],
    float64Array = t8.Float64Array;
   function set(a, i, v){return caml_call3(Js_of_ocaml_Js[21], a, i, v);}
   var
    get = caml_js_get,
    unsafe_get = caml_js_get,
    t9 = Js_of_ocaml_Js[52][1],
    dataView = t9.DataView;
   function of_arrayBuffer(t10){
    var uint8 = new uint8Array(t10);
    return caml_string_of_array(uint8);
   }
   function of_arrayBuffer$0(t12){
    var uint8 = new uint8Array(t12);
    return caml_bytes_of_array(uint8);
   }
   var
    Js_of_ocaml_Typed_array =
      [0,
       arrayBuffer,
       runtime.caml_ba_kind_of_typed_array,
       runtime.caml_ba_to_typed_array,
       runtime.caml_ba_from_typed_array,
       int8Array,
       int8Array,
       int8Array,
       int8Array,
       int8Array,
       uint8Array,
       uint8Array,
       uint8Array,
       uint8Array,
       uint8Array,
       int16Array,
       int16Array,
       int16Array,
       int16Array,
       int16Array,
       uint16Array,
       uint16Array,
       uint16Array,
       uint16Array,
       uint16Array,
       int32Array,
       int32Array,
       int32Array,
       int32Array,
       int32Array,
       uint32Array,
       uint32Array,
       uint32Array,
       uint32Array,
       uint32Array,
       float32Array,
       float32Array,
       float32Array,
       float32Array,
       float32Array,
       float64Array,
       float64Array,
       float64Array,
       float64Array,
       float64Array,
       set,
       get,
       unsafe_get,
       dataView,
       dataView,
       [0,
        runtime.bigstring_to_array_buffer,
        runtime.bigstring_to_typed_array,
        runtime.bigstring_of_array_buffer,
        runtime.bigstring_of_typed_array],
       [0, of_arrayBuffer, caml_string_of_array],
       [0,
        caml_bytes_of_array,
        runtime.caml_uint8_array_of_bytes,
        of_arrayBuffer$0]];
   runtime.caml_register_global
    (11, Js_of_ocaml_Typed_array, "Js_of_ocaml__Typed_array");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__File
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Js, Js_of_ocaml__Typed_array, Stdlib, Stdlib__Array, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Typed_array = global_data.Js_of_ocaml__Typed_array,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    t0 = Js_of_ocaml_Js[52][1],
    blob_constr = t0.Blob,
    _a_ = [0, "transparent"],
    cst_endings = "endings",
    cst_type = "type",
    _b_ = [0, "native"],
    cst_can_t_retrieve_file_name_n =
      "can't retrieve file name: not implemented";
   function filter_map(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var q = param$0[2], v = param$0[1], match = caml_call1(f, v);
     if(match){var v$0 = match[1]; return [0, v$0, filter_map(f, q)];}
     param$0 = q;
    }
   }
   function blob_raw(contentType, endings, a){
    var _e_ = 0;
    if(endings)
     var _f_ = 116179762 <= endings[1] ? _a_ : _b_, _g_ = _f_;
    else
     var _g_ = 0;
    var
     options =
       filter_map
        (function(param){
          var v = param[2], name = param[1];
          if(! v) return 0;
          var v$0 = v[1];
          return [0, [0, name, caml_jsstring_of_string(v$0)]];
         },
         [0, [0, cst_type, contentType], [0, [0, cst_endings, _g_], _e_]]),
     options$0 =
       options
        ? runtime.caml_js_object(caml_call1(Stdlib_Array[11], options))
        : Js_of_ocaml_Js[3],
     t1 = runtime.caml_js_from_array(a);
    return new blob_constr(t1, options$0);
   }
   function blob_from_string(contentType, endings, s){
    return blob_raw(contentType, endings, [0, caml_jsstring_of_string(s)]);
   }
   function blob_from_any(contentType, endings, l){
    var
     l$0 =
       caml_call2
        (Stdlib_List[20],
         function(param){
          var _d_ = param[1];
          if(155580615 === _d_){var s = param[2]; return s;}
          if(486041214 <= _d_){
           if(1037850489 <= _d_){var a = param[2]; return a;}
           var a$0 = param[2];
           return a$0;
          }
          if(288368849 <= _d_){
           var s$0 = param[2];
           return caml_jsstring_of_string(s$0);
          }
          var b = param[2];
          return b;
         },
         l);
    return blob_raw(contentType, endings, caml_call1(Stdlib_Array[11], l$0));
   }
   function filename(file){
    var match = caml_call1(Js_of_ocaml_Js[6][10], file.name);
    if(match){var name = match[1]; return name;}
    var match$0 = caml_call1(Js_of_ocaml_Js[6][10], file.fileName);
    if(! match$0)
     return caml_call1(Stdlib[2], cst_can_t_retrieve_file_name_n);
    var name$0 = match$0[1];
    return name$0;
   }
   var t6 = Js_of_ocaml_Js[52][1], doc_constr = t6.Document;
   function document(e){
    return e instanceof doc_constr
            ? caml_call1(Js_of_ocaml_Js[2], e)
            : Js_of_ocaml_Js[1];
   }
   function blob(e){
    return e instanceof blob_constr
            ? caml_call1(Js_of_ocaml_Js[2], e)
            : Js_of_ocaml_Js[1];
   }
   function string(e){
    return typeof e == "string"
            ? caml_call1(Js_of_ocaml_Js[2], e)
            : Js_of_ocaml_Js[1];
   }
   function arrayBuffer(e){
    return e instanceof Js_of_ocaml_Typed_array[1]
            ? caml_call1(Js_of_ocaml_Js[2], e)
            : Js_of_ocaml_Js[1];
   }
   var
    loadstart = caml_call1(Js_of_ocaml_Dom[14][1], "loadstart"),
    progress = caml_call1(Js_of_ocaml_Dom[14][1], "progress"),
    abort = caml_call1(Js_of_ocaml_Dom[14][1], "abort"),
    error = caml_call1(Js_of_ocaml_Dom[14][1], "error"),
    load = caml_call1(Js_of_ocaml_Dom[14][1], "load"),
    loadend = caml_call1(Js_of_ocaml_Dom[14][1], "loadend"),
    ReaderEvent = [0, loadstart, progress, abort, error, load, loadend],
    t7 = Js_of_ocaml_Js[52][1],
    fileReader = t7.FileReader,
    addEventListener = Js_of_ocaml_Dom[16],
    Js_of_ocaml_File =
      [0,
       blob_from_string,
       blob_from_any,
       [0, document, blob, function(_c_){return _c_;}, string, arrayBuffer],
       ReaderEvent,
       filename,
       fileReader,
       addEventListener];
   runtime.caml_register_global(23, Js_of_ocaml_File, "Js_of_ocaml__File");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Dom_html
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Js, Stdlib, Stdlib__List, Stdlib__Printf, Stdlib__Uchar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst$0 = '"',
    cst_a$0 = "a",
    cst_area$0 = "area",
    cst_audio$0 = "audio",
    cst_base$0 = "base",
    cst_blockquote$0 = "blockquote",
    cst_body$0 = "body",
    cst_br$0 = "br",
    cst_button$1 = "button",
    cst_canvas$0 = "canvas",
    cst_caption$0 = "caption",
    cst_code$0 = "code",
    cst_col$0 = "col",
    cst_colgroup$0 = "colgroup",
    cst_del$0 = "del",
    cst_div$0 = "div",
    cst_dl$0 = "dl",
    cst_embed$0 = "embed",
    cst_fieldset$0 = "fieldset",
    cst_form$0 = "form",
    cst_frame$0 = "frame",
    cst_frameset$0 = "frameset",
    cst_h1$0 = "h1",
    cst_h2$0 = "h2",
    cst_h3$0 = "h3",
    cst_h4$0 = "h4",
    cst_h5$0 = "h5",
    cst_h6$0 = "h6",
    cst_head$0 = "head",
    cst_hr$0 = "hr",
    cst_html$0 = "html",
    cst_iframe$0 = "iframe",
    cst_img$0 = "img",
    cst_input$1 = "input",
    cst_ins$0 = "ins",
    cst_label$0 = "label",
    cst_legend$0 = "legend",
    cst_li$0 = "li",
    cst_lib_js_of_ocaml_dom_html_m = "lib/js_of_ocaml/dom_html.ml",
    cst_link$0 = "link",
    cst_map$0 = "map",
    cst_meta$0 = "meta",
    cst_mouseout = "mouseout",
    cst_mouseover = "mouseover",
    cst_object$0 = "object",
    cst_ol$0 = "ol",
    cst_optgroup$0 = "optgroup",
    cst_option$0 = "option",
    cst_p$0 = "p",
    cst_param$0 = "param",
    cst_pre$0 = "pre",
    cst_q$0 = "q",
    cst_script$0 = "script",
    cst_select$1 = "select",
    cst_style$0 = "style",
    cst_table$0 = "table",
    cst_tbody$0 = "tbody",
    cst_td$0 = "td",
    cst_textarea$1 = "textarea",
    cst_tfoot$0 = "tfoot",
    cst_th$0 = "th",
    cst_thead$0 = "thead",
    cst_title$0 = "title",
    cst_tr$0 = "tr",
    cst_ul$0 = "ul",
    cst_video$0 = "video",
    caml_js_html_escape = runtime.caml_js_html_escape,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name$56 = cst_canvas$0,
    name$55 = cst_video$0,
    name$54 = cst_audio$0,
    name$53 = cst_iframe$0,
    name$52 = cst_frame$0,
    name$51 = cst_frameset$0,
    name$50 = cst_td$0,
    name$49 = cst_th$0,
    name$48 = cst_tr$0,
    name$47 = cst_tbody$0,
    name$46 = cst_tfoot$0,
    name$45 = cst_thead$0,
    name$44 = cst_colgroup$0,
    name$43 = cst_col$0,
    name$42 = cst_caption$0,
    name$41 = cst_table$0,
    name$40 = cst_script$0,
    name$39 = cst_area$0,
    name$38 = cst_map$0,
    name$37 = cst_param$0,
    name$36 = cst_object$0,
    name$35 = cst_img$0,
    name$34 = cst_a$0,
    name$33 = cst_del$0,
    name$32 = cst_ins$0,
    name$31 = cst_hr$0,
    name$30 = cst_br$0,
    name$29 = cst_pre$0,
    name$28 = cst_blockquote$0,
    name$27 = cst_q$0,
    name$26 = cst_h6$0,
    name$25 = cst_h5$0,
    name$24 = cst_h4$0,
    name$23 = cst_h3$0,
    name$22 = cst_h2$0,
    name$21 = cst_h1$0,
    name$20 = cst_p$0,
    name$19 = cst_embed$0,
    name$18 = cst_div$0,
    name$17 = "dialog",
    name$16 = cst_li$0,
    name$15 = cst_dl$0,
    name$14 = cst_ol$0,
    name$13 = cst_ul$0,
    name$12 = cst_legend$0,
    name$11 = cst_fieldset$0,
    name$10 = cst_label$0,
    cst_input = cst_input$1,
    name$9 = cst_option$0,
    name$8 = cst_optgroup$0,
    name$7 = cst_form$0,
    name$6 = cst_body$0,
    name$5 = cst_style$0,
    name$4 = cst_base$0,
    name$3 = cst_meta$0,
    name$2 = cst_title$0,
    name$1 = cst_link$0,
    name$0 = cst_head$0,
    name = cst_html$0,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    onIE = runtime.caml_js_on_ie(0) | 0,
    no_handler = Js_of_ocaml_Dom[9],
    handler = Js_of_ocaml_Dom[10],
    full_handler = Js_of_ocaml_Dom[11],
    invoke_handler = Js_of_ocaml_Dom[12],
    cancel = caml_call1(Js_of_ocaml_Dom[14][1], "cancel"),
    click = caml_call1(Js_of_ocaml_Dom[14][1], "click"),
    close = caml_call1(Js_of_ocaml_Dom[14][1], "close"),
    copy = caml_call1(Js_of_ocaml_Dom[14][1], "copy"),
    cut = caml_call1(Js_of_ocaml_Dom[14][1], "cut"),
    paste = caml_call1(Js_of_ocaml_Dom[14][1], "paste"),
    dblclick = caml_call1(Js_of_ocaml_Dom[14][1], "dblclick"),
    mousedown = caml_call1(Js_of_ocaml_Dom[14][1], "mousedown"),
    mouseup = caml_call1(Js_of_ocaml_Dom[14][1], "mouseup"),
    mouseover = caml_call1(Js_of_ocaml_Dom[14][1], cst_mouseover),
    mousemove = caml_call1(Js_of_ocaml_Dom[14][1], "mousemove"),
    mouseout = caml_call1(Js_of_ocaml_Dom[14][1], cst_mouseout),
    keypress = caml_call1(Js_of_ocaml_Dom[14][1], "keypress"),
    keydown = caml_call1(Js_of_ocaml_Dom[14][1], "keydown"),
    keyup = caml_call1(Js_of_ocaml_Dom[14][1], "keyup"),
    mousewheel = caml_call1(Js_of_ocaml_Dom[14][1], "mousewheel"),
    wheel = caml_call1(Js_of_ocaml_Dom[14][1], "wheel"),
    DOMMouseScroll = caml_call1(Js_of_ocaml_Dom[14][1], "DOMMouseScroll"),
    touchstart = caml_call1(Js_of_ocaml_Dom[14][1], "touchstart"),
    touchmove = caml_call1(Js_of_ocaml_Dom[14][1], "touchmove"),
    touchend = caml_call1(Js_of_ocaml_Dom[14][1], "touchend"),
    touchcancel = caml_call1(Js_of_ocaml_Dom[14][1], "touchcancel"),
    dragstart = caml_call1(Js_of_ocaml_Dom[14][1], "dragstart"),
    dragend = caml_call1(Js_of_ocaml_Dom[14][1], "dragend"),
    dragenter = caml_call1(Js_of_ocaml_Dom[14][1], "dragenter"),
    dragover = caml_call1(Js_of_ocaml_Dom[14][1], "dragover"),
    dragleave = caml_call1(Js_of_ocaml_Dom[14][1], "dragleave"),
    drag = caml_call1(Js_of_ocaml_Dom[14][1], "drag"),
    drop = caml_call1(Js_of_ocaml_Dom[14][1], "drop"),
    hashchange = caml_call1(Js_of_ocaml_Dom[14][1], "hashchange"),
    change = caml_call1(Js_of_ocaml_Dom[14][1], "change"),
    input = caml_call1(Js_of_ocaml_Dom[14][1], cst_input$1),
    timeupdate = caml_call1(Js_of_ocaml_Dom[14][1], "timeupdate"),
    submit = caml_call1(Js_of_ocaml_Dom[14][1], "submit"),
    scroll = caml_call1(Js_of_ocaml_Dom[14][1], "scroll"),
    focus = caml_call1(Js_of_ocaml_Dom[14][1], "focus"),
    blur = caml_call1(Js_of_ocaml_Dom[14][1], "blur"),
    load = caml_call1(Js_of_ocaml_Dom[14][1], "load"),
    unload = caml_call1(Js_of_ocaml_Dom[14][1], "unload"),
    beforeunload = caml_call1(Js_of_ocaml_Dom[14][1], "beforeunload"),
    resize = caml_call1(Js_of_ocaml_Dom[14][1], "resize"),
    orientationchange =
      caml_call1(Js_of_ocaml_Dom[14][1], "orientationchange"),
    popstate = caml_call1(Js_of_ocaml_Dom[14][1], "popstate"),
    error = caml_call1(Js_of_ocaml_Dom[14][1], "error"),
    abort = caml_call1(Js_of_ocaml_Dom[14][1], "abort"),
    select = caml_call1(Js_of_ocaml_Dom[14][1], cst_select$1),
    online = caml_call1(Js_of_ocaml_Dom[14][1], "online"),
    offline = caml_call1(Js_of_ocaml_Dom[14][1], "offline"),
    checking = caml_call1(Js_of_ocaml_Dom[14][1], "checking"),
    noupdate = caml_call1(Js_of_ocaml_Dom[14][1], "noupdate"),
    downloading = caml_call1(Js_of_ocaml_Dom[14][1], "downloading"),
    progress = caml_call1(Js_of_ocaml_Dom[14][1], "progress"),
    updateready = caml_call1(Js_of_ocaml_Dom[14][1], "updateready"),
    cached = caml_call1(Js_of_ocaml_Dom[14][1], "cached"),
    obsolete = caml_call1(Js_of_ocaml_Dom[14][1], "obsolete"),
    domContentLoaded = caml_call1(Js_of_ocaml_Dom[14][1], "DOMContentLoaded"),
    animationstart = caml_call1(Js_of_ocaml_Dom[14][1], "animationstart"),
    animationend = caml_call1(Js_of_ocaml_Dom[14][1], "animationend"),
    animationiteration =
      caml_call1(Js_of_ocaml_Dom[14][1], "animationiteration"),
    animationcancel = caml_call1(Js_of_ocaml_Dom[14][1], "animationcancel"),
    transitionrun = caml_call1(Js_of_ocaml_Dom[14][1], "transitionrun"),
    transitionstart = caml_call1(Js_of_ocaml_Dom[14][1], "transitionstart"),
    transitionend = caml_call1(Js_of_ocaml_Dom[14][1], "transitionend"),
    transitioncancel = caml_call1(Js_of_ocaml_Dom[14][1], "transitioncancel"),
    canplay = caml_call1(Js_of_ocaml_Dom[14][1], "canplay"),
    canplaythrough = caml_call1(Js_of_ocaml_Dom[14][1], "canplaythrough"),
    durationchange = caml_call1(Js_of_ocaml_Dom[14][1], "durationchange"),
    emptied = caml_call1(Js_of_ocaml_Dom[14][1], "emptied"),
    ended = caml_call1(Js_of_ocaml_Dom[14][1], "ended"),
    gotpointercapture =
      caml_call1(Js_of_ocaml_Dom[14][1], "gotpointercapture"),
    loadeddata = caml_call1(Js_of_ocaml_Dom[14][1], "loadeddata"),
    loadedmetadata = caml_call1(Js_of_ocaml_Dom[14][1], "loadedmetadata"),
    loadstart = caml_call1(Js_of_ocaml_Dom[14][1], "loadstart"),
    lostpointercapture =
      caml_call1(Js_of_ocaml_Dom[14][1], "lostpointercapture"),
    message = caml_call1(Js_of_ocaml_Dom[14][1], "message"),
    pause = caml_call1(Js_of_ocaml_Dom[14][1], "pause"),
    play = caml_call1(Js_of_ocaml_Dom[14][1], "play"),
    playing = caml_call1(Js_of_ocaml_Dom[14][1], "playing"),
    pointerenter = caml_call1(Js_of_ocaml_Dom[14][1], "pointerenter"),
    pointercancel = caml_call1(Js_of_ocaml_Dom[14][1], "pointercancel"),
    pointerdown = caml_call1(Js_of_ocaml_Dom[14][1], "pointerdown"),
    pointerleave = caml_call1(Js_of_ocaml_Dom[14][1], "pointerleave"),
    pointermove = caml_call1(Js_of_ocaml_Dom[14][1], "pointermove"),
    pointerout = caml_call1(Js_of_ocaml_Dom[14][1], "pointerout"),
    pointerover = caml_call1(Js_of_ocaml_Dom[14][1], "pointerover"),
    pointerup = caml_call1(Js_of_ocaml_Dom[14][1], "pointerup"),
    ratechange = caml_call1(Js_of_ocaml_Dom[14][1], "ratechange"),
    seeked = caml_call1(Js_of_ocaml_Dom[14][1], "seeked"),
    seeking = caml_call1(Js_of_ocaml_Dom[14][1], "seeking"),
    stalled = caml_call1(Js_of_ocaml_Dom[14][1], "stalled"),
    suspend = caml_call1(Js_of_ocaml_Dom[14][1], "suspend"),
    volumechange = caml_call1(Js_of_ocaml_Dom[14][1], "volumechange"),
    waiting = caml_call1(Js_of_ocaml_Dom[14][1], "waiting"),
    make = Js_of_ocaml_Dom[14][1],
    addEventListener = Js_of_ocaml_Dom[16],
    addEventListenerWithOptions = Js_of_ocaml_Dom[15],
    removeEventListener = Js_of_ocaml_Dom[17],
    createCustomEvent = Js_of_ocaml_Dom[19],
    d = "2d";
   function location_origin(loc){
    return caml_call3
            (Js_of_ocaml_Js[6][7],
             loc.origin,
             function(param){
              var
               protocol = loc.protocol,
               hostname = loc.hostname,
               port = loc.port;
              if(0 === protocol.length && 0 === hostname.length) return cst;
              var origin = protocol.concat("//", hostname);
              if(0 >= port.length) return origin;
              var t12 = loc.port;
              return origin.concat(":", t12);
             },
             function(o){return o;});
   }
   var
    window = Js_of_ocaml_Js[52][1],
    document = window.document,
    _a_ =
      [0,
       [11, "getElementById_exn: ", [3, 0, [11, " not found", 0]]],
       "getElementById_exn: %S not found"];
   function getElementById(id){
    var t15 = caml_jsstring_of_string(id), _F_ = document.getElementById(t15);
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             _F_,
             function(param){throw caml_maybe_attach_backtrace(Stdlib[8], 1);},
             function(pnode){return pnode;});
   }
   function getElementById_exn(id){
    var t17 = caml_jsstring_of_string(id), _D_ = document.getElementById(t17);
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             _D_,
             function(param){
              var _E_ = caml_call2(Stdlib_Printf[4], _a_, id);
              return caml_call1(Stdlib[2], _E_);
             },
             function(pnode){return pnode;});
   }
   function getElementById_opt(id){
    var t19 = caml_jsstring_of_string(id), _C_ = document.getElementById(t19);
    return caml_call1(Js_of_ocaml_Js[5][10], _C_);
   }
   function getElementById_coerce(id, coerce){
    var t21 = caml_jsstring_of_string(id), _A_ = document.getElementById(t21);
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             _A_,
             function(param){return 0;},
             function(e){
              var _B_ = caml_call1(coerce, e);
              return caml_call1(Js_of_ocaml_Js[5][10], _B_);
             });
   }
   function createElement(doc, name){
    var t23 = caml_jsstring_of_string(name);
    return doc.createElement(t23);
   }
   var
    createElementSyntax = [0, 785140586],
    cst_select = cst_select$1,
    cst_textarea = cst_textarea$1,
    cst_button = cst_button$1,
    cst_sub = "sub",
    cst_sup = "sup",
    cst_span = "span",
    cst_tt = "tt",
    cst_i = "i",
    cst_b = "b",
    cst_big = "big",
    cst_small = "small",
    cst_em = "em",
    cst_strong = "strong",
    cst_cite = "cite",
    cst_dfn = "dfn",
    cst_code = cst_code$0,
    cst_samp = "samp",
    cst_kbd = "kbd",
    cst_var = "var",
    cst_abbr = "abbr",
    cst_dd = "dd",
    cst_dt = "dt",
    cst_noscript = "noscript",
    cst_address = "address";
   function unsafeCreateElementEx(type, name, doc, elt){
    for(;;){
     if(0 === type && 0 === name) return createElement(doc, elt);
     var _u_ = createElementSyntax[1];
     if(785140586 !== _u_){
      if(982028505 <= _u_){
       var
        t29 = Js_of_ocaml_Js[18],
        t32 = new t29,
        t31 = caml_jsstring_of_string(elt);
       t32.push("<", t31);
       if(type){
        var v$0 = type[1], t34 = caml_js_html_escape(v$0);
        t32.push(' type="', t34, cst$0);
       }
       if(name){
        var v = name[1], t38 = caml_js_html_escape(v);
        t32.push(' name="', t38, cst$0);
       }
       t32.push(">");
       var t45 = t32.join(cst);
       return doc.createElement(t45);
      }
      var res = createElement(doc, elt);
      if(type){var t25 = type[1]; res.type = t25;}
      if(name){var t27 = name[1]; res.name = t27;}
      return res;
     }
     try{
      var
       t49 = document.createElement('<input name="x">'),
       t50 = t49.tagName,
       _x_ = t50.toLowerCase() == cst_input$1 ? 1 : 0,
       _y_ = _x_ ? t49.name == "x" ? 1 : 0 : _x_,
       _v_ = _y_;
     }
     catch(_z_){var _v_ = 0;}
     var _w_ = _v_ ? 982028505 : -1003883683;
     createElementSyntax[1] = _w_;
    }
   }
   function createHtml(doc){return createElement(doc, name);}
   function createHead(doc){return createElement(doc, name$0);}
   function createLink(doc){return createElement(doc, name$1);}
   function createTitle(doc){return createElement(doc, name$2);}
   function createMeta(doc){return createElement(doc, name$3);}
   function createBase(doc){return createElement(doc, name$4);}
   function createStyle(doc){return createElement(doc, name$5);}
   function createBody(doc){return createElement(doc, name$6);}
   function createForm(doc){return createElement(doc, name$7);}
   function createOptgroup(doc){return createElement(doc, name$8);}
   function createOption(doc){return createElement(doc, name$9);}
   function createSelect(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_select);
   }
   function createInput(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_input);
   }
   function createTextarea(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_textarea);
   }
   function createButton(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_button);
   }
   function createLabel(doc){return createElement(doc, name$10);}
   function createFieldset(doc){return createElement(doc, name$11);}
   function createLegend(doc){return createElement(doc, name$12);}
   function createUl(doc){return createElement(doc, name$13);}
   function createOl(doc){return createElement(doc, name$14);}
   function createDl(doc){return createElement(doc, name$15);}
   function createLi(doc){return createElement(doc, name$16);}
   function createDialog(doc){return createElement(doc, name$17);}
   function createDiv(doc){return createElement(doc, name$18);}
   function createEmbed(doc){return createElement(doc, name$19);}
   function createP(doc){return createElement(doc, name$20);}
   function createH1(doc){return createElement(doc, name$21);}
   function createH2(doc){return createElement(doc, name$22);}
   function createH3(doc){return createElement(doc, name$23);}
   function createH4(doc){return createElement(doc, name$24);}
   function createH5(doc){return createElement(doc, name$25);}
   function createH6(doc){return createElement(doc, name$26);}
   function createQ(doc){return createElement(doc, name$27);}
   function createBlockquote(doc){return createElement(doc, name$28);}
   function createPre(doc){return createElement(doc, name$29);}
   function createBr(doc){return createElement(doc, name$30);}
   function createHr(doc){return createElement(doc, name$31);}
   function createIns(doc){return createElement(doc, name$32);}
   function createDel(doc){return createElement(doc, name$33);}
   function createA(doc){return createElement(doc, name$34);}
   function createImg(doc){return createElement(doc, name$35);}
   function createObject(doc){return createElement(doc, name$36);}
   function createParam(doc){return createElement(doc, name$37);}
   function createMap(doc){return createElement(doc, name$38);}
   function createArea(doc){return createElement(doc, name$39);}
   function createScript(doc){return createElement(doc, name$40);}
   function createTable(doc){return createElement(doc, name$41);}
   function createCaption(doc){return createElement(doc, name$42);}
   function createCol(doc){return createElement(doc, name$43);}
   function createColgroup(doc){return createElement(doc, name$44);}
   function createThead(doc){return createElement(doc, name$45);}
   function createTfoot(doc){return createElement(doc, name$46);}
   function createTbody(doc){return createElement(doc, name$47);}
   function createTr(doc){return createElement(doc, name$48);}
   function createTh(doc){return createElement(doc, name$49);}
   function createTd(doc){return createElement(doc, name$50);}
   function createSub(doc){return createElement(doc, cst_sub);}
   function createSup(doc){return createElement(doc, cst_sup);}
   function createSpan(doc){return createElement(doc, cst_span);}
   function createTt(doc){return createElement(doc, cst_tt);}
   function createI(doc){return createElement(doc, cst_i);}
   function createB(doc){return createElement(doc, cst_b);}
   function createBig(doc){return createElement(doc, cst_big);}
   function createSmall(doc){return createElement(doc, cst_small);}
   function createEm(doc){return createElement(doc, cst_em);}
   function createStrong(doc){return createElement(doc, cst_strong);}
   function createCite(doc){return createElement(doc, cst_cite);}
   function createDfn(doc){return createElement(doc, cst_dfn);}
   function createCode(doc){return createElement(doc, cst_code);}
   function createSamp(doc){return createElement(doc, cst_samp);}
   function createKbd(doc){return createElement(doc, cst_kbd);}
   function createVar(doc){return createElement(doc, cst_var);}
   function createAbbr(doc){return createElement(doc, cst_abbr);}
   function createDd(doc){return createElement(doc, cst_dd);}
   function createDt(doc){return createElement(doc, cst_dt);}
   function createNoscript(doc){return createElement(doc, cst_noscript);}
   function createAddress(doc){return createElement(doc, cst_address);}
   function createFrameset(doc){return createElement(doc, name$51);}
   function createFrame(doc){return createElement(doc, name$52);}
   function createIframe(doc){return createElement(doc, name$53);}
   function createAudio(doc){return createElement(doc, name$54);}
   function createVideo(doc){return createElement(doc, name$55);}
   var
    Canvas_not_available =
      [248,
       "Js_of_ocaml__Dom_html.Canvas_not_available",
       runtime.caml_fresh_oo_id(0)];
   function createCanvas(doc){
    var t52 = createElement(doc, name$56);
    if(1 - caml_call1(Js_of_ocaml_Js[5][5], t52.getContext))
     throw caml_maybe_attach_backtrace(Canvas_not_available, 1);
    return t52;
   }
   var
    t53 = Js_of_ocaml_Js[52][1],
    html_element = t53.HTMLElement,
    _b_ = caml_call1(Js_of_ocaml_Js[4], html_element),
    _d_ = [0, cst_lib_js_of_ocaml_dom_html_m, 2860, 58],
    _c_ = [0, cst_lib_js_of_ocaml_dom_html_m, 2859, 61],
    cst_video = cst_video$0,
    cst_audio = cst_audio$0,
    cst_ul = cst_ul$0,
    cst_tr = cst_tr$0,
    cst_title = cst_title$0,
    cst_thead = cst_thead$0,
    cst_th = cst_th$0,
    cst_tfoot = cst_tfoot$0,
    cst_textarea$0 = cst_textarea$1,
    cst_td = cst_td$0,
    cst_tbody = cst_tbody$0,
    cst_table = cst_table$0,
    cst_style = cst_style$0,
    cst_select$0 = cst_select$1,
    cst_script = cst_script$0,
    cst_q = cst_q$0,
    cst_pre = cst_pre$0,
    cst_param = cst_param$0,
    cst_p = cst_p$0,
    cst_option = cst_option$0,
    cst_optgroup = cst_optgroup$0,
    cst_ol = cst_ol$0,
    cst_object = cst_object$0,
    cst_meta = cst_meta$0,
    cst_map = cst_map$0,
    cst_link = cst_link$0,
    cst_li = cst_li$0,
    cst_legend = cst_legend$0,
    cst_label = cst_label$0,
    cst_ins = cst_ins$0,
    cst_input$0 = cst_input$1,
    cst_img = cst_img$0,
    cst_iframe = cst_iframe$0,
    cst_html = cst_html$0,
    cst_hr = cst_hr$0,
    cst_head = cst_head$0,
    cst_h6 = cst_h6$0,
    cst_h5 = cst_h5$0,
    cst_h4 = cst_h4$0,
    cst_h3 = cst_h3$0,
    cst_h2 = cst_h2$0,
    cst_h1 = cst_h1$0,
    cst_frame = cst_frame$0,
    cst_frameset = cst_frameset$0,
    cst_form = cst_form$0,
    cst_embed = cst_embed$0,
    cst_fieldset = cst_fieldset$0,
    cst_dl = cst_dl$0,
    cst_div = cst_div$0,
    cst_del = cst_del$0,
    cst_colgroup = cst_colgroup$0,
    cst_col = cst_col$0,
    cst_caption = cst_caption$0,
    cst_canvas = cst_canvas$0,
    cst_button$0 = cst_button$1,
    cst_br = cst_br$0,
    cst_body = cst_body$0,
    cst_blockquote = cst_blockquote$0,
    cst_base = cst_base$0,
    cst_area = cst_area$0,
    cst_a = cst_a$0,
    element =
      caml_call1(Js_of_ocaml_Js[6][5], _b_)
       ? function
        (e){
         return e instanceof html_element
                 ? caml_call1(Js_of_ocaml_Js[2], e)
                 : Js_of_ocaml_Js[1];
        }
       : function
        (t54){
         var _t_ = caml_call1(Js_of_ocaml_Js[4], t54.innerHTML);
         return caml_call1(Js_of_ocaml_Js[6][5], _t_)
                 ? caml_call1(Js_of_ocaml_Js[2], t54)
                 : Js_of_ocaml_Js[1];
        };
   function unsafeCoerce(tag, t55){
    var t56 = t55.tagName;
    return t56.toLowerCase() == caml_jsstring_of_string(tag)
            ? caml_call1(Js_of_ocaml_Js[2], t55)
            : Js_of_ocaml_Js[1];
   }
   function a(e){return unsafeCoerce(cst_a, e);}
   function area(e){return unsafeCoerce(cst_area, e);}
   function base(e){return unsafeCoerce(cst_base, e);}
   function blockquote(e){return unsafeCoerce(cst_blockquote, e);}
   function body(e){return unsafeCoerce(cst_body, e);}
   function br(e){return unsafeCoerce(cst_br, e);}
   function button(e){return unsafeCoerce(cst_button$0, e);}
   function canvas(e){return unsafeCoerce(cst_canvas, e);}
   function caption(e){return unsafeCoerce(cst_caption, e);}
   function col(e){return unsafeCoerce(cst_col, e);}
   function colgroup(e){return unsafeCoerce(cst_colgroup, e);}
   function del(e){return unsafeCoerce(cst_del, e);}
   function div(e){return unsafeCoerce(cst_div, e);}
   function dl(e){return unsafeCoerce(cst_dl, e);}
   function fieldset(e){return unsafeCoerce(cst_fieldset, e);}
   function embed(e){return unsafeCoerce(cst_embed, e);}
   function form(e){return unsafeCoerce(cst_form, e);}
   function frameset(e){return unsafeCoerce(cst_frameset, e);}
   function frame(e){return unsafeCoerce(cst_frame, e);}
   function h1(e){return unsafeCoerce(cst_h1, e);}
   function h2(e){return unsafeCoerce(cst_h2, e);}
   function h3(e){return unsafeCoerce(cst_h3, e);}
   function h4(e){return unsafeCoerce(cst_h4, e);}
   function h5(e){return unsafeCoerce(cst_h5, e);}
   function h6(e){return unsafeCoerce(cst_h6, e);}
   function head(e){return unsafeCoerce(cst_head, e);}
   function hr(e){return unsafeCoerce(cst_hr, e);}
   function html(e){return unsafeCoerce(cst_html, e);}
   function iframe(e){return unsafeCoerce(cst_iframe, e);}
   function img(e){return unsafeCoerce(cst_img, e);}
   function input$0(e){return unsafeCoerce(cst_input$0, e);}
   function ins(e){return unsafeCoerce(cst_ins, e);}
   function label(e){return unsafeCoerce(cst_label, e);}
   function legend(e){return unsafeCoerce(cst_legend, e);}
   function li(e){return unsafeCoerce(cst_li, e);}
   function link(e){return unsafeCoerce(cst_link, e);}
   function map(e){return unsafeCoerce(cst_map, e);}
   function meta(e){return unsafeCoerce(cst_meta, e);}
   function object(e){return unsafeCoerce(cst_object, e);}
   function ol(e){return unsafeCoerce(cst_ol, e);}
   function optgroup(e){return unsafeCoerce(cst_optgroup, e);}
   function option(e){return unsafeCoerce(cst_option, e);}
   function p(e){return unsafeCoerce(cst_p, e);}
   function pre(e){return unsafeCoerce(cst_pre, e);}
   function q(e){return unsafeCoerce(cst_q, e);}
   function script(e){return unsafeCoerce(cst_script, e);}
   function select$0(e){return unsafeCoerce(cst_select$0, e);}
   function style(e){return unsafeCoerce(cst_style, e);}
   function table(e){return unsafeCoerce(cst_table, e);}
   function tbody(e){return unsafeCoerce(cst_tbody, e);}
   function td(e){return unsafeCoerce(cst_td, e);}
   function textarea(e){return unsafeCoerce(cst_textarea$0, e);}
   function tfoot(e){return unsafeCoerce(cst_tfoot, e);}
   function th(e){return unsafeCoerce(cst_th, e);}
   function thead(e){return unsafeCoerce(cst_thead, e);}
   function title(e){return unsafeCoerce(cst_title, e);}
   function tr(e){return unsafeCoerce(cst_tr, e);}
   function ul(e){return unsafeCoerce(cst_ul, e);}
   function audio(e){return unsafeCoerce(cst_audio, e);}
   function video(e){return unsafeCoerce(cst_video, e);}
   function unsafeCoerceEvent(constr, ev){
    var _s_ = caml_call1(Js_of_ocaml_Js[4], constr);
    if(caml_call1(Js_of_ocaml_Js[6][5], _s_) && ev instanceof constr)
     return caml_call1(Js_of_ocaml_Js[2], ev);
    return Js_of_ocaml_Js[1];
   }
   function mouseEvent(ev){
    var t57 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t57.MouseEvent, ev);
   }
   function keyboardEvent(ev){
    var t58 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t58.KeyboardEvent, ev);
   }
   function wheelEvent(ev){
    var t59 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t59.WheelEvent, ev);
   }
   function mouseScrollEvent(ev){
    var t60 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t60.MouseScrollEvent, ev);
   }
   function popStateEvent(ev){
    var t61 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t61.PopStateEvent, ev);
   }
   function messageEvent(ev){
    var t62 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t62.MessageEvent, ev);
   }
   var eventTarget = Js_of_ocaml_Dom[13];
   function eventRelatedTarget(t64){
    return caml_call2
            (Js_of_ocaml_Js[6][8],
             t64.relatedTarget,
             function(param){
              var match = caml_string_of_jsstring(t64.type);
              return match !== cst_mouseout
                      ? match
                        !== cst_mouseover
                        ? Js_of_ocaml_Js[1]
                        : caml_call2
                          (Js_of_ocaml_Js[6][8],
                           t64.fromElement,
                           function(param){
                            throw caml_maybe_attach_backtrace
                                   ([0, Assert_failure, _c_], 1);
                           })
                      : caml_call2
                        (Js_of_ocaml_Js[6][8],
                         t64.toElement,
                         function(param){
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _d_], 1);
                         });
             });
   }
   function eventAbsolutePosition(t72){
    var body = document.body, html = document.documentElement;
    return [0,
            (t72.clientX + body.scrollLeft | 0) + html.scrollLeft | 0,
            (t72.clientY + body.scrollTop | 0) + html.scrollTop | 0];
   }
   function eventAbsolutePosition$0(t76){
    return caml_call3
            (Js_of_ocaml_Js[6][7],
             t76.pageX,
             function(param){return eventAbsolutePosition(t76);},
             function(x){
              return caml_call3
                      (Js_of_ocaml_Js[6][7],
                       t76.pageY,
                       function(param){return eventAbsolutePosition(t76);},
                       function(y){return [0, x, y];});
             });
   }
   function elementClientPosition(t77){
    var
     t83 = t77.getBoundingClientRect(),
     body = document.body,
     html = document.documentElement;
    return [0,
            ((t83.left | 0) - body.clientLeft | 0) - html.clientLeft | 0,
            ((t83.top | 0) - body.clientTop | 0) - html.clientTop | 0];
   }
   function getDocumentScroll(param){
    var body = document.body, html = document.documentElement;
    return [0,
            body.scrollLeft + html.scrollLeft | 0,
            body.scrollTop + html.scrollTop | 0];
   }
   function buttonPressed(t93){
    return caml_call3
            (Js_of_ocaml_Js[6][7],
             t93.which,
             function(param){
              var switcher = t93.button - 1 | 0;
              if(3 >= switcher >>> 0)
               switch(switcher){
                 case 0:
                  return 1;
                 case 1:
                  return 3;
                 case 2: break;
                 default: return 2;
               }
              return 0;
             },
             function(x){return x;});
   }
   function addMousewheelEventListenerWith(e, capture, once, passive, h){
    return caml_call6
            (addEventListenerWithOptions,
             e,
             wheel,
             capture,
             once,
             passive,
             caml_call1
              (handler,
               function(t94){
                var
                 dx =
                   (-
                   caml_call2
                    (Js_of_ocaml_Js[6][8],
                     t94.wheelDeltaX,
                     function(param){return 0;})
                   | 0)
                   / 40
                   | 0,
                 dy =
                   (-
                   caml_call2
                    (Js_of_ocaml_Js[6][8],
                     t94.wheelDeltaY,
                     function(param){return t94.wheelDelta;})
                   | 0)
                   / 40
                   | 0;
                return caml_call3(h, t94, dx, dy);
               }));
   }
   function addMousewheelEventListener(e, h, capt){
    return addMousewheelEventListenerWith(e, [0, capt], 0, 0, h);
   }
   function try_code(v){
    var
     match = caml_string_of_jsstring(v),
     switch$0 = caml_string_compare(match, "KeyH");
    if(0 <= switch$0){
     if(0 >= switch$0) return 8;
     var switch$1 = caml_string_compare(match, "Numpad4");
     if(0 <= switch$1){
      if(0 >= switch$1) return 72;
      var switch$2 = caml_string_compare(match, "PageUp");
      if(0 <= switch$2){
       if(0 >= switch$2) return 98;
       var switch$3 = caml_string_compare(match, "ShiftRight");
       if(0 <= switch$3){
        if(0 >= switch$3) return 91;
        if(match === "Slash") return 55;
        if(match === "Space") return 41;
        if(match === "Tab") return 39;
        if(match === "VolumeDown") return 103;
        if(match === "VolumeMute") return 102;
        if(match === "VolumeUp") return 104;
       }
       else{
        if(match === "Pause") return 123;
        if(match === "Period") return 54;
        if(match === "PrintScreen") return 120;
        if(match === "Quote") return 50;
        if(match === "ScrollLock") return 119;
        if(match === "Semicolon") return 49;
        if(match === "ShiftLeft") return 90;
       }
      }
      else{
       var switch$4 = caml_string_compare(match, "NumpadDivide");
       if(0 <= switch$4){
        if(0 >= switch$4) return 84;
        if(match === "NumpadEnter") return 83;
        if(match === "NumpadEqual") return 82;
        if(match === "NumpadMultiply") return 78;
        if(match === "NumpadSubtract") return 79;
        if(match === "OSLeft") return 117;
        if(match === "OSRight") return 118;
        if(match === "PageDown") return 99;
       }
       else{
        if(match === "Numpad5") return 73;
        if(match === "Numpad6") return 74;
        if(match === "Numpad7") return 75;
        if(match === "Numpad8") return 76;
        if(match === "Numpad9") return 77;
        if(match === "NumpadAdd") return 80;
        if(match === "NumpadDecimal") return 81;
       }
      }
     }
     else{
      var switch$5 = caml_string_compare(match, "KeyX");
      if(0 <= switch$5){
       if(0 >= switch$5) return 24;
       var switch$6 = caml_string_compare(match, "MetaRight");
       if(0 <= switch$6){
        if(0 >= switch$6) return 89;
        if(match === "Minus") return 37;
        if(match === "NumLock") return 85;
        if(match === "Numpad0") return 68;
        if(match === "Numpad1") return 69;
        if(match === "Numpad2") return 70;
        if(match === "Numpad3") return 71;
       }
       else{
        if(match === "KeyY") return 25;
        if(match === "KeyZ") return 26;
        if(match === "MediaPlayPause") return 107;
        if(match === "MediaStop") return 108;
        if(match === "MediaTrackNext") return 106;
        if(match === "MediaTrackPrevious") return 105;
        if(match === "MetaLeft") return 88;
       }
      }
      else{
       var switch$7 = caml_string_compare(match, "KeyP");
       if(0 <= switch$7){
        if(0 >= switch$7) return 16;
        if(match === "KeyQ") return 17;
        if(match === "KeyR") return 18;
        if(match === "KeyS") return 19;
        if(match === "KeyT") return 20;
        if(match === "KeyU") return 21;
        if(match === "KeyV") return 22;
        if(match === "KeyW") return 23;
       }
       else{
        if(match === "KeyI") return 9;
        if(match === "KeyJ") return 10;
        if(match === "KeyK") return 11;
        if(match === "KeyL") return 12;
        if(match === "KeyM") return 13;
        if(match === "KeyN") return 14;
        if(match === "KeyO") return 15;
       }
      }
     }
    }
    else{
     var switch$8 = caml_string_compare(match, "Digit6");
     if(0 <= switch$8){
      if(0 >= switch$8) return 33;
      var switch$9 = caml_string_compare(match, "F6");
      if(0 <= switch$9){
       if(0 >= switch$9) return 61;
       var switch$10 = caml_string_compare(match, "KeyA");
       if(0 <= switch$10){
        if(0 >= switch$10) return 1;
        if(match === "KeyB") return 2;
        if(match === "KeyC") return 3;
        if(match === "KeyD") return 4;
        if(match === "KeyE") return 5;
        if(match === "KeyF") return 6;
        if(match === "KeyG") return 7;
       }
       else{
        if(match === "F7") return 62;
        if(match === "F8") return 63;
        if(match === "F9") return 64;
        if(match === "Home") return 100;
        if(match === "Insert") return 44;
        if(match === "IntlBackslash") return 121;
        if(match === "IntlYen") return 122;
       }
      }
      else{
       var switch$11 = caml_string_compare(match, "F1");
       if(0 <= switch$11){
        if(0 >= switch$11) return 56;
        if(match === "F10") return 65;
        if(match === "F11") return 66;
        if(match === "F12") return 67;
        if(match === "F2") return 57;
        if(match === "F3") return 58;
        if(match === "F4") return 59;
        if(match === "F5") return 60;
       }
       else{
        if(match === "Digit7") return 34;
        if(match === "Digit8") return 35;
        if(match === "Digit9") return 36;
        if(match === "End") return 101;
        if(match === "Enter") return 40;
        if(match === "Equal") return 38;
        if(match === "Escape") return 42;
       }
      }
     }
     else{
      var switch$12 = caml_string_compare(match, "BrowserRefresh");
      if(0 <= switch$12){
       if(0 >= switch$12) return 113;
       var switch$13 = caml_string_compare(match, "Delete");
       if(0 <= switch$13){
        if(0 >= switch$13) return 45;
        if(match === "Digit0") return 27;
        if(match === "Digit1") return 28;
        if(match === "Digit2") return 29;
        if(match === "Digit3") return 30;
        if(match === "Digit4") return 31;
        if(match === "Digit5") return 32;
       }
       else{
        if(match === "BrowserSearch") return 110;
        if(match === "BrowserStop") return 114;
        if(match === "CapsLock") return 46;
        if(match === "Comma") return 53;
        if(match === "ContextMenu") return 109;
        if(match === "ControlLeft") return 86;
        if(match === "ControlRight") return 87;
       }
      }
      else{
       var switch$14 = caml_string_compare(match, "Backslash");
       if(0 <= switch$14){
        if(0 >= switch$14) return 52;
        if(match === "Backspace") return 43;
        if(match === "BracketLeft") return 47;
        if(match === "BracketRight") return 48;
        if(match === "BrowserBack") return 116;
        if(match === "BrowserFavorites") return 112;
        if(match === "BrowserForward") return 115;
        if(match === "BrowserHome") return 111;
       }
       else{
        if(match === "AltLeft") return 92;
        if(match === "AltRight") return 93;
        if(match === "ArrowDown") return 97;
        if(match === "ArrowLeft") return 94;
        if(match === "ArrowRight") return 95;
        if(match === "ArrowUp") return 96;
        if(match === "Backquote") return 51;
       }
      }
     }
    }
    return 0;
   }
   function try_key_code_normal(param){
    var switcher = param - 8 | 0;
    if(214 >= switcher >>> 0){
     var _r_ = switcher;
     if(67 <= _r_)
      switch(_r_){
        case 67:
         return 11;
        case 68:
         return 12;
        case 69:
         return 13;
        case 70:
         return 14;
        case 71:
         return 15;
        case 72:
         return 16;
        case 73:
         return 17;
        case 74:
         return 18;
        case 75:
         return 19;
        case 76:
         return 20;
        case 77:
         return 21;
        case 78:
         return 22;
        case 79:
         return 23;
        case 80:
         return 24;
        case 81:
         return 25;
        case 82:
         return 26;
        case 85:
         return 109;
        case 104:
         return 56;
        case 105:
         return 57;
        case 106:
         return 58;
        case 107:
         return 59;
        case 108:
         return 60;
        case 109:
         return 61;
        case 110:
         return 62;
        case 111:
         return 63;
        case 112:
         return 64;
        case 113:
         return 65;
        case 114:
         return 66;
        case 115:
         return 67;
        case 137:
         return 119;
        case 178:
         return 49;
        case 179:
         return 38;
        case 180:
         return 53;
        case 181:
         return 37;
        case 182:
         return 54;
        case 183:
         return 55;
        case 184:
         return 51;
        case 211:
         return 47;
        case 212:
         return 52;
        case 213:
         return 48;
        case 214:
         return 50;
      }
     else
      switch(_r_){
        case 0:
         return 43;
        case 1:
         return 39;
        case 5:
         return 40;
        case 11:
         return 123;
        case 12:
         return 46;
        case 19:
         return 42;
        case 24:
         return 41;
        case 25:
         return 98;
        case 26:
         return 99;
        case 27:
         return 101;
        case 28:
         return 100;
        case 29:
         return 94;
        case 30:
         return 96;
        case 31:
         return 95;
        case 32:
         return 97;
        case 34:
         return 120;
        case 37:
         return 44;
        case 38:
         return 45;
        case 40:
         return 27;
        case 41:
         return 28;
        case 42:
         return 29;
        case 43:
         return 30;
        case 44:
         return 31;
        case 45:
         return 32;
        case 46:
         return 33;
        case 47:
         return 34;
        case 48:
         return 35;
        case 49:
         return 36;
        case 57:
         return 1;
        case 58:
         return 2;
        case 59:
         return 3;
        case 60:
         return 4;
        case 61:
         return 5;
        case 62:
         return 6;
        case 63:
         return 7;
        case 64:
         return 8;
        case 65:
         return 9;
        case 66:
         return 10;
      }
    }
    return 0;
   }
   function make_unidentified(param){return 0;}
   function of_event(evt){
    var value = evt.keyCode, switcher = evt.location - 1 | 0;
    if(2 < switcher >>> 0)
     var f = make_unidentified;
    else
     switch(switcher){
       case 0:
        var
         value$3 = evt.keyCode,
         f =
           function(v){
            if(v) return v;
            if(19 <= value$3){
             if(91 === value$3) return 88;
            }
            else if(16 <= value$3)
             switch(value$3 - 16 | 0){
               case 0:
                return 90;
               case 1:
                return 86;
               default: return 92;
             }
            return 0;
           };
        break;
       case 1:
        var
         value$2 = evt.keyCode,
         f =
           function(v){
            if(v) return v;
            if(19 <= value$2){
             if(91 === value$2) return 89;
            }
            else if(16 <= value$2)
             switch(value$2 - 16 | 0){
               case 0:
                return 91;
               case 1:
                return 87;
               default: return 93;
             }
            return 0;
           };
        break;
       default:
        var
         value$1 = evt.keyCode,
         f =
           function(v){
            if(v) return v;
            if(47 <= value$1){
             var switcher = value$1 - 96 | 0;
             if(15 >= switcher >>> 0)
              switch(switcher){
                case 0:
                 return 68;
                case 1:
                 return 69;
                case 2:
                 return 70;
                case 3:
                 return 71;
                case 4:
                 return 72;
                case 5:
                 return 73;
                case 6:
                 return 74;
                case 7:
                 return 75;
                case 8:
                 return 76;
                case 9:
                 return 77;
                case 10:
                 return 78;
                case 11:
                 return 80;
                case 12: break;
                case 13:
                 return 79;
                case 14:
                 return 81;
                default: return 84;
              }
            }
            else if(12 <= value$1)
             switch(value$1 - 12 | 0){
               case 0:
                return 73;
               case 1:
                return 83;
               case 21:
                return 77;
               case 22:
                return 71;
               case 23:
                return 69;
               case 24:
                return 75;
               case 25:
                return 72;
               case 26:
                return 76;
               case 27:
                return 74;
               case 28:
                return 70;
               case 33:
                return 68;
               case 34:
                return 81;
             }
            return 0;
           };
     }
    var
     value$0 = evt.code,
     x =
       caml_call3(Js_of_ocaml_Js[6][7], value$0, make_unidentified, try_code),
     x$0 = f(x);
    return x$0 ? x$0 : try_key_code_normal(value);
   }
   function char_of_int(value){
    if(0 >= value) return 0;
    try{var _p_ = [0, caml_call1(Stdlib_Uchar[8], value)]; return _p_;}
    catch(_q_){return 0;}
   }
   function empty_string(param){return cst;}
   function none(param){return 0;}
   function of_event$0(t100){
    var
     t101 = caml_call2(Js_of_ocaml_Js[6][8], t100.key, empty_string),
     match = t101.length;
    return 0 === match
            ? caml_call3
              (Js_of_ocaml_Js[6][7], t100.charCode, none, char_of_int)
            : 1 === match ? char_of_int(t101.charCodeAt(0) | 0) : 0;
   }
   function element$0(_o_){return _o_;}
   function tagged(t105){
    var
     t106 = t105.tagName,
     tag = runtime.caml_string_of_jsbytes(t106.toLowerCase());
    if(0 === runtime.caml_ml_string_length(tag)) return [62, t105];
    var switcher = runtime.caml_string_unsafe_get(tag, 0) - 97 | 0;
    if(21 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return tag !== cst_a$0
                ? tag
                  !== cst_area$0
                  ? tag !== cst_audio$0 ? [62, t105] : [2, t105]
                  : [1, t105]
                : [0, t105];
       case 1:
        return tag !== cst_base$0
                ? tag
                  !== cst_blockquote$0
                  ? tag
                    !== cst_body$0
                    ? tag
                      !== cst_br$0
                      ? tag !== cst_button$1 ? [62, t105] : [7, t105]
                      : [6, t105]
                    : [5, t105]
                  : [4, t105]
                : [3, t105];
       case 2:
        return tag !== cst_canvas$0
                ? tag
                  !== cst_caption$0
                  ? tag
                    !== cst_col$0
                    ? tag !== cst_colgroup$0 ? [62, t105] : [11, t105]
                    : [10, t105]
                  : [9, t105]
                : [8, t105];
       case 3:
        return tag !== cst_del$0
                ? tag
                  !== cst_div$0
                  ? tag !== cst_dl$0 ? [62, t105] : [15, t105]
                  : [14, t105]
                : [12, t105];
       case 4:
        return tag !== cst_embed$0 ? [62, t105] : [16, t105];
       case 5:
        return tag !== cst_fieldset$0
                ? tag
                  !== cst_form$0
                  ? tag
                    !== cst_frame$0
                    ? tag !== cst_frameset$0 ? [62, t105] : [19, t105]
                    : [20, t105]
                  : [18, t105]
                : [17, t105];
       case 7:
        return tag !== cst_h1$0
                ? tag
                  !== cst_h2$0
                  ? tag
                    !== cst_h3$0
                    ? tag
                      !== cst_h4$0
                      ? tag
                        !== cst_h5$0
                        ? tag
                          !== cst_h6$0
                          ? tag
                            !== cst_head$0
                            ? tag
                              !== cst_hr$0
                              ? tag !== cst_html$0 ? [62, t105] : [29, t105]
                              : [28, t105]
                            : [27, t105]
                          : [26, t105]
                        : [25, t105]
                      : [24, t105]
                    : [23, t105]
                  : [22, t105]
                : [21, t105];
       case 8:
        return tag !== cst_iframe$0
                ? tag
                  !== cst_img$0
                  ? tag
                    !== cst_input$1
                    ? tag !== cst_ins$0 ? [62, t105] : [33, t105]
                    : [32, t105]
                  : [31, t105]
                : [30, t105];
       case 11:
        return tag !== cst_label$0
                ? tag
                  !== cst_legend$0
                  ? tag
                    !== cst_li$0
                    ? tag !== cst_link$0 ? [62, t105] : [37, t105]
                    : [36, t105]
                  : [35, t105]
                : [34, t105];
       case 12:
        return tag !== cst_map$0
                ? tag !== cst_meta$0 ? [62, t105] : [39, t105]
                : [38, t105];
       case 14:
        return tag !== cst_object$0
                ? tag
                  !== cst_ol$0
                  ? tag
                    !== cst_optgroup$0
                    ? tag !== cst_option$0 ? [62, t105] : [43, t105]
                    : [42, t105]
                  : [41, t105]
                : [40, t105];
       case 15:
        return tag !== cst_p$0
                ? tag
                  !== cst_param$0
                  ? tag !== cst_pre$0 ? [62, t105] : [46, t105]
                  : [45, t105]
                : [44, t105];
       case 16:
        return tag !== cst_q$0 ? [62, t105] : [47, t105];
       case 18:
        return tag !== cst_script$0
                ? tag
                  !== cst_select$1
                  ? tag !== cst_style$0 ? [62, t105] : [50, t105]
                  : [49, t105]
                : [48, t105];
       case 19:
        return tag !== cst_table$0
                ? tag
                  !== cst_tbody$0
                  ? tag
                    !== cst_td$0
                    ? tag
                      !== cst_textarea$1
                      ? tag
                        !== cst_tfoot$0
                        ? tag
                          !== cst_th$0
                          ? tag
                            !== cst_thead$0
                            ? tag
                              !== cst_title$0
                              ? tag !== cst_tr$0 ? [62, t105] : [59, t105]
                              : [58, t105]
                            : [57, t105]
                          : [56, t105]
                        : [55, t105]
                      : [54, t105]
                    : [53, t105]
                  : [52, t105]
                : [51, t105];
       case 20:
        return tag !== cst_ul$0 ? [62, t105] : [60, t105];
       case 21:
        return tag !== cst_video$0 ? [62, t105] : [61, t105];
     }
    return [62, t105];
   }
   function opt_tagged(e){
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             e,
             function(param){return 0;},
             function(e){return [0, tagged(e)];});
   }
   function taggedEvent(ev){
    var _i_ = mouseEvent(ev);
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             _i_,
             function(param){
              var _j_ = keyboardEvent(ev);
              return caml_call3
                      (Js_of_ocaml_Js[5][7],
                       _j_,
                       function(param){
                        var _k_ = wheelEvent(ev);
                        return caml_call3
                                (Js_of_ocaml_Js[5][7],
                                 _k_,
                                 function(param){
                                  var _l_ = mouseScrollEvent(ev);
                                  return caml_call3
                                          (Js_of_ocaml_Js[5][7],
                                           _l_,
                                           function(param){
                                            var _m_ = popStateEvent(ev);
                                            return caml_call3
                                                    (Js_of_ocaml_Js[5][7],
                                                     _m_,
                                                     function(param){
                                                      var _n_ = messageEvent(ev);
                                                      return caml_call3
                                                              (Js_of_ocaml_Js[5][7],
                                                               _n_,
                                                               function(param){return [6, ev];},
                                                               function(ev){return [2, ev];});
                                                     },
                                                     function(ev){return [5, ev];});
                                           },
                                           function(ev){return [4, ev];});
                                 },
                                 function(ev){return [3, ev];});
                       },
                       function(ev){return [1, ev];});
             },
             function(ev){return [0, ev];});
   }
   function opt_taggedEvent(ev){
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             ev,
             function(param){return 0;},
             function(ev){return [0, taggedEvent(ev)];});
   }
   function stopPropagation(t110){
    return caml_call3
            (Js_of_ocaml_Js[6][7],
             t110.stopPropagation,
             function(param){
              var t108 = Js_of_ocaml_Js[7];
              return t110.cancelBubble = t108;
             },
             function(param){return t110.stopPropagation();});
   }
   var
    requestAnimationFrame =
      runtime.caml_js_pure_expr
       (function(param){
         var
          l =
            [0,
             window.requestAnimationFrame,
             [0,
              window.mozRequestAnimationFrame,
              [0,
               window.webkitRequestAnimationFrame,
               [0,
                window.oRequestAnimationFrame,
                [0, window.msRequestAnimationFrame, 0]]]]];
         try{
          var
           req =
             caml_call2
              (Stdlib_List[39],
               function(c){return caml_call1(Js_of_ocaml_Js[6][5], c);},
               l),
           _g_ = function(callback){return req(callback);};
          return _g_;
         }
         catch(_h_){
          var _f_ = caml_wrap_exception(_h_);
          if(_f_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_f_, 0);
          var
           now =
             function(param){
              var t116 = Js_of_ocaml_Js[26], t117 = new t116;
              return t117.getTime();
             },
           last = [0, now(0)];
          return function(callback){
           var
            t = now(0),
            dt = last[1] + 16.666666666666668 - t,
            t119 = dt < 0. ? 0. : dt;
           last[1] = t;
           window.setTimeout(callback, t119);
           return 0;};
         }
        });
   function hasPushState(param){
    var t122 = window.history;
    return caml_call1(Js_of_ocaml_Js[6][5], t122.pushState);
   }
   function hasPlaceholder(param){
    var t123 = unsafeCreateElementEx(0, 0, document, cst_input);
    return caml_call1(Js_of_ocaml_Js[6][5], t123.placeholder);
   }
   function hasRequired(param){
    var t124 = unsafeCreateElementEx(0, 0, document, cst_input);
    return caml_call1(Js_of_ocaml_Js[6][5], t124.required);
   }
   var overflow_limit = 2147483000.;
   function setTimeout(callback, d){
    var id = [0, 0];
    function loop(d, param){
     if(2147483000. < d)
      var remain = d - 2147483000., step = overflow_limit;
     else
      var remain = 0., step = d;
     var
      cb = remain == 0. ? callback : function(_e_){return loop(remain, _e_);},
      t125 = runtime.caml_js_wrap_callback(cb);
     id[1] = [0, window.setTimeout(t125, step)];
     return 0;
    }
    loop(d, 0);
    return id;
   }
   function clearTimeout(id){
    var match = id[1];
    if(! match) return 0;
    var t128 = match[1];
    id[1] = 0;
    return window.clearTimeout(t128);
   }
   function js_array_of_collection(c){return [].slice.call(c);}
   var
    Js_of_ocaml_Dom_html =
      [0,
       d,
       document,
       getElementById_opt,
       getElementById_exn,
       getElementById_coerce,
       getElementById,
       location_origin,
       window,
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       eventRelatedTarget,
       [0,
        cancel,
        click,
        close,
        copy,
        cut,
        paste,
        dblclick,
        mousedown,
        mouseup,
        mouseover,
        mousemove,
        mouseout,
        keypress,
        keydown,
        keyup,
        mousewheel,
        DOMMouseScroll,
        wheel,
        touchstart,
        touchmove,
        touchend,
        touchcancel,
        dragstart,
        dragend,
        dragenter,
        dragover,
        dragleave,
        drag,
        drop,
        hashchange,
        change,
        input,
        timeupdate,
        submit,
        scroll,
        focus,
        blur,
        load,
        unload,
        beforeunload,
        resize,
        orientationchange,
        popstate,
        error,
        abort,
        select,
        online,
        offline,
        checking,
        noupdate,
        downloading,
        progress,
        updateready,
        cached,
        obsolete,
        domContentLoaded,
        animationstart,
        animationend,
        animationiteration,
        animationcancel,
        transitionrun,
        transitionstart,
        transitionend,
        transitioncancel,
        canplay,
        canplaythrough,
        durationchange,
        emptied,
        ended,
        gotpointercapture,
        loadeddata,
        loadedmetadata,
        loadstart,
        lostpointercapture,
        message,
        pause,
        play,
        playing,
        pointerenter,
        pointercancel,
        pointerdown,
        pointerleave,
        pointermove,
        pointerout,
        pointerover,
        pointerup,
        ratechange,
        seeked,
        seeking,
        stalled,
        suspend,
        volumechange,
        waiting,
        make],
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       addMousewheelEventListenerWith,
       addMousewheelEventListener,
       createCustomEvent,
       buttonPressed,
       eventAbsolutePosition$0,
       elementClientPosition,
       getDocumentScroll,
       [0, of_event, try_key_code_normal],
       [0, of_event$0],
       createHtml,
       createHead,
       createLink,
       createTitle,
       createMeta,
       createBase,
       createStyle,
       createBody,
       createForm,
       createOptgroup,
       createOption,
       createSelect,
       createInput,
       createTextarea,
       createButton,
       createLabel,
       createFieldset,
       createLegend,
       createUl,
       createOl,
       createDl,
       createLi,
       createDialog,
       createDiv,
       createEmbed,
       createP,
       createH1,
       createH2,
       createH3,
       createH4,
       createH5,
       createH6,
       createQ,
       createBlockquote,
       createPre,
       createBr,
       createHr,
       createIns,
       createDel,
       createA,
       createImg,
       createObject,
       createParam,
       createMap,
       createArea,
       createScript,
       createTable,
       createCaption,
       createCol,
       createColgroup,
       createThead,
       createTfoot,
       createTbody,
       createTr,
       createTh,
       createTd,
       createSub,
       createSup,
       createSpan,
       createTt,
       createI,
       createB,
       createBig,
       createSmall,
       createEm,
       createStrong,
       createCite,
       createDfn,
       createCode,
       createSamp,
       createKbd,
       createVar,
       createAbbr,
       createDd,
       createDt,
       createNoscript,
       createAddress,
       createFrameset,
       createFrame,
       createIframe,
       createAudio,
       createVideo,
       Canvas_not_available,
       createCanvas,
       element$0,
       tagged,
       opt_tagged,
       taggedEvent,
       opt_taggedEvent,
       stopPropagation,
       [0,
        element,
        a,
        area,
        audio,
        base,
        blockquote,
        body,
        br,
        button,
        canvas,
        caption,
        col,
        colgroup,
        del,
        div,
        embed,
        dl,
        fieldset,
        form,
        frameset,
        frame,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        head,
        hr,
        html,
        iframe,
        img,
        input$0,
        ins,
        label,
        legend,
        li,
        link,
        map,
        meta,
        object,
        ol,
        optgroup,
        option,
        p,
        function(e){return unsafeCoerce(cst_param, e);},
        pre,
        q,
        script,
        select$0,
        style,
        table,
        tbody,
        td,
        textarea,
        tfoot,
        th,
        thead,
        title,
        tr,
        ul,
        video,
        mouseEvent,
        keyboardEvent,
        wheelEvent,
        mouseScrollEvent,
        popStateEvent,
        messageEvent],
       setTimeout,
       clearTimeout,
       js_array_of_collection,
       requestAnimationFrame,
       runtime.caml_js_html_entities,
       onIE,
       hasPushState,
       hasPlaceholder,
       hasRequired];
   runtime.caml_register_global
    (556, Js_of_ocaml_Dom_html, "Js_of_ocaml__Dom_html");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Form
//# unitInfo: Requires: Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Stdlib__Array, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Stdlib_Array = global_data.Stdlib__Array,
    t0 = Js_of_ocaml_Js[52][1],
    formData = t0.FormData,
    t1 = Js_of_ocaml_Js[52][1],
    formData_form = t1.FormData,
    _a_ = [0, 1],
    _b_ = [0, "lib/js_of_ocaml/form.ml", 175, 13];
   function filter_map(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var q = param$0[2], v = param$0[1], match = caml_call1(f, v);
     if(match){var v$0 = match[1]; return [0, v$0, filter_map(f, q)];}
     param$0 = q;
    }
   }
   function have_content(elt){
    var
     t3 = elt.name,
     _l_ = 0 < t3.length ? 1 : 0,
     _m_ = _l_ ? 1 - (elt.disabled | 0) : _l_;
    return _m_;
   }
   function get_element_content(get$0, v){
    var match$3 = caml_call1(Js_of_ocaml_Dom_html[113], v);
    switch(match$3[0]){
      case 32:
       var elt = match$3[1], get = get$0 ? get$0[1] : 0;
       if(! have_content(elt)) return 0;
       var
        name$1 = caml_string_of_jsstring(elt.name),
        value = elt.value,
        t20 = elt.type,
        match = runtime.caml_string_of_jsbytes(t20.toLowerCase());
       a:
       if(match !== "checkbox"){
        if(match === "file"){
         if(get) return [0, [0, name$1, [0, -976970511, value]], 0];
         var match$0 = caml_call1(Js_of_ocaml_Js[6][10], elt.files);
         if(! match$0) return 0;
         var list = match$0[1];
         if(0 === list.length)
          return [0, [0, name$1, [0, -976970511, ""]], 0];
         var match$1 = caml_call1(Js_of_ocaml_Js[6][10], elt.multiple);
         if(match$1 && match$1[1]){
          var
           _i_ =
             caml_call2
              (Stdlib_Array[1],
               list.length,
               function(t28){return list.item(t28);});
          return filter_map
                  (function(f){
                    var match = caml_call1(Js_of_ocaml_Js[5][10], f);
                    if(! match) return 0;
                    var file = match[1];
                    return [0, [0, name$1, [0, 781515420, file]]];
                   },
                   caml_call1(Stdlib_Array[10], _i_));
         }
         var
          _j_ = list.item(0),
          match$2 = caml_call1(Js_of_ocaml_Js[5][10], _j_);
         if(! match$2) return 0;
         var file = match$2[1];
         return [0, [0, name$1, [0, 781515420, file]], 0];
        }
        b:
        if(match !== "password"){
         if(match === "radio") break a;
         if(match !== "reset" && match !== "submit"){
          if(match !== "text")
           return [0, [0, name$1, [0, -976970511, value]], 0];
          break b;
         }
         return 0;
        }
        return [0, [0, name$1, [0, -976970511, value]], 0];
       }
       return elt.checked | 0
               ? [0, [0, name$1, [0, -976970511, value]], 0]
               : 0;
      case 49:
       var elt$0 = match$3[1];
       if(! have_content(elt$0)) return 0;
       var name$0 = caml_string_of_jsstring(elt$0.name);
       if(! (elt$0.multiple | 0))
        return [0, [0, name$0, [0, -976970511, elt$0.value]], 0];
       var
        t10 = elt$0.options,
        options =
          caml_call2
           (Stdlib_Array[1],
            t10.length,
            function(t12){
             var t13 = elt$0.options, _k_ = t13.item(t12);
             return caml_call1(Js_of_ocaml_Js[5][10], _k_);
            });
       return filter_map
               (function(param){
                 if(! param) return 0;
                 var t14 = param[1];
                 return t14.selected | 0
                         ? [0, [0, name$0, [0, -976970511, t14.value]]]
                         : 0;
                },
                caml_call1(Stdlib_Array[10], options));
      case 54:
       var elt$1 = match$3[1];
       if(! have_content(elt$1)) return 0;
       var name = caml_string_of_jsstring(elt$1.name);
       return [0, [0, name, [0, -976970511, elt$1.value]], 0];
      default: return 0;
    }
   }
   function form_elements(get, form){
    var t34 = form.elements, i$1 = t34.length - 1 | 0, acc = 0, t31 = i$1;
    for(;;){
     if(0 > t31) break;
     var
      t32 = form.elements,
      _g_ = t32.item(t31),
      match = caml_call1(Js_of_ocaml_Js[5][10], _g_);
     if(match){
      var x = match[1], i = t31 - 1 | 0, acc$0 = [0, x, acc];
      acc = acc$0;
      t31 = i;
     }
     else{var i$0 = t31 - t31 | 0; t31 = i$0;}
    }
    var
     _h_ =
       caml_call2
        (Stdlib_List[20],
         function(v){return get_element_content(get, v);},
         acc);
    return caml_call1(Stdlib_List[15], _h_);
   }
   function append(form_contents, form_elt){
    if(891486873 <= form_contents[1]){
     var list = form_contents[2];
     list[1] = [0, form_elt, list[1]];
     return 0;
    }
    var t40 = form_contents[2], match = form_elt[2], name = form_elt[1];
    if(781515420 <= match[1]){
     var file = match[2], t38 = caml_jsstring_of_string(name);
     return t40.append(t38, file);
    }
    var t36 = match[2], t35 = caml_jsstring_of_string(name);
    return t40.append(t35, t36);
   }
   function empty_form_contents(param){
    var
     _f_ = caml_call1(Js_of_ocaml_Js[4], formData),
     match = caml_call1(Js_of_ocaml_Js[6][10], _f_);
    if(! match) return [0, 891486873, [0, 0]];
    var constr = match[1];
    return [0, 808620462, new constr];
   }
   function post_form_contents(form){
    var contents = empty_form_contents(0), _d_ = form_elements(0, form);
    caml_call2
     (Stdlib_List[18], function(_e_){return append(contents, _e_);}, _d_);
    return contents;
   }
   function get_form_contents(form){
    var _c_ = form_elements(_a_, form);
    return caml_call2
            (Stdlib_List[20],
             function(param){
              var match = param[2];
              if(typeof match !== "number" && -976970511 === match[1]){
               var s = match[2], name = param[1];
               return [0, name, caml_string_of_jsstring(s)];
              }
              throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
             },
             _c_);
   }
   var
    Js_of_ocaml_Form =
      [0,
       formData,
       formData_form,
       append,
       post_form_contents,
       get_form_contents,
       empty_form_contents,
       form_elements];
   runtime.caml_register_global(48, Js_of_ocaml_Form, "Js_of_ocaml__Form");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__XmlHttpRequest
//# unitInfo: Requires: Js_of_ocaml__Dom
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    readystatechange = caml_call1(Js_of_ocaml_Dom[14][1], "readystatechange"),
    loadstart = caml_call1(Js_of_ocaml_Dom[14][1], "loadstart"),
    progress = caml_call1(Js_of_ocaml_Dom[14][1], "progress"),
    abort = caml_call1(Js_of_ocaml_Dom[14][1], "abort"),
    error = caml_call1(Js_of_ocaml_Dom[14][1], "error"),
    load = caml_call1(Js_of_ocaml_Dom[14][1], "load"),
    timeout = caml_call1(Js_of_ocaml_Dom[14][1], "timeout"),
    loadend = caml_call1(Js_of_ocaml_Dom[14][1], "loadend"),
    Event =
      [0,
       readystatechange,
       loadstart,
       progress,
       abort,
       error,
       load,
       timeout,
       loadend],
    Js_of_ocaml_XmlHttpRequest =
      [0, runtime.caml_xmlhttprequest_create, Event];
   runtime.caml_register_global
    (9, Js_of_ocaml_XmlHttpRequest, "Js_of_ocaml__XmlHttpRequest");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Worker
//# unitInfo: Requires: Js_of_ocaml__Js, Stdlib, Stdlib__Array
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Worker_onmessage_is_undefi$1 = "Worker.onmessage is undefined",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    t0 = Js_of_ocaml_Js[52][1],
    worker = t0.Worker,
    cst_Worker_import_scripts_is_u = "Worker.import_scripts is undefined",
    cst_Worker_onmessage_is_undefi = cst_Worker_onmessage_is_undefi$1,
    cst_Worker_onmessage_is_undefi$0 = cst_Worker_onmessage_is_undefi$1;
   function create(script){
    var t1 = caml_jsstring_of_string(script);
    return new worker(t1);
   }
   function import_scripts(scripts){
    var t3 = Js_of_ocaml_Js[52][1];
    if(1 - caml_call1(Js_of_ocaml_Js[6][5], t3.importScripts))
     caml_call1(Stdlib[1], cst_Worker_import_scripts_is_u);
    var
     _a_ = caml_call1(Stdlib_Array[11], scripts),
     _b_ = caml_call2(Stdlib_Array[14], caml_jsstring_of_string, _a_),
     t4 = Js_of_ocaml_Js[52][1];
    return runtime.caml_js_fun_call(t4.importScripts, _b_);
   }
   function set_onmessage(handler){
    var t5 = Js_of_ocaml_Js[52][1];
    if(1 - caml_call1(Js_of_ocaml_Js[6][5], t5.onmessage))
     caml_call1(Stdlib[1], cst_Worker_onmessage_is_undefi);
    function js_handler(ev){return caml_call1(handler, ev.data);}
    var
     t7 = runtime.caml_js_wrap_callback(js_handler),
     t8 = Js_of_ocaml_Js[52][1];
    return t8.onmessage = t7;
   }
   function post_message(msg){
    var t9 = Js_of_ocaml_Js[52][1];
    if(1 - caml_call1(Js_of_ocaml_Js[6][5], t9.postMessage))
     caml_call1(Stdlib[1], cst_Worker_onmessage_is_undefi$0);
    var t11 = Js_of_ocaml_Js[52][1];
    return t11.postMessage(msg);
   }
   var
    Js_of_ocaml_Worker =
      [0, create, import_scripts, set_onmessage, post_message];
   runtime.caml_register_global(14, Js_of_ocaml_Worker, "Js_of_ocaml__Worker");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__WebSockets
//# unitInfo: Requires: Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    t0 = Js_of_ocaml_Js[52][1],
    webSocket = t0.WebSocket;
   function is_supported(param){
    return caml_call1(Js_of_ocaml_Js[6][5], webSocket);
   }
   var
    Js_of_ocaml_WebSockets =
      [0, webSocket, webSocket, webSocket, is_supported];
   runtime.caml_register_global
    (2, Js_of_ocaml_WebSockets, "Js_of_ocaml__WebSockets");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__WebGL
//# unitInfo: Requires: Js_of_ocaml__Dom_html, Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_experimental_webgl = "experimental-webgl",
    cst_webgl = "webgl";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    defaultContextAttributes =
      {alpha: Js_of_ocaml_Js[7],
       depth: Js_of_ocaml_Js[7],
       stencil: Js_of_ocaml_Js[8],
       antialias: Js_of_ocaml_Js[7],
       premultipliedAlpha: Js_of_ocaml_Js[8],
       preserveDrawingBuffer: Js_of_ocaml_Js[8],
       preferLowPowerToHighPerformance: Js_of_ocaml_Js[8],
       failIfMajorPerformanceCaveat: Js_of_ocaml_Js[8]},
    webglcontextlost =
      caml_call1(Js_of_ocaml_Dom_html[15][94], "webglcontextlost"),
    webglcontextrestored =
      caml_call1(Js_of_ocaml_Dom_html[15][94], "webglcontextrestored"),
    webglcontextcreationerror =
      caml_call1(Js_of_ocaml_Dom_html[15][94], "webglcontextcreationerror"),
    Event =
      [0, webglcontextlost, webglcontextrestored, webglcontextcreationerror];
   function getContext(t1){
    var ctx = t1.getContext(cst_webgl);
    return caml_call1(Js_of_ocaml_Js[5][5], ctx)
            ? ctx
            : t1.getContext(cst_experimental_webgl);
   }
   function getContextWithAttributes(t6, attribs){
    var ctx = t6.getContext(cst_webgl, attribs);
    return caml_call1(Js_of_ocaml_Js[5][5], ctx)
            ? ctx
            : t6.getContext(cst_experimental_webgl, attribs);
   }
   var
    Js_of_ocaml_WebGL =
      [0,
       defaultContextAttributes,
       Event,
       getContext,
       getContextWithAttributes];
   runtime.caml_register_global(21, Js_of_ocaml_WebGL, "Js_of_ocaml__WebGL");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Regexp
//# unitInfo: Requires: Js_of_ocaml__Js, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_g$0 = "g",
    caml_jsbytes_of_string = runtime.caml_jsbytes_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_of_jsbytes = runtime.caml_string_of_jsbytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "[\\][()\\\\|+*.?{}^$]",
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    cst_g = cst_g$0,
    _a_ = [0, "lib/js_of_ocaml/regexp.ml", 34, 64];
   function regexp(s){
    var t0 = caml_jsbytes_of_string(s), t2 = Js_of_ocaml_Js[15];
    return new t2(t0, cst_g$0);
   }
   function regexp_case_fold(s){
    var t3 = caml_jsbytes_of_string(s), t5 = Js_of_ocaml_Js[15];
    return new t5(t3, "gi");
   }
   function regexp_with_flag(s, f){
    var
     t7 = runtime.caml_jsstring_of_string(caml_call2(Stdlib[28], cst_g, f)),
     t6 = caml_jsbytes_of_string(s),
     t8 = Js_of_ocaml_Js[15];
    return new t8(t6, t7);
   }
   function blunt_str_array_get(a, i){
    var _k_ = caml_call2(Js_of_ocaml_Js[20], a, i);
    return caml_string_of_jsbytes
            (caml_call2
              (Js_of_ocaml_Js[6][8],
               _k_,
               function(param){
                throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
               }));
   }
   function string_match(t10, s, t9){
    t10.lastIndex = t9;
    var
     t11 = caml_jsbytes_of_string(s),
     _h_ = Js_of_ocaml_Js[25],
     _i_ = t10.exec(t11),
     _j_ = caml_call2(Js_of_ocaml_Js[5][3], _i_, _h_);
    return caml_call1(Js_of_ocaml_Js[5][10], _j_);
   }
   function search(t14, s, t13){
    t14.lastIndex = t13;
    var
     t15 = caml_jsbytes_of_string(s),
     _f_ = t14.exec(t15),
     _g_ =
       caml_call2
        (Js_of_ocaml_Js[5][3],
         _f_,
         function(res_pre){
          var res = caml_call1(Js_of_ocaml_Js[25], res_pre);
          return [0, res.index, res];
         });
    return caml_call1(Js_of_ocaml_Js[5][10], _g_);
   }
   function matched_string(r){return blunt_str_array_get(r, 0);}
   function matched_group(r, i){
    var
     _d_ = caml_call2(Js_of_ocaml_Js[20], r, i),
     _e_ = caml_call2(Js_of_ocaml_Js[6][3], _d_, caml_string_of_jsbytes);
    return caml_call1(Js_of_ocaml_Js[6][10], _e_);
   }
   var t20 = Js_of_ocaml_Js[15], quote_repl_re = new t20("[$]", cst_g$0);
   function quote_repl(s){
    var t23 = caml_jsbytes_of_string(s);
    return t23.replace(quote_repl_re, "$$$$");
   }
   function global_replace(t25, s, s_by){
    t25.lastIndex = 0;
    var t27 = quote_repl(s_by), t28 = caml_jsbytes_of_string(s);
    return caml_string_of_jsbytes(t28.replace(t25, t27));
   }
   function replace_first(t29, s, s_by){
    var
     match = t29.multiline | 0,
     flags = t29.ignoreCase | 0 ? match ? "mi" : "i" : match ? "m" : "",
     t32 = t29.source,
     t34 = Js_of_ocaml_Js[15],
     t35 = new t34(t32, flags),
     t36 = quote_repl(s_by),
     t37 = caml_jsbytes_of_string(s);
    return caml_string_of_jsbytes(t37.replace(t35, t36));
   }
   function list_of_js_array(t38){
    var idx$1 = t38.length - 1 | 0, accu = 0, idx = idx$1;
    for(;;){
     if(0 > idx) return accu;
     var
      idx$0 = idx - 1 | 0,
      accu$0 = [0, blunt_str_array_get(t38, idx), accu];
     accu = accu$0;
     idx = idx$0;
    }
   }
   function split(t40, s){
    t40.lastIndex = 0;
    var t42 = caml_jsbytes_of_string(s), _c_ = t42.split(t40);
    return list_of_js_array(caml_call1(Js_of_ocaml_Js[24], _c_));
   }
   function bounded_split(t44, s, t46){
    t44.lastIndex = 0;
    var t47 = caml_jsbytes_of_string(s), _b_ = t47.split(t44, t46);
    return list_of_js_array(caml_call1(Js_of_ocaml_Js[24], _b_));
   }
   var quote_re = regexp(cst);
   function quote(s){
    var t50 = caml_jsbytes_of_string(s);
    return caml_string_of_jsbytes(t50.replace(quote_re, "\\$&"));
   }
   function regexp_string(s){return regexp(quote(s));}
   function regexp_string_case_fold(s){return regexp_case_fold(quote(s));}
   var
    Js_of_ocaml_Regexp =
      [0,
       regexp,
       regexp_case_fold,
       regexp_with_flag,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search,
       search,
       matched_string,
       matched_group,
       global_replace,
       replace_first,
       split,
       bounded_split];
   runtime.caml_register_global(34, Js_of_ocaml_Regexp, "Js_of_ocaml__Regexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Url
//# unitInfo: Requires: CamlinternalOO, Js_of_ocaml__Dom_html, Js_of_ocaml__Import, Js_of_ocaml__Js, Js_of_ocaml__Regexp, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$24 = "",
    cst$29 = " ",
    cst$25 = "#",
    cst$27 = "/",
    cst$28 = ":",
    cst$26 = "?",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_js_wrap_meth_callback = runtime.caml_js_wrap_meth_callback,
    caml_jsbytes_of_string = runtime.caml_jsbytes_of_string,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_of_jsbytes = runtime.caml_string_of_jsbytes,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$10 = cst$24,
    cst$3 = cst$25,
    cst$4 = cst$26,
    cst$9 = cst$24,
    cst$5 = cst$27,
    cst$6 = cst$27,
    cst$8 = cst$28,
    cst$7 = cst$24,
    cst$18 = cst$24,
    cst$11 = cst$25,
    cst$12 = cst$26,
    cst$17 = cst$24,
    cst$13 = cst$27,
    cst$14 = cst$27,
    cst$16 = cst$28,
    cst$15 = cst$24,
    cst$23 = cst$24,
    cst$19 = cst$25,
    cst$20 = cst$26,
    cst$22 = cst$24,
    cst$21 = cst$27,
    cst$1 = "=",
    cst$2 = "&",
    cst$0 = cst$29,
    cst = "+",
    Js_of_ocaml_Import = global_data.Js_of_ocaml__Import,
    Stdlib = global_data.Stdlib;
   global_data.CamlinternalOO;
   var
    Stdlib_List = global_data.Stdlib__List,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Regexp = global_data.Js_of_ocaml__Regexp,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Local_exn = [248, "Js_of_ocaml__Url.Local_exn", caml_fresh_oo_id(0)];
   function interrupt(param){throw caml_maybe_attach_backtrace(Local_exn, 1);}
   var
    plus_re = caml_call1(Js_of_ocaml_Regexp[5], cst),
    t11 = Js_of_ocaml_Js[15],
    plus_re_js_string = new t11("\\+", "g"),
    cst_2B = "%2B";
   function urldecode_js_string_string(t16){
    plus_re_js_string.lastIndex = 0;
    var _aC_ = t16.replace(plus_re_js_string, cst$29);
    return caml_string_of_jsbytes(caml_call1(Js_of_ocaml_Js[44], _aC_));
   }
   function urldecode(s){
    var
     _aB_ =
       caml_jsbytes_of_string
        (caml_call3(Js_of_ocaml_Regexp[12], plus_re, s, cst$0));
    return caml_string_of_jsbytes(caml_call1(Js_of_ocaml_Js[44], _aB_));
   }
   function urlencode(opt, s){
    var with_plus = opt ? opt[1] : 1;
    if(! with_plus)
     return caml_string_of_jsbytes
             (caml_call1(Js_of_ocaml_Js[43], caml_jsbytes_of_string(s)));
    var
     s$0 =
       caml_string_of_jsbytes
        (caml_call1(Js_of_ocaml_Js[43], caml_jsbytes_of_string(s)));
    return caml_call3(Js_of_ocaml_Regexp[12], plus_re, s$0, cst_2B);
   }
   var
    Not_an_http_protocol =
      [248, "Js_of_ocaml__Url.Not_an_http_protocol", caml_fresh_oo_id(0)],
    _a_ = [0, cst$24, 0];
   function path_of_path_string(s){
    var l = caml_ml_string_length(s);
    function aux(i){
     try{var _az_ = caml_call3(Js_of_ocaml_Import[3][31], s, i, 47), j = _az_;
     }
     catch(_aA_){
      var _ay_ = caml_wrap_exception(_aA_);
      if(_ay_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ay_, 0);
      var j = l;
     }
     var word = caml_call3(Js_of_ocaml_Import[3][15], s, i, j - i | 0);
     return l <= j ? [0, word, 0] : [0, word, aux(j + 1 | 0)];
    }
    var a = aux(0);
    if(a && a[1] === cst$24){
     var _ax_ = a[2];
     if(! _ax_) return 0;
     if(_ax_[1] === cst$24 && ! _ax_[2]) return _a_;
    }
    return a;
   }
   function encode_arguments(l){
    var
     _at_ =
       caml_call2
        (Stdlib_List[20],
         function(param){
          var
           v = param[2],
           n = param[1],
           _au_ = urlencode(0, v),
           _av_ = caml_call2(Stdlib[28], cst$1, _au_),
           _aw_ = urlencode(0, n);
          return caml_call2(Stdlib[28], _aw_, _av_);
         },
         l);
    return caml_call2(Js_of_ocaml_Import[3][7], cst$2, _at_);
   }
   function decode_arguments_js_string(t1){
    var
     t0 = caml_jsstring_of_string(caml_call2(Js_of_ocaml_Import[3][1], 1, 38)),
     _aj_ = t1.split(t0),
     arr = caml_call1(Js_of_ocaml_Js[24], _aj_),
     len = arr.length;
    function aux(acc, idx){
     var idx$0 = idx;
     for(;;){
      if(0 > idx$0) return acc;
      try{
       var
        _al_ = caml_call2(Js_of_ocaml_Js[20], arr, idx$0),
        _am_ =
          aux
           ([0,
             caml_call3
              (Js_of_ocaml_Js[6][7],
               _al_,
               interrupt,
               function(t3){
                var
                 t2 =
                   caml_jsstring_of_string
                    (caml_call2(Js_of_ocaml_Import[3][1], 1, 61)),
                 index = t3.indexOf(t2);
                function _aq_(param){
                 var
                  y = param[2],
                  x = param[1],
                  _as_ = urldecode_js_string_string(y);
                 return [0, urldecode_js_string_string(x), _as_];
                }
                if(0 <= index)
                 var
                  t7 = index + 1 | 0,
                  _ao_ = t3.slice(t7),
                  _ap_ = [0, t3.slice(0, index), _ao_],
                  _ar_ = caml_call1(Js_of_ocaml_Js[4], _ap_);
                else
                 var _ar_ = Js_of_ocaml_Js[3];
                return caml_call3(Js_of_ocaml_Js[6][7], _ar_, interrupt, _aq_);
               }),
             acc],
            idx$0 - 1 | 0);
       return _am_;
      }
      catch(_an_){
       var _ak_ = caml_wrap_exception(_an_);
       if(_ak_ !== Local_exn) throw caml_maybe_attach_backtrace(_ak_, 0);
       var idx$1 = idx$0 - 1 | 0;
       idx$0 = idx$1;
      }
     }
    }
    return aux(0, len - 1 | 0);
   }
   function decode_arguments(s){
    return decode_arguments_js_string(caml_jsbytes_of_string(s));
   }
   var
    t20 = Js_of_ocaml_Js[14],
    url_re =
      new
       t20
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
    t22 = Js_of_ocaml_Js[14],
    file_re =
      new t22("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
    cst_http = "http://",
    cst_https = "https://",
    cst_file = "file://";
   function url_of_js_string(t25){
    var _T_ = url_re.exec(t25);
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             _T_,
             function(param){
              var _ad_ = file_re.exec(t25);
              return caml_call3
                      (Js_of_ocaml_Js[5][7],
                       _ad_,
                       function(param){return 0;},
                       function(handle){
                        var
                         res = caml_call1(Js_of_ocaml_Js[25], handle),
                         _ae_ = caml_call2(Js_of_ocaml_Js[20], res, 2),
                         path_str =
                           urldecode_js_string_string
                            (caml_call2(Js_of_ocaml_Js[6][8], _ae_, interrupt)),
                         _af_ = caml_call2(Js_of_ocaml_Js[20], res, 6),
                         _ag_ =
                           caml_string_of_jsbytes
                            (caml_call2
                              (Js_of_ocaml_Js[6][8],
                               _af_,
                               function(param){return cst$24;})),
                         _ah_ = caml_call2(Js_of_ocaml_Js[20], res, 4),
                         _ai_ =
                           decode_arguments_js_string
                            (caml_call2
                              (Js_of_ocaml_Js[6][8],
                               _ah_,
                               function(param){return cst$24;}));
                        return [0,
                                [2,
                                 [0, path_of_path_string(path_str), path_str, _ai_, _ag_]]];
                       });
             },
             function(handle){
              var
               res = caml_call1(Js_of_ocaml_Js[25], handle),
               _U_ = caml_call2(Js_of_ocaml_Js[20], res, 1),
               prot_string = caml_call2(Js_of_ocaml_Js[6][8], _U_, interrupt),
               match = caml_string_of_jsbytes(prot_string.toLowerCase());
              a:
              if(match !== "file" && match !== "file:"){
               b:
               {
                if(match !== "http" && match !== "http:"){
                 if(match !== "https" && match !== "https:") break a;
                 var ssl = 1;
                 break b;
                }
                var ssl = 0;
               }
               var
                _V_ = caml_call2(Js_of_ocaml_Js[20], res, 6),
                path_str =
                  urldecode_js_string_string
                   (caml_call2
                     (Js_of_ocaml_Js[6][8], _V_, function(param){return cst$24;})),
                _W_ = caml_call2(Js_of_ocaml_Js[20], res, 10),
                _X_ =
                  urldecode_js_string_string
                   (caml_call2
                     (Js_of_ocaml_Js[6][8], _W_, function(param){return cst$24;})),
                _Y_ = caml_call2(Js_of_ocaml_Js[20], res, 8),
                _Z_ =
                  decode_arguments_js_string
                   (caml_call2
                     (Js_of_ocaml_Js[6][8], _Y_, function(param){return cst$24;})),
                ___ = path_of_path_string(path_str),
                _$_ = caml_call2(Js_of_ocaml_Js[20], res, 4),
                s =
                  caml_string_of_jsbytes
                   (caml_call2
                     (Js_of_ocaml_Js[6][8], _$_, function(param){return cst$24;})),
                _aa_ = s !== cst$24 ? caml_int_of_string(s) : ssl ? 443 : 80,
                _ab_ = caml_call2(Js_of_ocaml_Js[20], res, 2),
                url =
                  [0,
                   urldecode_js_string_string
                    (caml_call2(Js_of_ocaml_Js[6][8], _ab_, interrupt)),
                   _aa_,
                   ___,
                   path_str,
                   _Z_,
                   _X_],
                _ac_ = ssl ? [1, url] : [0, url];
               return [0, _ac_];
              }
              throw caml_maybe_attach_backtrace(Not_an_http_protocol, 1);
             });
   }
   function url_of_string(s){
    return url_of_js_string(caml_jsbytes_of_string(s));
   }
   function string_of_url(param){
    switch(param[0]){
      case 0:
       var
        match = param[1],
        frag = match[6],
        args = match[5],
        path = match[3],
        port = match[2],
        host = match[1];
       if(frag !== cst$24)
        var
         _j_ = urlencode(0, frag),
         _k_ = caml_call2(Stdlib[28], cst$3, _j_);
       else
        var _k_ = cst$10;
       if(args)
        var
         _l_ = encode_arguments(args),
         _m_ = caml_call2(Stdlib[28], cst$4, _l_);
       else
        var _m_ = cst$9;
       var
        _n_ = caml_call2(Stdlib[28], _m_, _k_),
        _o_ =
          caml_call2
           (Stdlib_List[20], function(x){return urlencode(0, x);}, path),
        _p_ = caml_call2(Js_of_ocaml_Import[3][7], cst$5, _o_),
        _q_ = caml_call2(Stdlib[28], _p_, _n_),
        _r_ = caml_call2(Stdlib[28], cst$6, _q_);
       if(80 === port)
        var _s_ = cst$7;
       else
        var
         _w_ = caml_call1(Stdlib[33], port),
         _s_ = caml_call2(Stdlib[28], cst$8, _w_);
       var
        _t_ = caml_call2(Stdlib[28], _s_, _r_),
        _u_ = urlencode(0, host),
        _v_ = caml_call2(Stdlib[28], _u_, _t_);
       return caml_call2(Stdlib[28], cst_http, _v_);
      case 1:
       var
        match$0 = param[1],
        frag$0 = match$0[6],
        args$0 = match$0[5],
        path$0 = match$0[3],
        port$0 = match$0[2],
        host$0 = match$0[1];
       if(frag$0 !== cst$24)
        var
         _x_ = urlencode(0, frag$0),
         _y_ = caml_call2(Stdlib[28], cst$11, _x_);
       else
        var _y_ = cst$18;
       if(args$0)
        var
         _z_ = encode_arguments(args$0),
         _A_ = caml_call2(Stdlib[28], cst$12, _z_);
       else
        var _A_ = cst$17;
       var
        _B_ = caml_call2(Stdlib[28], _A_, _y_),
        _C_ =
          caml_call2
           (Stdlib_List[20], function(x){return urlencode(0, x);}, path$0),
        _D_ = caml_call2(Js_of_ocaml_Import[3][7], cst$13, _C_),
        _E_ = caml_call2(Stdlib[28], _D_, _B_),
        _F_ = caml_call2(Stdlib[28], cst$14, _E_);
       if(443 === port$0)
        var _G_ = cst$15;
       else
        var
         _K_ = caml_call1(Stdlib[33], port$0),
         _G_ = caml_call2(Stdlib[28], cst$16, _K_);
       var
        _H_ = caml_call2(Stdlib[28], _G_, _F_),
        _I_ = urlencode(0, host$0),
        _J_ = caml_call2(Stdlib[28], _I_, _H_);
       return caml_call2(Stdlib[28], cst_https, _J_);
      default:
       var
        match$1 = param[1],
        frag$1 = match$1[4],
        args$1 = match$1[3],
        path$1 = match$1[1];
       if(frag$1 !== cst$24)
        var
         _L_ = urlencode(0, frag$1),
         _M_ = caml_call2(Stdlib[28], cst$19, _L_);
       else
        var _M_ = cst$23;
       if(args$1)
        var
         _N_ = encode_arguments(args$1),
         _O_ = caml_call2(Stdlib[28], cst$20, _N_);
       else
        var _O_ = cst$22;
       var
        _P_ = caml_call2(Stdlib[28], _O_, _M_),
        _Q_ =
          caml_call2
           (Stdlib_List[20], function(x){return urlencode(0, x);}, path$1),
        _R_ = caml_call2(Js_of_ocaml_Import[3][7], cst$21, _Q_),
        _S_ = caml_call2(Stdlib[28], _R_, _P_);
       return caml_call2(Stdlib[28], cst_file, _S_);
    }
   }
   var
    t27 = Js_of_ocaml_Dom_html[8],
    _b_ = caml_call1(Js_of_ocaml_Js[6][2], t27.location),
    default_http_port = 80,
    default_https_port = 443;
   if(caml_call1(Js_of_ocaml_Js[6][5], _b_))
    var t28 = Js_of_ocaml_Dom_html[8], t43 = t28.location;
   else
    var
     t42 = function(_i_, param){return 0;},
     t41 = function(_h_, param){return 0;},
     t40 = function(param){return 0;},
     t39 = Js_of_ocaml_Js[3],
     t43 =
       {href: cst$24,
        protocol: cst$24,
        host: cst$24,
        hostname: cst$24,
        port: cst$24,
        pathname: cst$24,
        search: cst$24,
        hash: cst$24,
        origin: t39,
        reload: caml_js_wrap_meth_callback(t40),
        replace: caml_js_wrap_meth_callback(t41),
        assign: caml_js_wrap_meth_callback(t42)};
   var
    host = urldecode_js_string_string(t43.hostname),
    protocol = urldecode_js_string_string(t43.protocol);
   try{
    var
     _d_ = [0, caml_int_of_string(caml_string_of_jsbytes(t43.port))],
     port = _d_;
   }
   catch(_g_){
    var _c_ = caml_wrap_exception(_g_);
    if(_c_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_c_, 0);
    var port = 0;
   }
   var
    path_string = urldecode_js_string_string(t43.pathname),
    path = path_of_path_string(path_string),
    t49 = t43.search;
   if(t49.charAt(0) == cst$26)
    var t52 = t43.search, _e_ = t52.slice(1);
   else
    var _e_ = t43.search;
   var arguments$0 = decode_arguments_js_string(_e_);
   function get_fragment(param){
    var s = caml_string_of_jsbytes(t43.hash);
    if(0 < caml_ml_string_length(s)){
     var _f_ = runtime.caml_string_get(s, 0);
     if(caml_call2(Js_of_ocaml_Import[4][8], _f_, 35))
      return caml_call3
              (Js_of_ocaml_Import[3][15],
               s,
               1,
               caml_ml_string_length(s) - 1 | 0);
    }
    return s;
   }
   function set_fragment(s){
    var t55 = caml_jsbytes_of_string(s);
    return t43.hash = t55;
   }
   function get(param){return url_of_js_string(t43.href);}
   function set(u){
    var t58 = caml_jsbytes_of_string(string_of_url(u));
    return t43.href = t58;
   }
   var
    as_string = urldecode_js_string_string(t43.href),
    Js_of_ocaml_Url =
      [0,
       urldecode,
       urlencode,
       default_http_port,
       default_https_port,
       path_of_path_string,
       encode_arguments,
       decode_arguments,
       url_of_string,
       string_of_url,
       [0,
        host,
        port,
        protocol,
        path_string,
        path,
        arguments$0,
        get_fragment,
        set_fragment,
        get,
        set,
        as_string]];
   runtime.caml_register_global(105, Js_of_ocaml_Url, "Js_of_ocaml__Url");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Lib_version
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_5_8_2 = "5.8.2",
    s = cst_5_8_2,
    git_version = cst_5_8_2,
    Js_of_ocaml_Lib_version = [0, s, git_version];
   runtime.caml_register_global
    (2, Js_of_ocaml_Lib_version, "Js_of_ocaml__Lib_version");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Sys_js
//# unitInfo: Requires: Js_of_ocaml__Import, Js_of_ocaml__Js, Js_of_ocaml__Lib_version, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    cst$0 = "+",
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Lib_version = global_data.Js_of_ocaml__Lib_version,
    Js_of_ocaml_Import = global_data.Js_of_ocaml__Import;
   function update_file(name, content){
    var oc = caml_call1(Stdlib[60], name);
    caml_call2(Stdlib[66], oc, content);
    return caml_call1(Stdlib[76], oc);
   }
   function set_channel_flusher(out_channel, f){
    var
     f$0 =
       caml_js_wrap_callback
        (function(s){return caml_call1(f, runtime.caml_string_of_jsbytes(s));});
    return runtime.caml_ml_set_channel_output(out_channel, f$0);
   }
   function set_channel_filler(in_channel, f){
    var f$0 = caml_js_wrap_callback(f);
    return runtime.caml_ml_set_channel_refill(in_channel, f$0);
   }
   function mount(path, f){
    return runtime.caml_mount_autoload
            (path,
             caml_js_wrap_callback
              (function(prefix, path){return caml_call2(f, prefix, path);}));
   }
   var unmount = runtime.caml_unmount;
   if(caml_call2(Js_of_ocaml_Import[3][64], Js_of_ocaml_Lib_version[2], cst))
    var js_of_ocaml_version = Js_of_ocaml_Lib_version[1];
   else
    var
     _a_ = caml_call2(Stdlib[28], cst$0, Js_of_ocaml_Lib_version[2]),
     js_of_ocaml_version =
       caml_call2(Stdlib[28], Js_of_ocaml_Lib_version[1], _a_);
   var
    Js_of_ocaml_Sys_js =
      [0,
       set_channel_flusher,
       set_channel_filler,
       function(_b_){return runtime.caml_list_mount_point(_b_);},
       unmount,
       mount,
       runtime.caml_read_file_content,
       runtime.caml_create_file,
       update_file,
       js_of_ocaml_version];
   runtime.caml_register_global(5, Js_of_ocaml_Sys_js, "Js_of_ocaml__Sys_js");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__ResizeObserver
//# unitInfo: Requires: Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js;
   function empty_resize_observer_options(param){return {};}
   var t0 = Js_of_ocaml_Js[52][1], resizeObserver = t0.ResizeObserver;
   function is_supported(param){
    return caml_call1(Js_of_ocaml_Js[6][5], resizeObserver);
   }
   function observe(node, f, box, param){
    var t1 = runtime.caml_js_wrap_callback(f), obs = new resizeObserver(t1);
    if(box){
     var box$0 = box[1], opts = {};
     opts.box = box$0;
     obs.observe(node, opts);
    }
    else
     obs.observe(node);
    return obs;
   }
   var
    Js_of_ocaml_ResizeObserver =
      [0,
       empty_resize_observer_options,
       resizeObserver,
       is_supported,
       observe];
   runtime.caml_register_global
    (5, Js_of_ocaml_ResizeObserver, "Js_of_ocaml__ResizeObserver");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__PerformanceObserver
//# unitInfo: Requires: Js_of_ocaml__Js, Stdlib__Array, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    t0 = Js_of_ocaml_Js[52][1],
    performanceObserver = t0.PerformanceObserver;
   function is_supported(param){
    return caml_call1(Js_of_ocaml_Js[6][5], performanceObserver);
   }
   function observe(entry_types, f){
    var
     _a_ =
       caml_call1
        (caml_call1(Stdlib_List[20], runtime.caml_jsstring_of_string),
         entry_types),
     entry_types$0 =
       runtime.caml_js_from_array(caml_call1(Stdlib_Array[11], _a_)),
     performance_observer_init = {};
    performance_observer_init.entryTypes = entry_types$0;
    var
     t3 = runtime.caml_js_wrap_callback(f),
     obs = new performanceObserver(t3);
    obs.observe(performance_observer_init);
    return obs;
   }
   var
    Js_of_ocaml_PerformanceObserve =
      [0, performanceObserver, is_supported, observe];
   runtime.caml_register_global
    (6, Js_of_ocaml_PerformanceObserve, "Js_of_ocaml__PerformanceObserver");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__MutationObserver
//# unitInfo: Requires: Js_of_ocaml__Js, Stdlib__Array
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Array = global_data.Stdlib__Array,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js;
   function empty_mutation_observer_init(param){return {};}
   var t0 = Js_of_ocaml_Js[52][1], mutationObserver = t0.MutationObserver;
   function is_supported(param){
    return caml_call1(Js_of_ocaml_Js[6][5], mutationObserver);
   }
   function observe
   (node,
    f,
    child_list,
    attributes,
    character_data,
    subtree,
    attribute_old_value,
    character_data_old_value,
    attribute_filter,
    param){
    var
     t1 = runtime.caml_js_wrap_callback(f),
     obs = new mutationObserver(t1),
     cfg = {};
    if(child_list){var t3 = child_list[1]; cfg.childList = t3;}
    if(attributes){var t5 = attributes[1]; cfg.attributes = t5;}
    if(character_data){var t7 = character_data[1]; cfg.characterData = t7;}
    if(subtree){var t9 = subtree[1]; cfg.subtree = t9;}
    if(attribute_old_value){
     var t11 = attribute_old_value[1];
     cfg.attributeOldValue = t11;
    }
    if(character_data_old_value){
     var t13 = character_data_old_value[1];
     cfg.characterDataOldValue = t13;
    }
    if(attribute_filter){
     var
      x = attribute_filter[1],
      t15 = runtime.caml_js_from_array(caml_call1(Stdlib_Array[11], x));
     cfg.attributeFilter = t15;
    }
    obs.observe(node, cfg);
    return obs;
   }
   var
    Js_of_ocaml_MutationObserver =
      [0,
       empty_mutation_observer_init,
       mutationObserver,
       is_supported,
       observe];
   runtime.caml_register_global
    (11, Js_of_ocaml_MutationObserver, "Js_of_ocaml__MutationObserver");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Jstable
//# unitInfo: Requires: Js_of_ocaml__Js, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst = "_";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib_List = global_data.Stdlib__List,
    t0 = Js_of_ocaml_Js[52][1],
    obj = t0.Object,
    cst_Jstable_keys = "Jstable.keys";
   function create(param){return new obj;}
   function add(t, t3, v){return t[t3.concat(cst)] = v;}
   function remove(t, t5){return delete t[t5.concat(cst)];}
   function find(t, t7){return t[t7.concat(cst)];}
   function keys(t9){
    var
     t8 = Js_of_ocaml_Js[52][1],
     t10 = t8.Object,
     key_array = t10.keys(t9),
     res = [0, 0],
     _b_ = key_array.length - 1 | 0,
     _a_ = 0;
    if(_b_ >= 0){
     var i = _a_;
     for(;;){
      var
       _c_ = caml_call2(Js_of_ocaml_Js[20], key_array, i),
       key =
         caml_call2
          (Js_of_ocaml_Js[6][8],
           _c_,
           function(param){return caml_call1(Stdlib[2], cst_Jstable_keys);}),
       t14 = key.length - 1 | 0,
       _d_ = res[1];
      res[1] = [0, key.substring(0, t14), _d_];
      var _e_ = i + 1 | 0;
      if(_b_ === i) break;
      i = _e_;
     }
    }
    return caml_call1(Stdlib_List[10], res[1]);
   }
   var Js_of_ocaml_Jstable = [0, create, add, remove, find, keys];
   runtime.caml_register_global
    (16, Js_of_ocaml_Jstable, "Js_of_ocaml__Jstable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Json
//# unitInfo: Requires: Js_of_ocaml__Js, Jsoo_runtime, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    dummy_int64 = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    t0 = Js_of_ocaml_Js[52][1],
    json = t0.JSON;
   function reviver(this$0, key, value){
    if(typeof value == "string") return runtime.caml_string_of_jsbytes(value);
    if
     (value instanceof Js_of_ocaml_Js[18]
      && 4 === value.length && 255 === value[0]){
     var _b_ = value[3], _c_ = value[2];
     return runtime.caml_int64_create_lo_mi_hi(value[1], _c_, _b_);
    }
    return value;
   }
   var input_reviver = runtime.caml_js_wrap_meth_callback(reviver);
   function unsafe_input(t2){return json.parse(t2, input_reviver);}
   var mlInt64_constr = dummy_int64.constructor;
   function output_reviver(key, value){
    var _a_ = Stdlib_Obj[15];
    return runtime.caml_obj_tag(value) === _a_
            ? runtime.caml_jsbytes_of_string(value)
            : value
              instanceof
              mlInt64_constr
              ? runtime.caml_js_from_array
                ([0, 255, value.lo, value.mi, value.hi])
              : value;
   }
   function output(obj){
    var t10 = runtime.caml_js_wrap_callback(output_reviver);
    return json.stringify(obj, t10);
   }
   var Js_of_ocaml_Json = [0, output, unsafe_input];
   runtime.caml_register_global(12, Js_of_ocaml_Json, "Js_of_ocaml__Json");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__CSS
//# unitInfo: Requires: Js_of_ocaml__Import, Js_of_ocaml__Js, Js_of_ocaml__Regexp, Stdlib, Stdlib__List, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_is_not_a_valid_color$1 = " is not a valid color",
    cst_is_not_a_valid_length$1 = " is not a valid length",
    cst_f_s = "%f%s",
    cst$1 = "): ",
    cst_0$1 = "0",
    cst_aliceblue$0 = "aliceblue",
    cst_antiquewhite$0 = "antiquewhite",
    cst_aqua$0 = "aqua",
    cst_aquamarine$0 = "aquamarine",
    cst_azure$0 = "azure",
    cst_beige$0 = "beige",
    cst_bisque$0 = "bisque",
    cst_black$0 = "black",
    cst_blanchedalmond$0 = "blanchedalmond",
    cst_blue$0 = "blue",
    cst_blueviolet$0 = "blueviolet",
    cst_brown$0 = "brown",
    cst_burlywood$0 = "burlywood",
    cst_cadetblue$0 = "cadetblue",
    cst_ch$0 = "ch",
    cst_chartreuse$0 = "chartreuse",
    cst_chocolate$0 = "chocolate",
    cst_cm$0 = "cm",
    cst_color_conversion_error$1 = "color conversion error (",
    cst_coral$0 = "coral",
    cst_cornflowerblue$0 = "cornflowerblue",
    cst_cornsilk$0 = "cornsilk",
    cst_crimson$0 = "crimson",
    cst_cyan$0 = "cyan",
    cst_darkblue$0 = "darkblue",
    cst_darkcyan$0 = "darkcyan",
    cst_darkgoldenrod$0 = "darkgoldenrod",
    cst_darkgray$0 = "darkgray",
    cst_darkgreen$0 = "darkgreen",
    cst_darkgrey$0 = "darkgrey",
    cst_darkkhaki$0 = "darkkhaki",
    cst_darkmagenta$0 = "darkmagenta",
    cst_darkolivegreen$0 = "darkolivegreen",
    cst_darkorange$0 = "darkorange",
    cst_darkorchid$0 = "darkorchid",
    cst_darkred$0 = "darkred",
    cst_darksalmon$0 = "darksalmon",
    cst_darkseagreen$0 = "darkseagreen",
    cst_darkslateblue$0 = "darkslateblue",
    cst_darkslategray$0 = "darkslategray",
    cst_darkslategrey$0 = "darkslategrey",
    cst_darkturquoise$0 = "darkturquoise",
    cst_darkviolet$0 = "darkviolet",
    cst_deeppink$0 = "deeppink",
    cst_deepskyblue$0 = "deepskyblue",
    cst_deg$0 = "deg",
    cst_dimgray$0 = "dimgray",
    cst_dimgrey$0 = "dimgrey",
    cst_dodgerblue$0 = "dodgerblue",
    cst_em$0 = "em",
    cst_ex$0 = "ex",
    cst_firebrick$0 = "firebrick",
    cst_floralwhite$0 = "floralwhite",
    cst_forestgreen$0 = "forestgreen",
    cst_fuchsia$0 = "fuchsia",
    cst_gainsboro$0 = "gainsboro",
    cst_gd$0 = "gd",
    cst_ghostwhite$0 = "ghostwhite",
    cst_gold$0 = "gold",
    cst_goldenrod$0 = "goldenrod",
    cst_grad$0 = "grad",
    cst_gray$0 = "gray",
    cst_green$0 = "green",
    cst_greenyellow$0 = "greenyellow",
    cst_grey$0 = "grey",
    cst_honeydew$0 = "honeydew",
    cst_hotpink$0 = "hotpink",
    cst_in$0 = "in",
    cst_indianred$0 = "indianred",
    cst_indigo$0 = "indigo",
    cst_ivory$0 = "ivory",
    cst_khaki$0 = "khaki",
    cst_lavender$0 = "lavender",
    cst_lavenderblush$0 = "lavenderblush",
    cst_lawngreen$0 = "lawngreen",
    cst_lemonchiffon$0 = "lemonchiffon",
    cst_length_conversion_error$1 = "length conversion error: ",
    cst_lightblue$0 = "lightblue",
    cst_lightcoral$0 = "lightcoral",
    cst_lightcyan$0 = "lightcyan",
    cst_lightgoldenrodyellow$0 = "lightgoldenrodyellow",
    cst_lightgray$0 = "lightgray",
    cst_lightgreen$0 = "lightgreen",
    cst_lightgrey$0 = "lightgrey",
    cst_lightpink$0 = "lightpink",
    cst_lightsalmon$0 = "lightsalmon",
    cst_lightseagreen$0 = "lightseagreen",
    cst_lightskyblue$0 = "lightskyblue",
    cst_lightslategray$0 = "lightslategray",
    cst_lightslategrey$0 = "lightslategrey",
    cst_lightsteelblue$0 = "lightsteelblue",
    cst_lightyellow$0 = "lightyellow",
    cst_lime$0 = "lime",
    cst_limegreen$0 = "limegreen",
    cst_linen$0 = "linen",
    cst_magenta$0 = "magenta",
    cst_maroon$0 = "maroon",
    cst_mediumaquamarine$0 = "mediumaquamarine",
    cst_mediumblue$0 = "mediumblue",
    cst_mediumorchid$0 = "mediumorchid",
    cst_mediumpurple$0 = "mediumpurple",
    cst_mediumseagreen$0 = "mediumseagreen",
    cst_mediumslateblue$0 = "mediumslateblue",
    cst_mediumspringgreen$0 = "mediumspringgreen",
    cst_mediumturquoise$0 = "mediumturquoise",
    cst_mediumvioletred$0 = "mediumvioletred",
    cst_midnightblue$0 = "midnightblue",
    cst_mintcream$0 = "mintcream",
    cst_mistyrose$0 = "mistyrose",
    cst_mm$0 = "mm",
    cst_moccasin$0 = "moccasin",
    cst_navajowhite$0 = "navajowhite",
    cst_navy$0 = "navy",
    cst_oldlace$0 = "oldlace",
    cst_olive$0 = "olive",
    cst_olivedrab$0 = "olivedrab",
    cst_orange$0 = "orange",
    cst_orangered$0 = "orangered",
    cst_orchid$0 = "orchid",
    cst_palegoldenrod$0 = "palegoldenrod",
    cst_palegreen$0 = "palegreen",
    cst_paleturquoise$0 = "paleturquoise",
    cst_palevioletred$0 = "palevioletred",
    cst_papayawhip$0 = "papayawhip",
    cst_pc$0 = "pc",
    cst_peachpuff$0 = "peachpuff",
    cst_peru$0 = "peru",
    cst_pink$0 = "pink",
    cst_plum$0 = "plum",
    cst_powderblue$0 = "powderblue",
    cst_pt$0 = "pt",
    cst_purple$0 = "purple",
    cst_px$0 = "px",
    cst_rad$0 = "rad",
    cst_red$0 = "red",
    cst_rem$0 = "rem",
    cst_rgb$0 = "rgb",
    cst_rgb = "rgb(",
    cst_rgba$0 = "rgba",
    cst_rgba = "rgba(",
    cst_rosybrown$0 = "rosybrown",
    cst_royalblue$0 = "royalblue",
    cst_saddlebrown$0 = "saddlebrown",
    cst_salmon$0 = "salmon",
    cst_sandybrown$0 = "sandybrown",
    cst_seagreen$0 = "seagreen",
    cst_seashell$0 = "seashell",
    cst_sienna$0 = "sienna",
    cst_silver$0 = "silver",
    cst_skyblue$0 = "skyblue",
    cst_slateblue$0 = "slateblue",
    cst_slategray$0 = "slategray",
    cst_slategrey$0 = "slategrey",
    cst_snow$0 = "snow",
    cst_springgreen$0 = "springgreen",
    cst_steelblue$0 = "steelblue",
    cst_tan$0 = "tan",
    cst_teal$0 = "teal",
    cst_thistle$0 = "thistle",
    cst_tomato$0 = "tomato",
    cst_turns$0 = "turns",
    cst_turquoise$0 = "turquoise",
    cst_vh$0 = "vh",
    cst_violet$0 = "violet",
    cst_vm$0 = "vm",
    cst_vw$0 = "vw",
    cst_wheat$0 = "wheat",
    cst_white$0 = "white",
    cst_whitesmoke$0 = "whitesmoke",
    cst_yellow$0 = "yellow",
    cst_yellowgreen$0 = "yellowgreen",
    caml_float_of_string = runtime.caml_float_of_string,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    partial = [8, [0, 0, 0], 0, 0, [12, 41, 0]],
    partial$0 = [12, 41, 0],
    partial$1 = [0, 0, 0],
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Regexp = global_data.Js_of_ocaml__Regexp,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Js_of_ocaml_Import = global_data.Js_of_ocaml__Import,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib_List = global_data.Stdlib__List,
    cst_aliceblue = cst_aliceblue$0,
    cst_antiquewhite = cst_antiquewhite$0,
    cst_aqua = cst_aqua$0,
    cst_aquamarine = cst_aquamarine$0,
    cst_azure = cst_azure$0,
    cst_beige = cst_beige$0,
    cst_bisque = cst_bisque$0,
    cst_black = cst_black$0,
    cst_blanchedalmond = cst_blanchedalmond$0,
    cst_blue = cst_blue$0,
    cst_blueviolet = cst_blueviolet$0,
    cst_brown = cst_brown$0,
    cst_burlywood = cst_burlywood$0,
    cst_cadetblue = cst_cadetblue$0,
    cst_chartreuse = cst_chartreuse$0,
    cst_chocolate = cst_chocolate$0,
    cst_coral = cst_coral$0,
    cst_cornflowerblue = cst_cornflowerblue$0,
    cst_cornsilk = cst_cornsilk$0,
    cst_crimson = cst_crimson$0,
    cst_cyan = cst_cyan$0,
    cst_darkblue = cst_darkblue$0,
    cst_darkcyan = cst_darkcyan$0,
    cst_darkgoldenrod = cst_darkgoldenrod$0,
    cst_darkgray = cst_darkgray$0,
    cst_darkgreen = cst_darkgreen$0,
    cst_darkgrey = cst_darkgrey$0,
    cst_darkkhaki = cst_darkkhaki$0,
    cst_darkmagenta = cst_darkmagenta$0,
    cst_darkolivegreen = cst_darkolivegreen$0,
    cst_darkorange = cst_darkorange$0,
    cst_darkorchid = cst_darkorchid$0,
    cst_darkred = cst_darkred$0,
    cst_darksalmon = cst_darksalmon$0,
    cst_darkseagreen = cst_darkseagreen$0,
    cst_darkslateblue = cst_darkslateblue$0,
    cst_darkslategray = cst_darkslategray$0,
    cst_darkslategrey = cst_darkslategrey$0,
    cst_darkturquoise = cst_darkturquoise$0,
    cst_darkviolet = cst_darkviolet$0,
    cst_deeppink = cst_deeppink$0,
    cst_deepskyblue = cst_deepskyblue$0,
    cst_dimgray = cst_dimgray$0,
    cst_dimgrey = cst_dimgrey$0,
    cst_dodgerblue = cst_dodgerblue$0,
    cst_firebrick = cst_firebrick$0,
    cst_floralwhite = cst_floralwhite$0,
    cst_forestgreen = cst_forestgreen$0,
    cst_fuchsia = cst_fuchsia$0,
    cst_gainsboro = cst_gainsboro$0,
    cst_ghostwhite = cst_ghostwhite$0,
    cst_gold = cst_gold$0,
    cst_goldenrod = cst_goldenrod$0,
    cst_gray = cst_gray$0,
    cst_grey = cst_grey$0,
    cst_green = cst_green$0,
    cst_greenyellow = cst_greenyellow$0,
    cst_honeydew = cst_honeydew$0,
    cst_hotpink = cst_hotpink$0,
    cst_indianred = cst_indianred$0,
    cst_indigo = cst_indigo$0,
    cst_ivory = cst_ivory$0,
    cst_khaki = cst_khaki$0,
    cst_lavender = cst_lavender$0,
    cst_lavenderblush = cst_lavenderblush$0,
    cst_lawngreen = cst_lawngreen$0,
    cst_lemonchiffon = cst_lemonchiffon$0,
    cst_lightblue = cst_lightblue$0,
    cst_lightcoral = cst_lightcoral$0,
    cst_lightcyan = cst_lightcyan$0,
    cst_lightgoldenrodyellow = cst_lightgoldenrodyellow$0,
    cst_lightgray = cst_lightgray$0,
    cst_lightgreen = cst_lightgreen$0,
    cst_lightgrey = cst_lightgrey$0,
    cst_lightpink = cst_lightpink$0,
    cst_lightsalmon = cst_lightsalmon$0,
    cst_lightseagreen = cst_lightseagreen$0,
    cst_lightskyblue = cst_lightskyblue$0,
    cst_lightslategray = cst_lightslategray$0,
    cst_lightslategrey = cst_lightslategrey$0,
    cst_lightsteelblue = cst_lightsteelblue$0,
    cst_lightyellow = cst_lightyellow$0,
    cst_lime = cst_lime$0,
    cst_limegreen = cst_limegreen$0,
    cst_linen = cst_linen$0,
    cst_magenta = cst_magenta$0,
    cst_maroon = cst_maroon$0,
    cst_mediumaquamarine = cst_mediumaquamarine$0,
    cst_mediumblue = cst_mediumblue$0,
    cst_mediumorchid = cst_mediumorchid$0,
    cst_mediumpurple = cst_mediumpurple$0,
    cst_mediumseagreen = cst_mediumseagreen$0,
    cst_mediumslateblue = cst_mediumslateblue$0,
    cst_mediumspringgreen = cst_mediumspringgreen$0,
    cst_mediumturquoise = cst_mediumturquoise$0,
    cst_mediumvioletred = cst_mediumvioletred$0,
    cst_midnightblue = cst_midnightblue$0,
    cst_mintcream = cst_mintcream$0,
    cst_mistyrose = cst_mistyrose$0,
    cst_moccasin = cst_moccasin$0,
    cst_navajowhite = cst_navajowhite$0,
    cst_navy = cst_navy$0,
    cst_oldlace = cst_oldlace$0,
    cst_olive = cst_olive$0,
    cst_olivedrab = cst_olivedrab$0,
    cst_orange = cst_orange$0,
    cst_orangered = cst_orangered$0,
    cst_orchid = cst_orchid$0,
    cst_palegoldenrod = cst_palegoldenrod$0,
    cst_palegreen = cst_palegreen$0,
    cst_paleturquoise = cst_paleturquoise$0,
    cst_palevioletred = cst_palevioletred$0,
    cst_papayawhip = cst_papayawhip$0,
    cst_peachpuff = cst_peachpuff$0,
    cst_peru = cst_peru$0,
    cst_pink = cst_pink$0,
    cst_plum = cst_plum$0,
    cst_powderblue = cst_powderblue$0,
    cst_purple = cst_purple$0,
    cst_red = cst_red$0,
    cst_rosybrown = cst_rosybrown$0,
    cst_royalblue = cst_royalblue$0,
    cst_saddlebrown = cst_saddlebrown$0,
    cst_salmon = cst_salmon$0,
    cst_sandybrown = cst_sandybrown$0,
    cst_seagreen = cst_seagreen$0,
    cst_seashell = cst_seashell$0,
    cst_sienna = cst_sienna$0,
    cst_silver = cst_silver$0,
    cst_skyblue = cst_skyblue$0,
    cst_slateblue = cst_slateblue$0,
    cst_slategray = cst_slategray$0,
    cst_slategrey = cst_slategrey$0,
    cst_snow = cst_snow$0,
    cst_springgreen = cst_springgreen$0,
    cst_steelblue = cst_steelblue$0,
    cst_tan = cst_tan$0,
    cst_teal = cst_teal$0,
    cst_thistle = cst_thistle$0,
    cst_tomato = cst_tomato$0,
    cst_turquoise = cst_turquoise$0,
    cst_violet = cst_violet$0,
    cst_wheat = cst_wheat$0,
    cst_white = cst_white$0,
    cst_whitesmoke = cst_whitesmoke$0,
    cst_yellow = cst_yellow$0,
    cst_yellowgreen = cst_yellowgreen$0,
    cst_is_not_a_valid_color_name = " is not a valid color name",
    _a_ = [0, 240, 248, 255],
    _b_ = [0, 250, 235, 215],
    _c_ = [0, 0, 255, 255],
    _d_ = [0, 127, 255, 212],
    _e_ = [0, 240, 255, 255],
    _f_ = [0, 245, 245, 220],
    _g_ = [0, 255, 228, 196],
    _h_ = [0, 0, 0, 0],
    _i_ = [0, 255, 235, 205],
    _j_ = [0, 0, 0, 255],
    _k_ = [0, 138, 43, 226],
    _l_ = [0, 165, 42, 42],
    _m_ = [0, 222, 184, 135],
    _n_ = [0, 95, 158, 160],
    _o_ = [0, 127, 255, 0],
    _p_ = [0, 210, 105, 30],
    _q_ = [0, 255, 127, 80],
    _r_ = [0, 100, 149, 237],
    _s_ = [0, 255, 248, 220],
    _t_ = [0, 220, 20, 60],
    _u_ = [0, 0, 255, 255],
    _v_ = [0, 0, 0, 139],
    _w_ = [0, 0, 139, 139],
    _x_ = [0, 184, 134, 11],
    _y_ = [0, 169, 169, 169],
    _z_ = [0, 0, 100, 0],
    _A_ = [0, 169, 169, 169],
    _B_ = [0, 189, 183, 107],
    _C_ = [0, 139, 0, 139],
    _D_ = [0, 85, 107, 47],
    _E_ = [0, 255, 140, 0],
    _F_ = [0, 153, 50, 204],
    _G_ = [0, 139, 0, 0],
    _H_ = [0, 233, 150, 122],
    _I_ = [0, 143, 188, 143],
    _J_ = [0, 72, 61, 139],
    _K_ = [0, 47, 79, 79],
    _L_ = [0, 47, 79, 79],
    _M_ = [0, 0, 206, 209],
    _N_ = [0, 148, 0, 211],
    _O_ = [0, 255, 20, 147],
    _P_ = [0, 0, 191, 255],
    _Q_ = [0, 105, 105, 105],
    _R_ = [0, 105, 105, 105],
    _S_ = [0, 30, 144, 255],
    _T_ = [0, 178, 34, 34],
    _U_ = [0, 255, 250, 240],
    _V_ = [0, 34, 139, 34],
    _W_ = [0, 255, 0, 255],
    _X_ = [0, 220, 220, 220],
    _Y_ = [0, 248, 248, 255],
    _Z_ = [0, 255, 215, 0],
    ___ = [0, 218, 165, 32],
    _$_ = [0, 128, 128, 128],
    _aa_ = [0, 128, 128, 128],
    _ab_ = [0, 0, 128, 0],
    _ac_ = [0, 173, 255, 47],
    _ad_ = [0, 240, 255, 240],
    _ae_ = [0, 255, 105, 180],
    _af_ = [0, 205, 92, 92],
    _ag_ = [0, 75, 0, 130],
    _ah_ = [0, 255, 255, 240],
    _ai_ = [0, 240, 230, 140],
    _aj_ = [0, 230, 230, 250],
    _ak_ = [0, 255, 240, 245],
    _al_ = [0, 124, 252, 0],
    _am_ = [0, 255, 250, 205],
    _an_ = [0, 173, 216, 230],
    _ao_ = [0, 240, 128, 128],
    _ap_ = [0, 224, 255, 255],
    _aq_ = [0, 250, 250, 210],
    _ar_ = [0, 211, 211, 211],
    _as_ = [0, 144, 238, 144],
    _at_ = [0, 211, 211, 211],
    _au_ = [0, 255, 182, 193],
    _av_ = [0, 255, 160, 122],
    _aw_ = [0, 32, 178, 170],
    _ax_ = [0, 135, 206, 250],
    _ay_ = [0, 119, 136, 153],
    _az_ = [0, 119, 136, 153],
    _aA_ = [0, 176, 196, 222],
    _aB_ = [0, 255, 255, 224],
    _aC_ = [0, 0, 255, 0],
    _aD_ = [0, 50, 205, 50],
    _aE_ = [0, 250, 240, 230],
    _aF_ = [0, 255, 0, 255],
    _aG_ = [0, 128, 0, 0],
    _aH_ = [0, 102, 205, 170],
    _aI_ = [0, 0, 0, 205],
    _aJ_ = [0, 186, 85, 211],
    _aK_ = [0, 147, 112, 219],
    _aL_ = [0, 60, 179, 113],
    _aM_ = [0, 123, 104, 238],
    _aN_ = [0, 0, 250, 154],
    _aO_ = [0, 72, 209, 204],
    _aP_ = [0, 199, 21, 133],
    _aQ_ = [0, 25, 25, 112],
    _aR_ = [0, 245, 255, 250],
    _aS_ = [0, 255, 228, 225],
    _aT_ = [0, 255, 228, 181],
    _aU_ = [0, 255, 222, 173],
    _aV_ = [0, 0, 0, 128],
    _aW_ = [0, 253, 245, 230],
    _aX_ = [0, 128, 128, 0],
    _aY_ = [0, 107, 142, 35],
    _aZ_ = [0, 255, 165, 0],
    _a0_ = [0, 255, 69, 0],
    _a1_ = [0, 218, 112, 214],
    _a2_ = [0, 238, 232, 170],
    _a3_ = [0, 152, 251, 152],
    _a4_ = [0, 175, 238, 238],
    _a5_ = [0, 219, 112, 147],
    _a6_ = [0, 255, 239, 213],
    _a7_ = [0, 255, 218, 185],
    _a8_ = [0, 205, 133, 63],
    _a9_ = [0, 255, 192, 203],
    _a__ = [0, 221, 160, 221],
    _a$_ = [0, 176, 224, 230],
    _ba_ = [0, 128, 0, 128],
    _bb_ = [0, 255, 0, 0],
    _bc_ = [0, 188, 143, 143],
    _bd_ = [0, 65, 105, 225],
    _be_ = [0, 139, 69, 19],
    _bf_ = [0, 250, 128, 114],
    _bg_ = [0, 244, 164, 96],
    _bh_ = [0, 46, 139, 87],
    _bi_ = [0, 255, 245, 238],
    _bj_ = [0, 160, 82, 45],
    _bk_ = [0, 192, 192, 192],
    _bl_ = [0, 135, 206, 235],
    _bm_ = [0, 106, 90, 205],
    _bn_ = [0, 112, 128, 144],
    _bo_ = [0, 112, 128, 144],
    _bp_ = [0, 255, 250, 250],
    _bq_ = [0, 0, 255, 127],
    _br_ = [0, 70, 130, 180],
    _bs_ = [0, 210, 180, 140],
    _bt_ = [0, 0, 128, 128],
    _bu_ = [0, 216, 191, 216],
    _bv_ = [0, 255, 99, 71],
    _bw_ = [0, 64, 224, 208],
    _bx_ = [0, 238, 130, 238],
    _by_ = [0, 245, 222, 179],
    _bz_ = [0, 255, 255, 255],
    _bA_ = [0, 245, 245, 245],
    _bB_ = [0, 255, 255, 0],
    _bC_ = [0, 154, 205, 50],
    _bD_ =
      [0,
       [11,
        cst_rgb,
        [4,
         0,
         0,
         0,
         [12, 44, [4, 0, 0, 0, [12, 44, [4, 0, 0, 0, [12, 41, 0]]]]]]],
       "rgb(%d,%d,%d)"],
    _bE_ =
      [0,
       [11,
        cst_rgb,
        [4,
         0,
         0,
         0,
         [12,
          37,
          [12,
           44,
           [4,
            0,
            0,
            0,
            [12, 37, [12, 44, [4, 0, 0, 0, [12, 37, [12, 41, 0]]]]]]]]]],
       "rgb(%d%%,%d%%,%d%%)"],
    _bF_ =
      [0,
       [11,
        cst_rgba,
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,
           0,
           0,
           0,
           [12, 44, [4, 0, 0, 0, [12, 44, [8, [0, 0, 0], 0, 0, [12, 41, 0]]]]]]]]],
       "rgba(%d,%d,%d,%f)"],
    _bG_ =
      [0,
       [11,
        cst_rgba,
        [4,
         0,
         0,
         0,
         [12,
          37,
          [12,
           44,
           [4,
            0,
            0,
            0,
            [12, 37, [12, 44, [4, 0, 0, 0, [12, 37, [12, 44, partial]]]]]]]]]],
       "rgba(%d%%,%d%%,%d%%,%f)"],
    _bH_ =
      [0,
       [11,
        "hsl(",
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,
           0,
           0,
           0,
           [12, 37, [12, 44, [4, 0, 0, 0, [12, 37, [12, 41, 0]]]]]]]]],
       "hsl(%d,%d%%,%d%%)"],
    _bI_ =
      [0,
       [11,
        "hsla(",
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,
           0,
           0,
           0,
           [12,
            37,
            [12,
             44,
             [4, 0, 0, 0, [12, 37, [12, 44, [8, partial$1, 0, 0, partial$0]]]]]]]]]],
       "hsla(%d,%d%%,%d%%,%f)"],
    cst_is_out_of_valid_range = " is out of valid range",
    _bJ_ =
      [0,
       [12,
        35,
        [4, 8, [0, 2, 2], 0, [4, 8, [0, 2, 2], 0, [4, 8, [0, 2, 2], 0, 0]]]],
       "#%02X%02X%02X"],
    _bK_ =
      caml_list_of_js_array
       ([cst_aliceblue$0,
         cst_antiquewhite$0,
         cst_aqua$0,
         cst_aquamarine$0,
         cst_azure$0,
         cst_beige$0,
         cst_bisque$0,
         cst_black$0,
         cst_blanchedalmond$0,
         cst_blue$0,
         cst_blueviolet$0,
         cst_brown$0,
         cst_burlywood$0,
         cst_cadetblue$0,
         cst_chartreuse$0,
         cst_chocolate$0,
         cst_coral$0,
         cst_cornflowerblue$0,
         cst_cornsilk$0,
         cst_crimson$0,
         cst_cyan$0,
         cst_darkblue$0,
         cst_darkcyan$0,
         cst_darkgoldenrod$0,
         cst_darkgray$0,
         cst_darkgreen$0,
         cst_darkgrey$0,
         cst_darkkhaki$0,
         cst_darkmagenta$0,
         cst_darkolivegreen$0,
         cst_darkorange$0,
         cst_darkorchid$0,
         cst_darkred$0,
         cst_darksalmon$0,
         cst_darkseagreen$0,
         cst_darkslateblue$0,
         cst_darkslategray$0,
         cst_darkslategrey$0,
         cst_darkturquoise$0,
         cst_darkviolet$0,
         cst_deeppink$0,
         cst_deepskyblue$0,
         cst_dimgray$0,
         cst_dimgrey$0,
         cst_dodgerblue$0,
         cst_firebrick$0,
         cst_floralwhite$0,
         cst_forestgreen$0,
         cst_fuchsia$0,
         cst_gainsboro$0,
         cst_ghostwhite$0,
         cst_gold$0,
         cst_goldenrod$0,
         cst_gray$0,
         cst_green$0,
         cst_greenyellow$0,
         cst_grey$0,
         cst_honeydew$0,
         cst_hotpink$0,
         cst_indianred$0,
         cst_indigo$0,
         cst_ivory$0,
         cst_khaki$0,
         cst_lavender$0,
         cst_lavenderblush$0,
         cst_lawngreen$0,
         cst_lemonchiffon$0,
         cst_lightblue$0,
         cst_lightcoral$0,
         cst_lightcyan$0,
         cst_lightgoldenrodyellow$0,
         cst_lightgray$0,
         cst_lightgreen$0,
         cst_lightgrey$0,
         cst_lightpink$0,
         cst_lightsalmon$0,
         cst_lightseagreen$0,
         cst_lightskyblue$0,
         cst_lightslategray$0,
         cst_lightslategrey$0,
         cst_lightsteelblue$0,
         cst_lightyellow$0,
         cst_lime$0,
         cst_limegreen$0,
         cst_linen$0,
         cst_magenta$0,
         cst_maroon$0,
         cst_mediumaquamarine$0,
         cst_mediumblue$0,
         cst_mediumorchid$0,
         cst_mediumpurple$0,
         cst_mediumseagreen$0,
         cst_mediumslateblue$0,
         cst_mediumspringgreen$0,
         cst_mediumturquoise$0,
         cst_mediumvioletred$0,
         cst_midnightblue$0,
         cst_mintcream$0,
         cst_mistyrose$0,
         cst_moccasin$0,
         cst_navajowhite$0,
         cst_navy$0,
         cst_oldlace$0,
         cst_olive$0,
         cst_olivedrab$0,
         cst_orange$0,
         cst_orangered$0,
         cst_orchid$0,
         cst_palegoldenrod$0,
         cst_palegreen$0,
         cst_paleturquoise$0,
         cst_palevioletred$0,
         cst_papayawhip$0,
         cst_peachpuff$0,
         cst_peru$0,
         cst_pink$0,
         cst_plum$0,
         cst_powderblue$0,
         cst_purple$0,
         cst_red$0,
         cst_rosybrown$0,
         cst_royalblue$0,
         cst_saddlebrown$0,
         cst_salmon$0,
         cst_sandybrown$0,
         cst_seagreen$0,
         cst_seashell$0,
         cst_sienna$0,
         cst_silver$0,
         cst_skyblue$0,
         cst_slateblue$0,
         cst_slategray$0,
         cst_slategrey$0,
         cst_snow$0,
         cst_springgreen$0,
         cst_steelblue$0,
         cst_tan$0,
         cst_teal$0,
         cst_thistle$0,
         cst_tomato$0,
         cst_turquoise$0,
         cst_violet$0,
         cst_wheat$0,
         cst_white$0,
         cst_whitesmoke$0,
         cst_yellow$0,
         cst_yellowgreen$0]),
    cst_is_not_a_valid_color = cst_is_not_a_valid_color$1,
    cst_is_not_a_valid_color$0 = cst_is_not_a_valid_color$1,
    cst_rgba_d_d_d_d_d =
      "(rgba?)\\((?:(\\d*),(\\d*),(\\d*)(?:,(\\d*(?:\\.\\d*)?))?)\\)",
    cst_rgba_d_d_d_d_d$0 =
      "(rgba?)\\((?:(\\d*)%,(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)",
    cst_hsla_d_d_d_d_d =
      "(hsla?)\\((?:(\\d*),(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)",
    cst_color_conversion_error = cst_color_conversion_error$1,
    cst_color_conversion_error$0 = cst_color_conversion_error$1,
    cst_0 = cst_0$1,
    cst_em = cst_em$0,
    _bL_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_ex = cst_ex$0,
    _bM_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_px = cst_px$0,
    _bN_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_gd = cst_gd$0,
    _bO_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_rem = cst_rem$0,
    _bP_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_vw = cst_vw$0,
    _bQ_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_vh = cst_vh$0,
    _bR_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_vm = cst_vm$0,
    _bS_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_ch = cst_ch$0,
    _bT_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_mm = cst_mm$0,
    _bU_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_cm = cst_cm$0,
    _bV_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_in = cst_in$0,
    _bW_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_pt = cst_pt$0,
    _bX_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_pc = cst_pc$0,
    _bY_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_0$0 = cst_0$1,
    cst_is_not_a_valid_length = cst_is_not_a_valid_length$1,
    cst_d_d_s_S = "^(\\d*(?:\\.\\d*)?)\\s*(\\S*)$",
    cst_length_conversion_error = cst_length_conversion_error$1;
   function string_of_name(param){
    var _cO_ = param;
    if(74 <= _cO_){
     if(111 <= _cO_)
      switch(_cO_){
        case 111:
         return cst_palevioletred;
        case 112:
         return cst_papayawhip;
        case 113:
         return cst_peachpuff;
        case 114:
         return cst_peru;
        case 115:
         return cst_pink;
        case 116:
         return cst_plum;
        case 117:
         return cst_powderblue;
        case 118:
         return cst_purple;
        case 119:
         return cst_red;
        case 120:
         return cst_rosybrown;
        case 121:
         return cst_royalblue;
        case 122:
         return cst_saddlebrown;
        case 123:
         return cst_salmon;
        case 124:
         return cst_sandybrown;
        case 125:
         return cst_seagreen;
        case 126:
         return cst_seashell;
        case 127:
         return cst_sienna;
        case 128:
         return cst_silver;
        case 129:
         return cst_skyblue;
        case 130:
         return cst_slateblue;
        case 131:
         return cst_slategray;
        case 132:
         return cst_slategrey;
        case 133:
         return cst_snow;
        case 134:
         return cst_springgreen;
        case 135:
         return cst_steelblue;
        case 136:
         return cst_tan;
        case 137:
         return cst_teal;
        case 138:
         return cst_thistle;
        case 139:
         return cst_tomato;
        case 140:
         return cst_turquoise;
        case 141:
         return cst_violet;
        case 142:
         return cst_wheat;
        case 143:
         return cst_white;
        case 144:
         return cst_whitesmoke;
        case 145:
         return cst_yellow;
        default: return cst_yellowgreen;
      }
     switch(_cO_){
       case 74:
        return cst_lightpink;
       case 75:
        return cst_lightsalmon;
       case 76:
        return cst_lightseagreen;
       case 77:
        return cst_lightskyblue;
       case 78:
        return cst_lightslategray;
       case 79:
        return cst_lightslategrey;
       case 80:
        return cst_lightsteelblue;
       case 81:
        return cst_lightyellow;
       case 82:
        return cst_lime;
       case 83:
        return cst_limegreen;
       case 84:
        return cst_linen;
       case 85:
        return cst_magenta;
       case 86:
        return cst_maroon;
       case 87:
        return cst_mediumaquamarine;
       case 88:
        return cst_mediumblue;
       case 89:
        return cst_mediumorchid;
       case 90:
        return cst_mediumpurple;
       case 91:
        return cst_mediumseagreen;
       case 92:
        return cst_mediumslateblue;
       case 93:
        return cst_mediumspringgreen;
       case 94:
        return cst_mediumturquoise;
       case 95:
        return cst_mediumvioletred;
       case 96:
        return cst_midnightblue;
       case 97:
        return cst_mintcream;
       case 98:
        return cst_mistyrose;
       case 99:
        return cst_moccasin;
       case 100:
        return cst_navajowhite;
       case 101:
        return cst_navy;
       case 102:
        return cst_oldlace;
       case 103:
        return cst_olive;
       case 104:
        return cst_olivedrab;
       case 105:
        return cst_orange;
       case 106:
        return cst_orangered;
       case 107:
        return cst_orchid;
       case 108:
        return cst_palegoldenrod;
       case 109:
        return cst_palegreen;
       default: return cst_paleturquoise;
     }
    }
    if(37 <= _cO_)
     switch(_cO_){
       case 37:
        return cst_darkslategrey;
       case 38:
        return cst_darkturquoise;
       case 39:
        return cst_darkviolet;
       case 40:
        return cst_deeppink;
       case 41:
        return cst_deepskyblue;
       case 42:
        return cst_dimgray;
       case 43:
        return cst_dimgrey;
       case 44:
        return cst_dodgerblue;
       case 45:
        return cst_firebrick;
       case 46:
        return cst_floralwhite;
       case 47:
        return cst_forestgreen;
       case 48:
        return cst_fuchsia;
       case 49:
        return cst_gainsboro;
       case 50:
        return cst_ghostwhite;
       case 51:
        return cst_gold;
       case 52:
        return cst_goldenrod;
       case 53:
        return cst_gray;
       case 54:
        return cst_grey;
       case 55:
        return cst_green;
       case 56:
        return cst_greenyellow;
       case 57:
        return cst_honeydew;
       case 58:
        return cst_hotpink;
       case 59:
        return cst_indianred;
       case 60:
        return cst_indigo;
       case 61:
        return cst_ivory;
       case 62:
        return cst_khaki;
       case 63:
        return cst_lavender;
       case 64:
        return cst_lavenderblush;
       case 65:
        return cst_lawngreen;
       case 66:
        return cst_lemonchiffon;
       case 67:
        return cst_lightblue;
       case 68:
        return cst_lightcoral;
       case 69:
        return cst_lightcyan;
       case 70:
        return cst_lightgoldenrodyellow;
       case 71:
        return cst_lightgray;
       case 72:
        return cst_lightgreen;
       default: return cst_lightgrey;
     }
    switch(_cO_){
      case 0:
       return cst_aliceblue;
      case 1:
       return cst_antiquewhite;
      case 2:
       return cst_aqua;
      case 3:
       return cst_aquamarine;
      case 4:
       return cst_azure;
      case 5:
       return cst_beige;
      case 6:
       return cst_bisque;
      case 7:
       return cst_black;
      case 8:
       return cst_blanchedalmond;
      case 9:
       return cst_blue;
      case 10:
       return cst_blueviolet;
      case 11:
       return cst_brown;
      case 12:
       return cst_burlywood;
      case 13:
       return cst_cadetblue;
      case 14:
       return cst_chartreuse;
      case 15:
       return cst_chocolate;
      case 16:
       return cst_coral;
      case 17:
       return cst_cornflowerblue;
      case 18:
       return cst_cornsilk;
      case 19:
       return cst_crimson;
      case 20:
       return cst_cyan;
      case 21:
       return cst_darkblue;
      case 22:
       return cst_darkcyan;
      case 23:
       return cst_darkgoldenrod;
      case 24:
       return cst_darkgray;
      case 25:
       return cst_darkgreen;
      case 26:
       return cst_darkgrey;
      case 27:
       return cst_darkkhaki;
      case 28:
       return cst_darkmagenta;
      case 29:
       return cst_darkolivegreen;
      case 30:
       return cst_darkorange;
      case 31:
       return cst_darkorchid;
      case 32:
       return cst_darkred;
      case 33:
       return cst_darksalmon;
      case 34:
       return cst_darkseagreen;
      case 35:
       return cst_darkslateblue;
      default: return cst_darkslategray;
    }
   }
   function name_of_string(s){
    var switch$0 = caml_string_compare(s, cst_lightgrey$0);
    if(0 <= switch$0){
     if(0 >= switch$0) return 73;
     var switch$1 = caml_string_compare(s, cst_paleturquoise$0);
     if(0 <= switch$1){
      if(0 >= switch$1) return 110;
      var switch$2 = caml_string_compare(s, cst_skyblue$0);
      if(0 <= switch$2){
       if(0 >= switch$2) return 129;
       var switch$3 = caml_string_compare(s, cst_thistle$0);
       if(0 <= switch$3){
        if(0 >= switch$3) return 138;
        if(s === cst_tomato$0) return 139;
        if(s === cst_turquoise$0) return 140;
        if(s === cst_violet$0) return 141;
        if(s === cst_wheat$0) return 142;
        if(s === cst_white$0) return 143;
        if(s === cst_whitesmoke$0) return 144;
        if(s === cst_yellow$0) return 145;
        if(s === cst_yellowgreen$0) return 146;
       }
       else{
        if(s === cst_slateblue$0) return 130;
        if(s === cst_slategray$0) return 131;
        if(s === cst_slategrey$0) return 132;
        if(s === cst_snow$0) return 133;
        if(s === cst_springgreen$0) return 134;
        if(s === cst_steelblue$0) return 135;
        if(s === cst_tan$0) return 136;
        if(s === cst_teal$0) return 137;
       }
      }
      else{
       var switch$4 = caml_string_compare(s, cst_rosybrown$0);
       if(0 <= switch$4){
        if(0 >= switch$4) return 120;
        if(s === cst_royalblue$0) return 121;
        if(s === cst_saddlebrown$0) return 122;
        if(s === cst_salmon$0) return 123;
        if(s === cst_sandybrown$0) return 124;
        if(s === cst_seagreen$0) return 125;
        if(s === cst_seashell$0) return 126;
        if(s === cst_sienna$0) return 127;
        if(s === cst_silver$0) return 128;
       }
       else{
        if(s === cst_palevioletred$0) return 111;
        if(s === cst_papayawhip$0) return 112;
        if(s === cst_peachpuff$0) return 113;
        if(s === cst_peru$0) return 114;
        if(s === cst_pink$0) return 115;
        if(s === cst_plum$0) return 116;
        if(s === cst_powderblue$0) return 117;
        if(s === cst_purple$0) return 118;
        if(s === cst_red$0) return 119;
       }
      }
     }
     else{
      var switch$5 = caml_string_compare(s, cst_mediumslateblue$0);
      if(0 <= switch$5){
       if(0 >= switch$5) return 92;
       var switch$6 = caml_string_compare(s, cst_navy$0);
       if(0 <= switch$6){
        if(0 >= switch$6) return 101;
        if(s === cst_oldlace$0) return 102;
        if(s === cst_olive$0) return 103;
        if(s === cst_olivedrab$0) return 104;
        if(s === cst_orange$0) return 105;
        if(s === cst_orangered$0) return 106;
        if(s === cst_orchid$0) return 107;
        if(s === cst_palegoldenrod$0) return 108;
        if(s === cst_palegreen$0) return 109;
       }
       else{
        if(s === cst_mediumspringgreen$0) return 93;
        if(s === cst_mediumturquoise$0) return 94;
        if(s === cst_mediumvioletred$0) return 95;
        if(s === cst_midnightblue$0) return 96;
        if(s === cst_mintcream$0) return 97;
        if(s === cst_mistyrose$0) return 98;
        if(s === cst_moccasin$0) return 99;
        if(s === cst_navajowhite$0) return 100;
       }
      }
      else{
       var switch$7 = caml_string_compare(s, cst_limegreen$0);
       if(0 <= switch$7){
        if(0 >= switch$7) return 83;
        if(s === cst_linen$0) return 84;
        if(s === cst_magenta$0) return 85;
        if(s === cst_maroon$0) return 86;
        if(s === cst_mediumaquamarine$0) return 87;
        if(s === cst_mediumblue$0) return 88;
        if(s === cst_mediumorchid$0) return 89;
        if(s === cst_mediumpurple$0) return 90;
        if(s === cst_mediumseagreen$0) return 91;
       }
       else{
        if(s === cst_lightpink$0) return 74;
        if(s === cst_lightsalmon$0) return 75;
        if(s === cst_lightseagreen$0) return 76;
        if(s === cst_lightskyblue$0) return 77;
        if(s === cst_lightslategray$0) return 78;
        if(s === cst_lightslategrey$0) return 79;
        if(s === cst_lightsteelblue$0) return 80;
        if(s === cst_lightyellow$0) return 81;
        if(s === cst_lime$0) return 82;
       }
      }
     }
    }
    else{
     var switch$8 = caml_string_compare(s, cst_darkslategray$0);
     if(0 <= switch$8){
      if(0 >= switch$8) return 36;
      var switch$9 = caml_string_compare(s, cst_greenyellow$0);
      if(0 <= switch$9){
       if(0 >= switch$9) return 56;
       var switch$10 = caml_string_compare(s, cst_lavenderblush$0);
       if(0 <= switch$10){
        if(0 >= switch$10) return 64;
        if(s === cst_lawngreen$0) return 65;
        if(s === cst_lemonchiffon$0) return 66;
        if(s === cst_lightblue$0) return 67;
        if(s === cst_lightcoral$0) return 68;
        if(s === cst_lightcyan$0) return 69;
        if(s === cst_lightgoldenrodyellow$0) return 70;
        if(s === cst_lightgray$0) return 71;
        if(s === cst_lightgreen$0) return 72;
       }
       else{
        if(s === cst_grey$0) return 54;
        if(s === cst_honeydew$0) return 57;
        if(s === cst_hotpink$0) return 58;
        if(s === cst_indianred$0) return 59;
        if(s === cst_indigo$0) return 60;
        if(s === cst_ivory$0) return 61;
        if(s === cst_khaki$0) return 62;
        if(s === cst_lavender$0) return 63;
       }
      }
      else{
       var switch$11 = caml_string_compare(s, cst_floralwhite$0);
       if(0 <= switch$11){
        if(0 >= switch$11) return 46;
        if(s === cst_forestgreen$0) return 47;
        if(s === cst_fuchsia$0) return 48;
        if(s === cst_gainsboro$0) return 49;
        if(s === cst_ghostwhite$0) return 50;
        if(s === cst_gold$0) return 51;
        if(s === cst_goldenrod$0) return 52;
        if(s === cst_gray$0) return 53;
        if(s === cst_green$0) return 55;
       }
       else{
        if(s === cst_darkslategrey$0) return 37;
        if(s === cst_darkturquoise$0) return 38;
        if(s === cst_darkviolet$0) return 39;
        if(s === cst_deeppink$0) return 40;
        if(s === cst_deepskyblue$0) return 41;
        if(s === cst_dimgray$0) return 42;
        if(s === cst_dimgrey$0) return 43;
        if(s === cst_dodgerblue$0) return 44;
        if(s === cst_firebrick$0) return 45;
       }
      }
     }
     else{
      var switch$12 = caml_string_compare(s, cst_cornsilk$0);
      if(0 <= switch$12){
       if(0 >= switch$12) return 18;
       var switch$13 = caml_string_compare(s, cst_darkkhaki$0);
       if(0 <= switch$13){
        if(0 >= switch$13) return 27;
        if(s === cst_darkmagenta$0) return 28;
        if(s === cst_darkolivegreen$0) return 29;
        if(s === cst_darkorange$0) return 30;
        if(s === cst_darkorchid$0) return 31;
        if(s === cst_darkred$0) return 32;
        if(s === cst_darksalmon$0) return 33;
        if(s === cst_darkseagreen$0) return 34;
        if(s === cst_darkslateblue$0) return 35;
       }
       else{
        if(s === cst_crimson$0) return 19;
        if(s === cst_cyan$0) return 20;
        if(s === cst_darkblue$0) return 21;
        if(s === cst_darkcyan$0) return 22;
        if(s === cst_darkgoldenrod$0) return 23;
        if(s === cst_darkgray$0) return 24;
        if(s === cst_darkgreen$0) return 25;
        if(s === cst_darkgrey$0) return 26;
       }
      }
      else{
       var switch$14 = caml_string_compare(s, cst_blue$0);
       if(0 <= switch$14){
        if(0 >= switch$14) return 9;
        if(s === cst_blueviolet$0) return 10;
        if(s === cst_brown$0) return 11;
        if(s === cst_burlywood$0) return 12;
        if(s === cst_cadetblue$0) return 13;
        if(s === cst_chartreuse$0) return 14;
        if(s === cst_chocolate$0) return 15;
        if(s === cst_coral$0) return 16;
        if(s === cst_cornflowerblue$0) return 17;
       }
       else{
        if(s === cst_aliceblue$0) return 0;
        if(s === cst_antiquewhite$0) return 1;
        if(s === cst_aqua$0) return 2;
        if(s === cst_aquamarine$0) return 3;
        if(s === cst_azure$0) return 4;
        if(s === cst_beige$0) return 5;
        if(s === cst_bisque$0) return 6;
        if(s === cst_black$0) return 7;
        if(s === cst_blanchedalmond$0) return 8;
       }
      }
     }
    }
    var _cN_ = caml_call2(Stdlib[28], s, cst_is_not_a_valid_color_name);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], _cN_], 1);
   }
   function rgb_of_name(param){
    var _cM_ = param;
    if(74 <= _cM_){
     if(111 <= _cM_)
      switch(_cM_){
        case 111:
         return _a5_;
        case 112:
         return _a6_;
        case 113:
         return _a7_;
        case 114:
         return _a8_;
        case 115:
         return _a9_;
        case 116:
         return _a__;
        case 117:
         return _a$_;
        case 118:
         return _ba_;
        case 119:
         return _bb_;
        case 120:
         return _bc_;
        case 121:
         return _bd_;
        case 122:
         return _be_;
        case 123:
         return _bf_;
        case 124:
         return _bg_;
        case 125:
         return _bh_;
        case 126:
         return _bi_;
        case 127:
         return _bj_;
        case 128:
         return _bk_;
        case 129:
         return _bl_;
        case 130:
         return _bm_;
        case 131:
         return _bn_;
        case 132:
         return _bo_;
        case 133:
         return _bp_;
        case 134:
         return _bq_;
        case 135:
         return _br_;
        case 136:
         return _bs_;
        case 137:
         return _bt_;
        case 138:
         return _bu_;
        case 139:
         return _bv_;
        case 140:
         return _bw_;
        case 141:
         return _bx_;
        case 142:
         return _by_;
        case 143:
         return _bz_;
        case 144:
         return _bA_;
        case 145:
         return _bB_;
        default: return _bC_;
      }
     switch(_cM_){
       case 74:
        return _au_;
       case 75:
        return _av_;
       case 76:
        return _aw_;
       case 77:
        return _ax_;
       case 78:
        return _ay_;
       case 79:
        return _az_;
       case 80:
        return _aA_;
       case 81:
        return _aB_;
       case 82:
        return _aC_;
       case 83:
        return _aD_;
       case 84:
        return _aE_;
       case 85:
        return _aF_;
       case 86:
        return _aG_;
       case 87:
        return _aH_;
       case 88:
        return _aI_;
       case 89:
        return _aJ_;
       case 90:
        return _aK_;
       case 91:
        return _aL_;
       case 92:
        return _aM_;
       case 93:
        return _aN_;
       case 94:
        return _aO_;
       case 95:
        return _aP_;
       case 96:
        return _aQ_;
       case 97:
        return _aR_;
       case 98:
        return _aS_;
       case 99:
        return _aT_;
       case 100:
        return _aU_;
       case 101:
        return _aV_;
       case 102:
        return _aW_;
       case 103:
        return _aX_;
       case 104:
        return _aY_;
       case 105:
        return _aZ_;
       case 106:
        return _a0_;
       case 107:
        return _a1_;
       case 108:
        return _a2_;
       case 109:
        return _a3_;
       default: return _a4_;
     }
    }
    if(37 <= _cM_)
     switch(_cM_){
       case 37:
        return _L_;
       case 38:
        return _M_;
       case 39:
        return _N_;
       case 40:
        return _O_;
       case 41:
        return _P_;
       case 42:
        return _Q_;
       case 43:
        return _R_;
       case 44:
        return _S_;
       case 45:
        return _T_;
       case 46:
        return _U_;
       case 47:
        return _V_;
       case 48:
        return _W_;
       case 49:
        return _X_;
       case 50:
        return _Y_;
       case 51:
        return _Z_;
       case 52:
        return ___;
       case 53:
        return _$_;
       case 54:
        return _aa_;
       case 55:
        return _ab_;
       case 56:
        return _ac_;
       case 57:
        return _ad_;
       case 58:
        return _ae_;
       case 59:
        return _af_;
       case 60:
        return _ag_;
       case 61:
        return _ah_;
       case 62:
        return _ai_;
       case 63:
        return _aj_;
       case 64:
        return _ak_;
       case 65:
        return _al_;
       case 66:
        return _am_;
       case 67:
        return _an_;
       case 68:
        return _ao_;
       case 69:
        return _ap_;
       case 70:
        return _aq_;
       case 71:
        return _ar_;
       case 72:
        return _as_;
       default: return _at_;
     }
    switch(_cM_){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      case 3:
       return _d_;
      case 4:
       return _e_;
      case 5:
       return _f_;
      case 6:
       return _g_;
      case 7:
       return _h_;
      case 8:
       return _i_;
      case 9:
       return _j_;
      case 10:
       return _k_;
      case 11:
       return _l_;
      case 12:
       return _m_;
      case 13:
       return _n_;
      case 14:
       return _o_;
      case 15:
       return _p_;
      case 16:
       return _q_;
      case 17:
       return _r_;
      case 18:
       return _s_;
      case 19:
       return _t_;
      case 20:
       return _u_;
      case 21:
       return _v_;
      case 22:
       return _w_;
      case 23:
       return _x_;
      case 24:
       return _y_;
      case 25:
       return _z_;
      case 26:
       return _A_;
      case 27:
       return _B_;
      case 28:
       return _C_;
      case 29:
       return _D_;
      case 30:
       return _E_;
      case 31:
       return _F_;
      case 32:
       return _G_;
      case 33:
       return _H_;
      case 34:
       return _I_;
      case 35:
       return _J_;
      default: return _K_;
    }
   }
   function rgb(a, r, g, b){
    if(! a) return [1, [0, r, g, b]];
    var a$0 = a[1];
    return [3, [0, r, g, b, a$0]];
   }
   function hsl(a, h, s, l){
    if(! a) return [5, [0, h, s, l]];
    var a$0 = a[1];
    return [6, [0, h, s, l, a$0]];
   }
   function string_of_t(param){
    switch(param[0]){
      case 0:
       var n = param[1]; return string_of_name(n);
      case 1:
       var match = param[1], b = match[3], g = match[2], r = match[1];
       return caml_call4(Stdlib_Printf[4], _bD_, r, g, b);
      case 2:
       var
        match$0 = param[1],
        b$0 = match$0[3],
        g$0 = match$0[2],
        r$0 = match$0[1];
       return caml_call4(Stdlib_Printf[4], _bE_, r$0, g$0, b$0);
      case 3:
       var
        match$1 = param[1],
        a = match$1[4],
        b$1 = match$1[3],
        g$1 = match$1[2],
        r$1 = match$1[1];
       return caml_call5(Stdlib_Printf[4], _bF_, r$1, g$1, b$1, a);
      case 4:
       var
        match$2 = param[1],
        a$0 = match$2[4],
        b$2 = match$2[3],
        g$2 = match$2[2],
        r$2 = match$2[1];
       return caml_call5(Stdlib_Printf[4], _bG_, r$2, g$2, b$2, a$0);
      case 5:
       var match$3 = param[1], l = match$3[3], s = match$3[2], h = match$3[1];
       return caml_call4(Stdlib_Printf[4], _bH_, h, s, l);
      default:
       var
        match$4 = param[1],
        a$1 = match$4[4],
        l$0 = match$4[3],
        s$0 = match$4[2],
        h$0 = match$4[1];
       return caml_call5(Stdlib_Printf[4], _bI_, h$0, s$0, l$0, a$1);
    }
   }
   function hex_of_rgb(param){
    var blue = param[3], green = param[2], red = param[1];
    function in_range(i){
     var _cI_ = i < 0 ? 1 : 0, _cJ_ = _cI_ || (255 < i ? 1 : 0);
     if(! _cJ_) return _cJ_;
     var
      _cK_ = caml_call1(Stdlib[33], i),
      _cL_ = caml_call2(Stdlib[28], _cK_, cst_is_out_of_valid_range);
     throw caml_maybe_attach_backtrace([0, Stdlib[6], _cL_], 1);
    }
    in_range(red);
    in_range(green);
    in_range(blue);
    return caml_call4(Stdlib_Printf[4], _bJ_, red, green, blue);
   }
   function js_t_of_js_string(t12){
    var
     t1 = Js_of_ocaml_Js[14],
     rgb_re = new t1("^rgb\\(\\s*\\d*,\\s*\\d*,\\s*\\d*\\)$"),
     t3 = Js_of_ocaml_Js[14],
     rgb_pct_re = new t3("^rgb\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%\\)$"),
     t5 = Js_of_ocaml_Js[14],
     rgba_re = new t5("^rgba\\(\\s*\\d*,\\s*\\d*,\\s*\\d*,\\d*\\.?\\d*\\)$"),
     t7 = Js_of_ocaml_Js[14],
     rgba_pct_re =
       new t7("^rgba\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     t9 = Js_of_ocaml_Js[14],
     hsl_re = new t9("^hsl\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%\\)$"),
     t11 = Js_of_ocaml_Js[14],
     hsla_re =
       new t11("^hsla\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$");
    if
     (!
      (rgb_re.test(t12) | 0)
      &&
       !
       (rgba_re.test(t12) | 0)
       &&
        !
        (rgb_pct_re.test(t12) | 0)
        &&
         !
         (rgba_pct_re.test(t12) | 0)
         && ! (hsl_re.test(t12) | 0) && ! (hsla_re.test(t12) | 0)){
     if(caml_call2(Stdlib_List[37], caml_string_of_jsstring(t12), _bK_))
      return t12;
     var
      _cH_ =
        caml_call2
         (Stdlib[28], caml_string_of_jsstring(t12), cst_is_not_a_valid_color);
     throw caml_maybe_attach_backtrace([0, Stdlib[6], _cH_], 1);
    }
    return t12;
   }
   function js(c){
    if(0 !== c[0]) return caml_jsstring_of_string(string_of_t(c));
    var cn = c[1];
    return caml_jsstring_of_string(string_of_name(cn));
   }
   function ml(c){
    var s = caml_string_of_jsstring(c);
    try{var _cs_ = [0, name_of_string(s)]; return _cs_;}
    catch(_ct_){
     var _b$_ = caml_wrap_exception(_ct_);
     if(_b$_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_b$_, 0);
     var
      fail =
        function(param){
         var _cG_ = caml_call2(Stdlib[28], s, cst_is_not_a_valid_color$0);
         throw caml_maybe_attach_backtrace([0, Stdlib[6], _cG_], 1);
        },
      re_rgb = caml_call1(Js_of_ocaml_Regexp[1], cst_rgba_d_d_d_d_d),
      re_rgb_pct = caml_call1(Js_of_ocaml_Regexp[1], cst_rgba_d_d_d_d_d$0),
      re_hsl = caml_call1(Js_of_ocaml_Regexp[1], cst_hsla_d_d_d_d_d),
      i_of_s_o =
        function(param){
         if(! param) return fail(0);
         var i = param[1];
         try{var _cE_ = runtime.caml_int_of_string(i); return _cE_;}
         catch(_cF_){
          var _cA_ = caml_wrap_exception(_cF_);
          if(_cA_[1] === Stdlib[6])
           var s = _cA_[2];
          else{
           if(_cA_[1] !== Stdlib[7])
            throw caml_maybe_attach_backtrace(_cA_, 0);
           var s = _cA_[2];
          }
          var
           _cB_ = caml_call2(Stdlib[28], cst, s),
           _cC_ = caml_call2(Stdlib[28], i, _cB_),
           _cD_ = caml_call2(Stdlib[28], cst_color_conversion_error, _cC_);
          throw caml_maybe_attach_backtrace([0, Stdlib[6], _cD_], 1);
         }
        },
      f_of_s =
        function(f){
         try{var _cy_ = caml_float_of_string(f); return _cy_;}
         catch(_cz_){
          var _cu_ = caml_wrap_exception(_cz_);
          if(_cu_[1] === Stdlib[6])
           var s = _cu_[2];
          else{
           if(_cu_[1] !== Stdlib[7])
            throw caml_maybe_attach_backtrace(_cu_, 0);
           var s = _cu_[2];
          }
          var
           _cv_ = caml_call2(Stdlib[28], cst$0, s),
           _cw_ = caml_call2(Stdlib[28], f, _cv_),
           _cx_ = caml_call2(Stdlib[28], cst_color_conversion_error$0, _cw_);
          throw caml_maybe_attach_backtrace([0, Stdlib[6], _cx_], 1);
         }
        },
      match = caml_call3(Js_of_ocaml_Regexp[7], re_rgb, s, 0);
     if(match){
      var
       r = match[1],
       red = caml_call2(Js_of_ocaml_Regexp[11], r, 2),
       green = caml_call2(Js_of_ocaml_Regexp[11], r, 3),
       blue = caml_call2(Js_of_ocaml_Regexp[11], r, 4),
       alpha = caml_call2(Js_of_ocaml_Regexp[11], r, 5),
       match$0 = caml_call2(Js_of_ocaml_Regexp[11], r, 1);
      if(match$0){
       var _ca_ = match$0[1];
       if(_ca_ === cst_rgb$0){
        if(alpha) return fail(0);
        var _ce_ = i_of_s_o(blue), _cf_ = i_of_s_o(green);
        return [1, [0, i_of_s_o(red), _cf_, _ce_]];
       }
       if(_ca_ === cst_rgba$0){
        if(! alpha) return fail(0);
        var
         a = alpha[1],
         _cb_ = f_of_s(a),
         _cc_ = i_of_s_o(blue),
         _cd_ = i_of_s_o(green);
        return [3, [0, i_of_s_o(red), _cd_, _cc_, _cb_]];
       }
      }
      return fail(0);
     }
     var match$1 = caml_call3(Js_of_ocaml_Regexp[7], re_rgb_pct, s, 0);
     if(match$1){
      var
       r$0 = match$1[1],
       red$0 = caml_call2(Js_of_ocaml_Regexp[11], r$0, 2),
       green$0 = caml_call2(Js_of_ocaml_Regexp[11], r$0, 3),
       blue$0 = caml_call2(Js_of_ocaml_Regexp[11], r$0, 4),
       alpha$0 = caml_call2(Js_of_ocaml_Regexp[11], r$0, 5),
       match$2 = caml_call2(Js_of_ocaml_Regexp[11], r$0, 1);
      if(match$2){
       var _cg_ = match$2[1];
       if(_cg_ === cst_rgb$0){
        if(alpha$0) return fail(0);
        var _ck_ = i_of_s_o(blue$0), _cl_ = i_of_s_o(green$0);
        return [2, [0, i_of_s_o(red$0), _cl_, _ck_]];
       }
       if(_cg_ === cst_rgba$0){
        if(! alpha$0) return fail(0);
        var
         a$0 = alpha$0[1],
         _ch_ = f_of_s(a$0),
         _ci_ = i_of_s_o(blue$0),
         _cj_ = i_of_s_o(green$0);
        return [4, [0, i_of_s_o(red$0), _cj_, _ci_, _ch_]];
       }
      }
      return fail(0);
     }
     var match$3 = caml_call3(Js_of_ocaml_Regexp[7], re_hsl, s, 0);
     if(! match$3) return fail(0);
     var
      r$1 = match$3[1],
      red$1 = caml_call2(Js_of_ocaml_Regexp[11], r$1, 2),
      green$1 = caml_call2(Js_of_ocaml_Regexp[11], r$1, 3),
      blue$1 = caml_call2(Js_of_ocaml_Regexp[11], r$1, 4),
      alpha$1 = caml_call2(Js_of_ocaml_Regexp[11], r$1, 5),
      match$4 = caml_call2(Js_of_ocaml_Regexp[11], r$1, 1);
     if(match$4){
      var _cm_ = match$4[1];
      if(_cm_ === "hsl"){
       if(alpha$1) return fail(0);
       var _cq_ = i_of_s_o(blue$1), _cr_ = i_of_s_o(green$1);
       return [5, [0, i_of_s_o(red$1), _cr_, _cq_]];
      }
      if(_cm_ === "hsla"){
       if(! alpha$1) return fail(0);
       var
        a$1 = alpha$1[1],
        _cn_ = f_of_s(a$1),
        _co_ = i_of_s_o(blue$1),
        _cp_ = i_of_s_o(green$1);
       return [6, [0, i_of_s_o(red$1), _cp_, _co_, _cn_]];
      }
     }
     return fail(0);
    }
   }
   function string_of_t$0(param){
    if(typeof param === "number") return cst_0;
    switch(param[0]){
      case 0:
       var f = param[1]; return caml_call3(Stdlib_Printf[4], _bL_, f, cst_em);
      case 1:
       var f$0 = param[1];
       return caml_call3(Stdlib_Printf[4], _bM_, f$0, cst_ex);
      case 2:
       var f$1 = param[1];
       return caml_call3(Stdlib_Printf[4], _bN_, f$1, cst_px);
      case 3:
       var f$2 = param[1];
       return caml_call3(Stdlib_Printf[4], _bO_, f$2, cst_gd);
      case 4:
       var f$3 = param[1];
       return caml_call3(Stdlib_Printf[4], _bP_, f$3, cst_rem);
      case 5:
       var f$4 = param[1];
       return caml_call3(Stdlib_Printf[4], _bQ_, f$4, cst_vw);
      case 6:
       var f$5 = param[1];
       return caml_call3(Stdlib_Printf[4], _bR_, f$5, cst_vh);
      case 7:
       var f$6 = param[1];
       return caml_call3(Stdlib_Printf[4], _bS_, f$6, cst_vm);
      case 8:
       var f$7 = param[1];
       return caml_call3(Stdlib_Printf[4], _bT_, f$7, cst_ch);
      case 9:
       var f$8 = param[1];
       return caml_call3(Stdlib_Printf[4], _bU_, f$8, cst_mm);
      case 10:
       var f$9 = param[1];
       return caml_call3(Stdlib_Printf[4], _bV_, f$9, cst_cm);
      case 11:
       var f$10 = param[1];
       return caml_call3(Stdlib_Printf[4], _bW_, f$10, cst_in);
      case 12:
       var f$11 = param[1];
       return caml_call3(Stdlib_Printf[4], _bX_, f$11, cst_pt);
      default:
       var f$12 = param[1];
       return caml_call3(Stdlib_Printf[4], _bY_, f$12, cst_pc);
    }
   }
   function js$0(t){return caml_jsstring_of_string(string_of_t$0(t));}
   function ml$0(t){
    var s = caml_string_of_jsstring(t);
    if(caml_call2(Js_of_ocaml_Import[3][64], s, cst_0$0)) return 0;
    function fail(param){
     var _b__ = caml_call2(Stdlib[28], s, cst_is_not_a_valid_length);
     throw caml_maybe_attach_backtrace([0, Stdlib[6], _b__], 1);
    }
    var
     re = caml_call1(Js_of_ocaml_Regexp[1], cst_d_d_s_S),
     match = caml_call3(Js_of_ocaml_Regexp[7], re, s, 0);
    if(! match) return fail(0);
    var r = match[1], match$0 = caml_call2(Js_of_ocaml_Regexp[11], r, 1);
    if(match$0){
     var f = match$0[1];
     try{var _b8_ = caml_float_of_string(f), f$0 = _b8_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
      var
       s$0 = exn[2],
       _b7_ = caml_call2(Stdlib[28], cst_length_conversion_error, s$0);
      throw caml_maybe_attach_backtrace([0, Stdlib[6], _b7_], 1);
     }
    }
    else
     var f$0 = fail(0);
    var match$1 = caml_call2(Js_of_ocaml_Regexp[11], r, 2);
    if(! match$1) return fail(0);
    var _b9_ = match$1[1], switch$0 = caml_string_compare(_b9_, cst_pc$0);
    if(0 <= switch$0){
     if(0 >= switch$0) return [13, f$0];
     if(_b9_ === cst_pt$0) return [12, f$0];
     if(_b9_ === cst_px$0) return [2, f$0];
     if(_b9_ === cst_rem$0) return [4, f$0];
     if(_b9_ === cst_vh$0) return [6, f$0];
     if(_b9_ === cst_vm$0) return [7, f$0];
     if(_b9_ === cst_vw$0) return [5, f$0];
    }
    else{
     if(_b9_ === cst_ch$0) return [8, f$0];
     if(_b9_ === cst_cm$0) return [10, f$0];
     if(_b9_ === cst_em$0) return [0, f$0];
     if(_b9_ === cst_ex$0) return [1, f$0];
     if(_b9_ === cst_gd$0) return [3, f$0];
     if(_b9_ === cst_in$0) return [11, f$0];
     if(_b9_ === cst_mm$0) return [9, f$0];
    }
    return fail(0);
   }
   var
    Length = [0, string_of_t$0, js$0, ml$0],
    cst_deg = cst_deg$0,
    _bZ_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_grad = cst_grad$0,
    _b0_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_rad = cst_rad$0,
    _b1_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_turns = cst_turns$0,
    _b2_ = [0, [8, [0, 0, 0], 0, 0, [2, 0, 0]], cst_f_s],
    cst_d_d_deg_grad_rad_turns = "^(\\d*(?:\\.\\d*))(deg|grad|rad|turns)$",
    cst_is_not_a_valid_length$0 = cst_is_not_a_valid_length$1,
    cst_length_conversion_error$0 = cst_length_conversion_error$1;
   function string_of_t$1(param){
    switch(param[0]){
      case 0:
       var f = param[1];
       return caml_call3(Stdlib_Printf[4], _bZ_, f, cst_deg);
      case 1:
       var f$0 = param[1];
       return caml_call3(Stdlib_Printf[4], _b0_, f$0, cst_grad);
      case 2:
       var f$1 = param[1];
       return caml_call3(Stdlib_Printf[4], _b1_, f$1, cst_rad);
      default:
       var f$2 = param[1];
       return caml_call3(Stdlib_Printf[4], _b2_, f$2, cst_turns);
    }
   }
   function js$1(t){return caml_jsstring_of_string(string_of_t$1(t));}
   function ml$1(j){
    var
     s = caml_string_of_jsstring(j),
     re = caml_call1(Js_of_ocaml_Regexp[1], cst_d_d_deg_grad_rad_turns);
    function fail(param){
     var _b6_ = caml_call2(Stdlib[28], s, cst_is_not_a_valid_length$0);
     throw caml_maybe_attach_backtrace([0, Stdlib[6], _b6_], 1);
    }
    var match = caml_call3(Js_of_ocaml_Regexp[7], re, s, 0);
    if(! match) return fail(0);
    var r = match[1], match$0 = caml_call2(Js_of_ocaml_Regexp[11], r, 1);
    if(match$0){
     var f = match$0[1];
     try{var _b4_ = caml_float_of_string(f), f$0 = _b4_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
      var
       s$0 = exn[2],
       _b3_ = caml_call2(Stdlib[28], cst_length_conversion_error$0, s$0);
      throw caml_maybe_attach_backtrace([0, Stdlib[6], _b3_], 1);
     }
    }
    else
     var f$0 = fail(0);
    var match$1 = caml_call2(Js_of_ocaml_Regexp[11], r, 2);
    if(match$1){
     var _b5_ = match$1[1];
     if(_b5_ === cst_deg$0) return [0, f$0];
     if(_b5_ === cst_grad$0) return [1, f$0];
     if(_b5_ === cst_rad$0) return [2, f$0];
     if(_b5_ === cst_turns$0) return [3, f$0];
    }
    return fail(0);
   }
   var
    Angle = [0, string_of_t$1, js$1, ml$1],
    Js_of_ocaml_CSS =
      [0,
       [0,
        string_of_name,
        rgb_of_name,
        hex_of_rgb,
        rgb,
        hsl,
        string_of_t,
        js,
        ml,
        js_t_of_js_string],
       Length,
       Angle];
   runtime.caml_register_global(546, Js_of_ocaml_CSS, "Js_of_ocaml__CSS");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Dom_events
//# unitInfo: Requires: Js_of_ocaml__Dom_html, Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html;
   function listen(opt, target, typ, cb){
    var
     capture = opt ? opt[1] : 0,
     _a_ =
       caml_call1
        (Js_of_ocaml_Dom_html[11],
         function(n, e){return ! ! caml_call2(cb, n, e);});
    return caml_call4(Js_of_ocaml_Dom_html[17], target, typ, _a_, ! ! capture);
   }
   var
    stop_listen = Js_of_ocaml_Dom_html[18],
    Js_of_ocaml_Dom_events =
      [0, Js_of_ocaml_Dom_html[15], listen, stop_listen];
   runtime.caml_register_global
    (1, Js_of_ocaml_Dom_events, "Js_of_ocaml__Dom_events");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Dom_svg
//# unitInfo: Requires: Js_of_ocaml__Js, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_a$0 = "a",
    cst_altglyph$0 = "altglyph",
    cst_altglyphdef$0 = "altglyphdef",
    cst_altglyphitem$0 = "altglyphitem",
    cst_animate$0 = "animate",
    cst_animatecolor$0 = "animatecolor",
    cst_animatemotion$0 = "animatemotion",
    cst_animatetransform$0 = "animatetransform",
    cst_circle$0 = "circle",
    cst_clippath$0 = "clippath",
    cst_cursor$0 = "cursor",
    cst_defs$0 = "defs",
    cst_desc$0 = "desc",
    cst_ellipse$0 = "ellipse",
    cst_filter$0 = "filter",
    cst_font$0 = "font",
    cst_font_face$0 = "font-face",
    cst_font_face_format$0 = "font-face-format",
    cst_font_face_name$0 = "font-face-name",
    cst_font_face_src$0 = "font-face-src",
    cst_font_face_uri$0 = "font-face-uri",
    cst_g$0 = "g",
    cst_glyph$0 = "glyph",
    cst_glyphref$0 = "glyphref",
    cst_hkern$0 = "hkern",
    cst_http_www_w3_org_2000_svg = "http://www.w3.org/2000/svg",
    cst_image$0 = "image",
    cst_line$0 = "line",
    cst_lineargradient$0 = "lineargradient",
    cst_mask$0 = "mask",
    cst_metadata$0 = "metadata",
    cst_missing_glyph$0 = "missing-glyph",
    cst_mpath$0 = "mpath",
    cst_path$0 = "path",
    cst_pattern$0 = "pattern",
    cst_polygon$0 = "polygon",
    cst_polyline$0 = "polyline",
    cst_radialgradient$0 = "radialgradient",
    cst_rect$0 = "rect",
    cst_script$0 = "script",
    cst_set$0 = "set",
    cst_stop$0 = "stop",
    cst_style$0 = "style",
    cst_svg$0 = "svg",
    cst_switch$0 = "switch",
    cst_symbol$0 = "symbol",
    cst_text$0 = "text",
    cst_textpath$0 = "textpath",
    cst_title$0 = "title",
    cst_tref$0 = "tref",
    cst_tspan$0 = "tspan",
    cst_use$0 = "use",
    cst_view$0 = "view",
    cst_vkern$0 = "vkern",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name$52 = cst_vkern$0,
    name$51 = cst_view$0,
    name$50 = cst_use$0,
    name$49 = cst_tspan$0,
    name$48 = cst_tref$0,
    name$47 = cst_title$0,
    name$46 = cst_textpath$0,
    name$45 = cst_text$0,
    name$44 = cst_symbol$0,
    name$43 = cst_switch$0,
    name$42 = cst_svg$0,
    name$41 = cst_style$0,
    name$40 = cst_stop$0,
    name$39 = cst_set$0,
    name$38 = cst_script$0,
    name$37 = cst_rect$0,
    name$36 = cst_radialgradient$0,
    name$35 = cst_polyline$0,
    name$34 = cst_polygon$0,
    name$33 = cst_pattern$0,
    name$32 = cst_path$0,
    name$31 = cst_mpath$0,
    name$30 = cst_missing_glyph$0,
    name$29 = cst_metadata$0,
    name$28 = cst_mask$0,
    name$27 = cst_lineargradient$0,
    name$26 = cst_line$0,
    name$25 = cst_image$0,
    name$24 = cst_hkern$0,
    name$23 = cst_glyphref$0,
    name$22 = cst_glyph$0,
    name$21 = cst_g$0,
    name$20 = "foreignObject",
    name$19 = cst_font_face_uri$0,
    name$18 = cst_font_face_src$0,
    name$17 = cst_font_face_name$0,
    name$16 = cst_font_face_format$0,
    name$15 = cst_font_face$0,
    name$14 = cst_font$0,
    name$13 = cst_filter$0,
    name$12 = cst_ellipse$0,
    name$11 = cst_desc$0,
    name$10 = cst_defs$0,
    name$9 = cst_cursor$0,
    name$8 = cst_clippath$0,
    name$7 = cst_circle$0,
    name$6 = cst_animatetransform$0,
    name$5 = cst_animatemotion$0,
    name$4 = cst_animatecolor$0,
    name$3 = cst_animate$0,
    name$2 = cst_altglyphitem$0,
    name$1 = cst_altglyphdef$0,
    name$0 = cst_altglyph$0,
    name = cst_a$0,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib = global_data.Stdlib,
    xmlns = cst_http_www_w3_org_2000_svg,
    SVGError =
      [248, "Js_of_ocaml__Dom_svg.SVGError", runtime.caml_fresh_oo_id(0)];
   function createElement(doc, name){
    var t1 = caml_jsstring_of_string(name);
    return doc.createElementNS(cst_http_www_w3_org_2000_svg, t1);
   }
   function createA(doc){return createElement(doc, name);}
   function createAltGlyph(doc){return createElement(doc, name$0);}
   function createAltGlyphDef(doc){return createElement(doc, name$1);}
   function createAltGlyphItem(doc){return createElement(doc, name$2);}
   function createAnimate(doc){return createElement(doc, name$3);}
   function createAnimateColor(doc){return createElement(doc, name$4);}
   function createAnimateMotion(doc){return createElement(doc, name$5);}
   function createAnimateTransform(doc){return createElement(doc, name$6);}
   function createCircle(doc){return createElement(doc, name$7);}
   function createClipPath(doc){return createElement(doc, name$8);}
   function createCursor(doc){return createElement(doc, name$9);}
   function createDefs(doc){return createElement(doc, name$10);}
   function createDesc(doc){return createElement(doc, name$11);}
   function createEllipse(doc){return createElement(doc, name$12);}
   function createFilter(doc){return createElement(doc, name$13);}
   function createFont(doc){return createElement(doc, name$14);}
   function createFontFace(doc){return createElement(doc, name$15);}
   function createFontFaceFormat(doc){return createElement(doc, name$16);}
   function createFontFaceName(doc){return createElement(doc, name$17);}
   function createFontFaceSrc(doc){return createElement(doc, name$18);}
   function createFontFaceUri(doc){return createElement(doc, name$19);}
   function createForeignObject(doc){return createElement(doc, name$20);}
   function createG(doc){return createElement(doc, name$21);}
   function createGlyph(doc){return createElement(doc, name$22);}
   function createGlyphRef(doc){return createElement(doc, name$23);}
   function createhkern(doc){return createElement(doc, name$24);}
   function createImage(doc){return createElement(doc, name$25);}
   function createLineElement(doc){return createElement(doc, name$26);}
   function createLinearElement(doc){return createElement(doc, name$27);}
   function createMask(doc){return createElement(doc, name$28);}
   function createMetaData(doc){return createElement(doc, name$29);}
   function createMissingGlyph(doc){return createElement(doc, name$30);}
   function createMPath(doc){return createElement(doc, name$31);}
   function createPath(doc){return createElement(doc, name$32);}
   function createPattern(doc){return createElement(doc, name$33);}
   function createPolygon(doc){return createElement(doc, name$34);}
   function createPolyline(doc){return createElement(doc, name$35);}
   function createRadialgradient(doc){return createElement(doc, name$36);}
   function createRect(doc){return createElement(doc, name$37);}
   function createScript(doc){return createElement(doc, name$38);}
   function createSet(doc){return createElement(doc, name$39);}
   function createStop(doc){return createElement(doc, name$40);}
   function createStyle(doc){return createElement(doc, name$41);}
   function createSvg(doc){return createElement(doc, name$42);}
   function createSwitch(doc){return createElement(doc, name$43);}
   function createSymbol(doc){return createElement(doc, name$44);}
   function createTextElement(doc){return createElement(doc, name$45);}
   function createTextpath(doc){return createElement(doc, name$46);}
   function createTitle(doc){return createElement(doc, name$47);}
   function createTref(doc){return createElement(doc, name$48);}
   function createTspan(doc){return createElement(doc, name$49);}
   function createUse(doc){return createElement(doc, name$50);}
   function createView(doc){return createElement(doc, name$51);}
   function createvkern(doc){return createElement(doc, name$52);}
   var
    t3 = Js_of_ocaml_Js[52][1],
    svg_element = t3.SVGElement,
    t4 = Js_of_ocaml_Js[52][1],
    document = t4.document,
    cst_a = cst_a$0,
    cst_altglyph = cst_altglyph$0,
    cst_altglyphdef = cst_altglyphdef$0,
    cst_altglyphitem = cst_altglyphitem$0,
    cst_animate = cst_animate$0,
    cst_animatecolor = cst_animatecolor$0,
    cst_animatemotion = cst_animatemotion$0,
    cst_animatetransform = cst_animatetransform$0,
    cst_circle = cst_circle$0,
    cst_clippath = cst_clippath$0,
    cst_cursor = cst_cursor$0,
    cst_defs = cst_defs$0,
    cst_desc = cst_desc$0,
    cst_ellipse = cst_ellipse$0,
    cst_filter = cst_filter$0,
    cst_font = cst_font$0,
    cst_font_face = cst_font_face$0,
    cst_font_face_format = cst_font_face_format$0,
    cst_font_face_name = cst_font_face_name$0,
    cst_font_face_src = cst_font_face_src$0,
    cst_font_face_uri = cst_font_face_uri$0,
    cst_foreignobject = "foreignobject",
    cst_g = cst_g$0,
    cst_glyph = cst_glyph$0,
    cst_glyphref = cst_glyphref$0,
    cst_hkern = cst_hkern$0,
    cst_image = cst_image$0,
    cst_line = cst_line$0,
    cst_lineargradient = cst_lineargradient$0,
    cst_mask = cst_mask$0,
    cst_metadata = cst_metadata$0,
    cst_missing_glyph = cst_missing_glyph$0,
    cst_mpath = cst_mpath$0,
    cst_path = cst_path$0,
    cst_pattern = cst_pattern$0,
    cst_polygon = cst_polygon$0,
    cst_polyline = cst_polyline$0,
    cst_radialgradient = cst_radialgradient$0,
    cst_rect = cst_rect$0,
    cst_script = cst_script$0,
    cst_set = cst_set$0,
    cst_stop = cst_stop$0,
    cst_style = cst_style$0,
    cst_svg = cst_svg$0,
    cst_switch = cst_switch$0,
    cst_symbol = cst_symbol$0,
    cst_text = cst_text$0,
    cst_textpath = cst_textpath$0,
    cst_title = cst_title$0,
    cst_tref = cst_tref$0,
    cst_tspan = cst_tspan$0,
    cst_use = cst_use$0,
    cst_view = cst_view$0,
    cst_vkern = cst_vkern$0;
   function getElementById(id){
    var
     t6 = caml_jsstring_of_string(id),
     t5 = Js_of_ocaml_Js[52][1],
     t7 = t5.document,
     _a_ = t7.getElementById(t6);
    return caml_call3
            (Js_of_ocaml_Js[5][7],
             _a_,
             function(param){throw caml_maybe_attach_backtrace(Stdlib[8], 1);},
             function(e){
              if(e instanceof svg_element) return e;
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             });
   }
   function element(e){
    return e instanceof svg_element
            ? caml_call1(Js_of_ocaml_Js[2], e)
            : Js_of_ocaml_Js[1];
   }
   function unsafeCoerce(t8, tag){
    var t9 = t8.tagName;
    return t9.toLowerCase() == caml_jsstring_of_string(tag)
            ? caml_call1(Js_of_ocaml_Js[2], t8)
            : Js_of_ocaml_Js[1];
   }
   function a(e){return unsafeCoerce(e, cst_a);}
   function altGlyph(e){return unsafeCoerce(e, cst_altglyph);}
   function altGlyphDef(e){return unsafeCoerce(e, cst_altglyphdef);}
   function altGlyphItem(e){return unsafeCoerce(e, cst_altglyphitem);}
   function animate(e){return unsafeCoerce(e, cst_animate);}
   function animateColor(e){return unsafeCoerce(e, cst_animatecolor);}
   function animateMotion(e){return unsafeCoerce(e, cst_animatemotion);}
   function animateTransform(e){return unsafeCoerce(e, cst_animatetransform);}
   function circle(e){return unsafeCoerce(e, cst_circle);}
   function clipPath(e){return unsafeCoerce(e, cst_clippath);}
   function cursor(e){return unsafeCoerce(e, cst_cursor);}
   function defs(e){return unsafeCoerce(e, cst_defs);}
   function desc(e){return unsafeCoerce(e, cst_desc);}
   function ellipse(e){return unsafeCoerce(e, cst_ellipse);}
   function filter(e){return unsafeCoerce(e, cst_filter);}
   function font(e){return unsafeCoerce(e, cst_font);}
   function fontFace(e){return unsafeCoerce(e, cst_font_face);}
   function fontFaceFormat(e){return unsafeCoerce(e, cst_font_face_format);}
   function fontFaceName(e){return unsafeCoerce(e, cst_font_face_name);}
   function fontFaceSrc(e){return unsafeCoerce(e, cst_font_face_src);}
   function fontFaceUri(e){return unsafeCoerce(e, cst_font_face_uri);}
   function foreignObject(e){return unsafeCoerce(e, cst_foreignobject);}
   function g(e){return unsafeCoerce(e, cst_g);}
   function glyph(e){return unsafeCoerce(e, cst_glyph);}
   function glyphRef(e){return unsafeCoerce(e, cst_glyphref);}
   function hkern(e){return unsafeCoerce(e, cst_hkern);}
   function image(e){return unsafeCoerce(e, cst_image);}
   function lineElement(e){return unsafeCoerce(e, cst_line);}
   function linearElement(e){return unsafeCoerce(e, cst_lineargradient);}
   function mask(e){return unsafeCoerce(e, cst_mask);}
   function metaData(e){return unsafeCoerce(e, cst_metadata);}
   function missingGlyph(e){return unsafeCoerce(e, cst_missing_glyph);}
   function mPath(e){return unsafeCoerce(e, cst_mpath);}
   function path(e){return unsafeCoerce(e, cst_path);}
   function pattern(e){return unsafeCoerce(e, cst_pattern);}
   function polygon(e){return unsafeCoerce(e, cst_polygon);}
   function polyline(e){return unsafeCoerce(e, cst_polyline);}
   function radialgradient(e){return unsafeCoerce(e, cst_radialgradient);}
   function rect(e){return unsafeCoerce(e, cst_rect);}
   function script(e){return unsafeCoerce(e, cst_script);}
   function set(e){return unsafeCoerce(e, cst_set);}
   function stop(e){return unsafeCoerce(e, cst_stop);}
   function style(e){return unsafeCoerce(e, cst_style);}
   function svg(e){return unsafeCoerce(e, cst_svg);}
   function switch$0(e){return unsafeCoerce(e, cst_switch);}
   function symbol(e){return unsafeCoerce(e, cst_symbol);}
   function textElement(e){return unsafeCoerce(e, cst_text);}
   function textpath(e){return unsafeCoerce(e, cst_textpath);}
   function title(e){return unsafeCoerce(e, cst_title);}
   function tref(e){return unsafeCoerce(e, cst_tref);}
   function tspan(e){return unsafeCoerce(e, cst_tspan);}
   function use(e){return unsafeCoerce(e, cst_use);}
   function view(e){return unsafeCoerce(e, cst_view);}
   function vkern(e){return unsafeCoerce(e, cst_vkern);}
   var
    Js_of_ocaml_Dom_svg =
      [0,
       xmlns,
       SVGError,
       createElement,
       createA,
       createAltGlyph,
       createAltGlyphDef,
       createAltGlyphItem,
       createAnimate,
       createAnimateColor,
       createAnimateMotion,
       createAnimateTransform,
       createCircle,
       createClipPath,
       createCursor,
       createDefs,
       createDesc,
       createEllipse,
       createFilter,
       createFont,
       createFontFace,
       createFontFaceFormat,
       createFontFaceName,
       createFontFaceSrc,
       createFontFaceUri,
       createForeignObject,
       createG,
       createGlyph,
       createGlyphRef,
       createhkern,
       createImage,
       createLineElement,
       createLinearElement,
       createMask,
       createMetaData,
       createMissingGlyph,
       createMPath,
       createPath,
       createPattern,
       createPolygon,
       createPolyline,
       createRadialgradient,
       createRect,
       createScript,
       createSet,
       createStop,
       createStyle,
       createSvg,
       createSwitch,
       createSymbol,
       createTextElement,
       createTextpath,
       createTitle,
       createTref,
       createTspan,
       createUse,
       createView,
       createvkern,
       svg_element,
       document,
       getElementById,
       [0,
        element,
        a,
        altGlyph,
        altGlyphDef,
        altGlyphItem,
        animate,
        animateColor,
        animateMotion,
        animateTransform,
        circle,
        clipPath,
        cursor,
        defs,
        desc,
        ellipse,
        filter,
        font,
        fontFace,
        fontFaceFormat,
        fontFaceName,
        fontFaceSrc,
        fontFaceUri,
        foreignObject,
        g,
        glyph,
        glyphRef,
        hkern,
        image,
        lineElement,
        linearElement,
        mask,
        metaData,
        missingGlyph,
        mPath,
        path,
        pattern,
        polygon,
        polyline,
        radialgradient,
        rect,
        script,
        set,
        stop,
        style,
        svg,
        switch$0,
        symbol,
        textElement,
        textpath,
        title,
        tref,
        tspan,
        use,
        view,
        vkern]];
   runtime.caml_register_global
    (119, Js_of_ocaml_Dom_svg, "Js_of_ocaml__Dom_svg");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__EventSource
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom;
   function withCredentials(b){
    var init = {}, t0 = ! ! b;
    init.withCredentials = t0;
    return init;
   }
   var
    t2 = Js_of_ocaml_Js[52][1],
    eventSource = t2.EventSource,
    t3 = Js_of_ocaml_Js[52][1],
    eventSource_options = t3.EventSource,
    addEventListener = Js_of_ocaml_Dom[16],
    Js_of_ocaml_EventSource =
      [0, withCredentials, eventSource, eventSource_options, addEventListener];
   runtime.caml_register_global
    (5, Js_of_ocaml_EventSource, "Js_of_ocaml__EventSource");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Firebug
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    console = runtime.caml_js_get_console(0),
    Js_of_ocaml_Firebug = [0, console];
   runtime.caml_register_global
    (0, Js_of_ocaml_Firebug, "Js_of_ocaml__Firebug");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Geolocation
//# unitInfo: Requires: Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js;
   function empty_position_options(param){return {};}
   var
    t0 = Js_of_ocaml_Js[52][1],
    t1 = t0.navigator,
    geolocation = caml_call1(Js_of_ocaml_Js[6][5], t1) ? t1.geolocation : t1;
   function is_supported(param){
    return caml_call1(Js_of_ocaml_Js[6][5], geolocation);
   }
   var
    Js_of_ocaml_Geolocation =
      [0, empty_position_options, geolocation, is_supported];
   runtime.caml_register_global
    (3, Js_of_ocaml_Geolocation, "Js_of_ocaml__Geolocation");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__IntersectionObserver
//# unitInfo: Requires: Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js;
   function empty_intersection_observer_op(param){return {};}
   var
    t0 = Js_of_ocaml_Js[52][1],
    intersectionObserver_unsafe = t0.IntersectionObserver;
   function is_supported(param){
    return caml_call1(Js_of_ocaml_Js[6][5], intersectionObserver_unsafe);
   }
   var
    Js_of_ocaml_IntersectionObserv =
      [0,
       empty_intersection_observer_op,
       is_supported,
       intersectionObserver_unsafe];
   runtime.caml_register_global
    (2, Js_of_ocaml_IntersectionObserv, "Js_of_ocaml__IntersectionObserver");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml__Intl
//# unitInfo: Requires: CamlinternalOO, Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_best_fit = "best fit";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js;
   global_data.CamlinternalOO;
   function object_options(param){return {localeMatcher: cst_best_fit};}
   function options(param){
    var t5 = Js_of_ocaml_Js[8], t4 = Js_of_ocaml_Js[8];
    return {localeMatcher: cst_best_fit,
            usage: "sort",
            sensitivity: "variant",
            ignorePunctuation: t4,
            numeric: t5,
            caseFirst: "false"};
   }
   var Collator = [0, object_options, options];
   function options$0(param){
    var
     t26 = Js_of_ocaml_Js[3],
     t25 = Js_of_ocaml_Js[3],
     t24 = Js_of_ocaml_Js[3],
     t23 = Js_of_ocaml_Js[3],
     t22 = Js_of_ocaml_Js[3],
     t21 = Js_of_ocaml_Js[3],
     t20 = Js_of_ocaml_Js[3],
     t19 = Js_of_ocaml_Js[3],
     t18 = Js_of_ocaml_Js[3],
     t17 = Js_of_ocaml_Js[3],
     t15 = Js_of_ocaml_Js[3],
     t14 = Js_of_ocaml_Js[3],
     t13 = Js_of_ocaml_Js[3],
     t11 = Js_of_ocaml_Js[3],
     t10 = Js_of_ocaml_Js[3],
     t9 = Js_of_ocaml_Js[3],
     t8 = Js_of_ocaml_Js[3],
     t7 = Js_of_ocaml_Js[3];
    return {dateStyle: t7,
            timeStyle: t8,
            calendar: t9,
            dayPeriod: t10,
            numberingSystem: t11,
            localeMatcher: cst_best_fit,
            timeZone: t13,
            hour12: t14,
            hourCycle: t15,
            formatMatcher: cst_best_fit,
            weekday: t17,
            era: t18,
            year: t19,
            month: t20,
            day: t21,
            hour: t22,
            minute: t23,
            second: t24,
            fractionalSecondDigits: t25,
            timeZoneName: t26};
   }
   var DateTimeFormat = [0, object_options, options$0];
   function options$1(param){
    var
     t47 = Js_of_ocaml_Js[3],
     t46 = Js_of_ocaml_Js[3],
     t45 = Js_of_ocaml_Js[3],
     t44 = Js_of_ocaml_Js[3],
     t43 = Js_of_ocaml_Js[3],
     t42 = Js_of_ocaml_Js[3],
     t41 = Js_of_ocaml_Js[3],
     t40 = Js_of_ocaml_Js[3],
     t39 = Js_of_ocaml_Js[3],
     t38 = Js_of_ocaml_Js[7],
     t37 = Js_of_ocaml_Js[3],
     t36 = Js_of_ocaml_Js[3],
     t34 = Js_of_ocaml_Js[3],
     t33 = Js_of_ocaml_Js[3],
     t32 = Js_of_ocaml_Js[3],
     t30 = Js_of_ocaml_Js[3],
     t29 = Js_of_ocaml_Js[3],
     t28 = Js_of_ocaml_Js[3],
     t27 = Js_of_ocaml_Js[3];
    return {compactDisplay: t27,
            currency: t28,
            currencyDisplay: t29,
            currencySign: t30,
            localeMatcher: cst_best_fit,
            notation: t32,
            numberingSystem: t33,
            signDisplay: t34,
            style: "decimal",
            unit: t36,
            unitDisplay: t37,
            useGrouping: t38,
            roundingMode: t39,
            roundingPriority: t40,
            roundingIncrement: t41,
            trailingZeroDisplay: t42,
            minimumIntegerDigits: t43,
            minimumFractionDigits: t44,
            maximumFractionDigits: t45,
            minimumSignificantDigits: t46,
            maximumSignificantDigits: t47};
   }
   var NumberFormat = [0, object_options, options$1];
   function options$2(param){
    return {localeMatcher: cst_best_fit, type: "cardinal"};
   }
   var
    PluralRules = [0, object_options, options$2],
    t50 = Js_of_ocaml_Js[52][1],
    intl = t50.Intl,
    t51 = Js_of_ocaml_Js[52][1],
    t52 = t51.Intl,
    collator_constr = t52.Collator,
    t53 = Js_of_ocaml_Js[52][1],
    t54 = t53.Intl,
    dateTimeFormat_constr = t54.DateTimeFormat,
    t55 = Js_of_ocaml_Js[52][1],
    t56 = t55.Intl,
    numberFormat_constr = t56.NumberFormat,
    t57 = Js_of_ocaml_Js[52][1],
    t58 = t57.Intl,
    pluralRules_constr = t58.PluralRules;
   function is_supported(param){
    return caml_call1(Js_of_ocaml_Js[6][5], intl);
   }
   var
    Js_of_ocaml_Intl =
      [0,
       Collator,
       DateTimeFormat,
       NumberFormat,
       PluralRules,
       intl,
       collator_constr,
       dateTimeFormat_constr,
       numberFormat_constr,
       pluralRules_constr,
       is_supported];
   runtime.caml_register_global(87, Js_of_ocaml_Intl, "Js_of_ocaml__Intl");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Js_of_ocaml = [0];
   runtime.caml_register_global(0, Js_of_ocaml, "Js_of_ocaml");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
