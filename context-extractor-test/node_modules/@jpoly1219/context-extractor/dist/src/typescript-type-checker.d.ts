import * as ts from 'typescript';
import { TypeChecker, TypeAnalysis } from "./types";
export declare class TypeScriptTypeChecker implements TypeChecker {
    getIdentifierFromDecl(typeDecl: string): string;
    getTypeContextFromDecl(typeDecl: string): {
        identifier: string;
        span: string;
    } | null;
    checkPrimitive(typeDecl: string): {
        identifier: string;
        span: string;
        interestingIndex: number;
    } | null;
    checkImports(typeDecl: string): {
        identifier: string;
        span: string;
        interestingIndex: number;
    } | null;
    checkModule(typeDecl: string): {
        identifier: string;
        span: string;
        interestingIndex: number;
    } | null;
    checkObject(typeDecl: string): {
        identifier: string;
        span: string;
        interestingIndex: number;
    } | null;
    checkUnion(typeDecl: string): {
        identifier: string;
        span: string;
        interestingIndex: number;
    } | null;
    checkFunction(typeDecl: string): {
        identifier: string;
        span: string;
        interestingIndex: number;
    } | null;
    checkHole(typeDecl: string): {
        identifier: string;
        span: string;
    } | null;
    checkParameter(typeDecl: string): null;
    isTuple(typeSpan: string): boolean;
    isUnion(typeSpan: string): boolean;
    isArray(typeSpan: string): boolean;
    isObject(typeSpan: string): boolean;
    isFunction(typeSpan: string): boolean;
    isPrimitive(typeSpan: string): boolean;
    isTypeAlias(typeSpan: string): boolean;
    escapeQuotes(typeSpan: string): string;
    parseTypeArrayString(typeStr: string): string[];
    handleMembers(members: ts.NodeArray<ts.TypeElement> | ts.NodeArray<ts.ClassElement>, checker: ts.TypeChecker): TypeAnalysis[];
    analyzeTypeNode(typeNode: ts.TypeNode, checker: ts.TypeChecker): TypeAnalysis;
    analyzeTypeString(typeString: string, program?: ts.Program): TypeAnalysis;
    createProgramFromSource(content: string): ts.Program;
    isPrimitive2(typeAnalysisResult: TypeAnalysis): RegExpMatchArray | null;
    isFunction2(typeAnalysisResult: TypeAnalysis): boolean;
    isTuple2(typeAnalysisResult: TypeAnalysis): boolean;
    isObject2(typeAnalysisResult: TypeAnalysis): boolean;
    isUnion2(typeAnalysisResult: TypeAnalysis): boolean;
    isArray2(typeAnalysisResult: TypeAnalysis): boolean;
    isTypeAlias2(typeAnalysisResult: TypeAnalysis): boolean;
}
